
Wifi.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000503c  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000790  080051cc  080051cc  000151cc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800595c  0800595c  00020084  2**0
                  CONTENTS
  4 .ARM          00000008  0800595c  0800595c  0001595c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005964  08005964  00020084  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005964  08005964  00015964  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005968  08005968  00015968  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000084  20000000  0800596c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000378  20000084  080059f0  00020084  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200003fc  080059f0  000203fc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020084  2**0
                  CONTENTS, READONLY
 12 .debug_info   00010f51  00000000  00000000  000200b4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002905  00000000  00000000  00031005  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000dd0  00000000  00000000  00033910  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000cc0  00000000  00000000  000346e0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00027219  00000000  00000000  000353a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00012d92  00000000  00000000  0005c5b9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000eb296  00000000  00000000  0006f34b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0015a5e1  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003b9c  00000000  00000000  0015a634  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000084 	.word	0x20000084
 80001ac:	00000000 	.word	0x00000000
 80001b0:	080051b4 	.word	0x080051b4

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000088 	.word	0x20000088
 80001cc:	080051b4 	.word	0x080051b4

080001d0 <strcmp>:
 80001d0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001d4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001d8:	2a01      	cmp	r2, #1
 80001da:	bf28      	it	cs
 80001dc:	429a      	cmpcs	r2, r3
 80001de:	d0f7      	beq.n	80001d0 <strcmp>
 80001e0:	1ad0      	subs	r0, r2, r3
 80001e2:	4770      	bx	lr

080001e4 <strlen>:
 80001e4:	4603      	mov	r3, r0
 80001e6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001ea:	2a00      	cmp	r2, #0
 80001ec:	d1fb      	bne.n	80001e6 <strlen+0x2>
 80001ee:	1a18      	subs	r0, r3, r0
 80001f0:	3801      	subs	r0, #1
 80001f2:	4770      	bx	lr
	...

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <__aeabi_uldivmod>:
 80002a0:	b953      	cbnz	r3, 80002b8 <__aeabi_uldivmod+0x18>
 80002a2:	b94a      	cbnz	r2, 80002b8 <__aeabi_uldivmod+0x18>
 80002a4:	2900      	cmp	r1, #0
 80002a6:	bf08      	it	eq
 80002a8:	2800      	cmpeq	r0, #0
 80002aa:	bf1c      	itt	ne
 80002ac:	f04f 31ff 	movne.w	r1, #4294967295
 80002b0:	f04f 30ff 	movne.w	r0, #4294967295
 80002b4:	f000 b974 	b.w	80005a0 <__aeabi_idiv0>
 80002b8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002bc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002c0:	f000 f806 	bl	80002d0 <__udivmoddi4>
 80002c4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002c8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002cc:	b004      	add	sp, #16
 80002ce:	4770      	bx	lr

080002d0 <__udivmoddi4>:
 80002d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002d4:	9d08      	ldr	r5, [sp, #32]
 80002d6:	4604      	mov	r4, r0
 80002d8:	468e      	mov	lr, r1
 80002da:	2b00      	cmp	r3, #0
 80002dc:	d14d      	bne.n	800037a <__udivmoddi4+0xaa>
 80002de:	428a      	cmp	r2, r1
 80002e0:	4694      	mov	ip, r2
 80002e2:	d969      	bls.n	80003b8 <__udivmoddi4+0xe8>
 80002e4:	fab2 f282 	clz	r2, r2
 80002e8:	b152      	cbz	r2, 8000300 <__udivmoddi4+0x30>
 80002ea:	fa01 f302 	lsl.w	r3, r1, r2
 80002ee:	f1c2 0120 	rsb	r1, r2, #32
 80002f2:	fa20 f101 	lsr.w	r1, r0, r1
 80002f6:	fa0c fc02 	lsl.w	ip, ip, r2
 80002fa:	ea41 0e03 	orr.w	lr, r1, r3
 80002fe:	4094      	lsls	r4, r2
 8000300:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000304:	0c21      	lsrs	r1, r4, #16
 8000306:	fbbe f6f8 	udiv	r6, lr, r8
 800030a:	fa1f f78c 	uxth.w	r7, ip
 800030e:	fb08 e316 	mls	r3, r8, r6, lr
 8000312:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000316:	fb06 f107 	mul.w	r1, r6, r7
 800031a:	4299      	cmp	r1, r3
 800031c:	d90a      	bls.n	8000334 <__udivmoddi4+0x64>
 800031e:	eb1c 0303 	adds.w	r3, ip, r3
 8000322:	f106 30ff 	add.w	r0, r6, #4294967295
 8000326:	f080 811f 	bcs.w	8000568 <__udivmoddi4+0x298>
 800032a:	4299      	cmp	r1, r3
 800032c:	f240 811c 	bls.w	8000568 <__udivmoddi4+0x298>
 8000330:	3e02      	subs	r6, #2
 8000332:	4463      	add	r3, ip
 8000334:	1a5b      	subs	r3, r3, r1
 8000336:	b2a4      	uxth	r4, r4
 8000338:	fbb3 f0f8 	udiv	r0, r3, r8
 800033c:	fb08 3310 	mls	r3, r8, r0, r3
 8000340:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000344:	fb00 f707 	mul.w	r7, r0, r7
 8000348:	42a7      	cmp	r7, r4
 800034a:	d90a      	bls.n	8000362 <__udivmoddi4+0x92>
 800034c:	eb1c 0404 	adds.w	r4, ip, r4
 8000350:	f100 33ff 	add.w	r3, r0, #4294967295
 8000354:	f080 810a 	bcs.w	800056c <__udivmoddi4+0x29c>
 8000358:	42a7      	cmp	r7, r4
 800035a:	f240 8107 	bls.w	800056c <__udivmoddi4+0x29c>
 800035e:	4464      	add	r4, ip
 8000360:	3802      	subs	r0, #2
 8000362:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000366:	1be4      	subs	r4, r4, r7
 8000368:	2600      	movs	r6, #0
 800036a:	b11d      	cbz	r5, 8000374 <__udivmoddi4+0xa4>
 800036c:	40d4      	lsrs	r4, r2
 800036e:	2300      	movs	r3, #0
 8000370:	e9c5 4300 	strd	r4, r3, [r5]
 8000374:	4631      	mov	r1, r6
 8000376:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800037a:	428b      	cmp	r3, r1
 800037c:	d909      	bls.n	8000392 <__udivmoddi4+0xc2>
 800037e:	2d00      	cmp	r5, #0
 8000380:	f000 80ef 	beq.w	8000562 <__udivmoddi4+0x292>
 8000384:	2600      	movs	r6, #0
 8000386:	e9c5 0100 	strd	r0, r1, [r5]
 800038a:	4630      	mov	r0, r6
 800038c:	4631      	mov	r1, r6
 800038e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000392:	fab3 f683 	clz	r6, r3
 8000396:	2e00      	cmp	r6, #0
 8000398:	d14a      	bne.n	8000430 <__udivmoddi4+0x160>
 800039a:	428b      	cmp	r3, r1
 800039c:	d302      	bcc.n	80003a4 <__udivmoddi4+0xd4>
 800039e:	4282      	cmp	r2, r0
 80003a0:	f200 80f9 	bhi.w	8000596 <__udivmoddi4+0x2c6>
 80003a4:	1a84      	subs	r4, r0, r2
 80003a6:	eb61 0303 	sbc.w	r3, r1, r3
 80003aa:	2001      	movs	r0, #1
 80003ac:	469e      	mov	lr, r3
 80003ae:	2d00      	cmp	r5, #0
 80003b0:	d0e0      	beq.n	8000374 <__udivmoddi4+0xa4>
 80003b2:	e9c5 4e00 	strd	r4, lr, [r5]
 80003b6:	e7dd      	b.n	8000374 <__udivmoddi4+0xa4>
 80003b8:	b902      	cbnz	r2, 80003bc <__udivmoddi4+0xec>
 80003ba:	deff      	udf	#255	; 0xff
 80003bc:	fab2 f282 	clz	r2, r2
 80003c0:	2a00      	cmp	r2, #0
 80003c2:	f040 8092 	bne.w	80004ea <__udivmoddi4+0x21a>
 80003c6:	eba1 010c 	sub.w	r1, r1, ip
 80003ca:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003ce:	fa1f fe8c 	uxth.w	lr, ip
 80003d2:	2601      	movs	r6, #1
 80003d4:	0c20      	lsrs	r0, r4, #16
 80003d6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003da:	fb07 1113 	mls	r1, r7, r3, r1
 80003de:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003e2:	fb0e f003 	mul.w	r0, lr, r3
 80003e6:	4288      	cmp	r0, r1
 80003e8:	d908      	bls.n	80003fc <__udivmoddi4+0x12c>
 80003ea:	eb1c 0101 	adds.w	r1, ip, r1
 80003ee:	f103 38ff 	add.w	r8, r3, #4294967295
 80003f2:	d202      	bcs.n	80003fa <__udivmoddi4+0x12a>
 80003f4:	4288      	cmp	r0, r1
 80003f6:	f200 80cb 	bhi.w	8000590 <__udivmoddi4+0x2c0>
 80003fa:	4643      	mov	r3, r8
 80003fc:	1a09      	subs	r1, r1, r0
 80003fe:	b2a4      	uxth	r4, r4
 8000400:	fbb1 f0f7 	udiv	r0, r1, r7
 8000404:	fb07 1110 	mls	r1, r7, r0, r1
 8000408:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800040c:	fb0e fe00 	mul.w	lr, lr, r0
 8000410:	45a6      	cmp	lr, r4
 8000412:	d908      	bls.n	8000426 <__udivmoddi4+0x156>
 8000414:	eb1c 0404 	adds.w	r4, ip, r4
 8000418:	f100 31ff 	add.w	r1, r0, #4294967295
 800041c:	d202      	bcs.n	8000424 <__udivmoddi4+0x154>
 800041e:	45a6      	cmp	lr, r4
 8000420:	f200 80bb 	bhi.w	800059a <__udivmoddi4+0x2ca>
 8000424:	4608      	mov	r0, r1
 8000426:	eba4 040e 	sub.w	r4, r4, lr
 800042a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800042e:	e79c      	b.n	800036a <__udivmoddi4+0x9a>
 8000430:	f1c6 0720 	rsb	r7, r6, #32
 8000434:	40b3      	lsls	r3, r6
 8000436:	fa22 fc07 	lsr.w	ip, r2, r7
 800043a:	ea4c 0c03 	orr.w	ip, ip, r3
 800043e:	fa20 f407 	lsr.w	r4, r0, r7
 8000442:	fa01 f306 	lsl.w	r3, r1, r6
 8000446:	431c      	orrs	r4, r3
 8000448:	40f9      	lsrs	r1, r7
 800044a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800044e:	fa00 f306 	lsl.w	r3, r0, r6
 8000452:	fbb1 f8f9 	udiv	r8, r1, r9
 8000456:	0c20      	lsrs	r0, r4, #16
 8000458:	fa1f fe8c 	uxth.w	lr, ip
 800045c:	fb09 1118 	mls	r1, r9, r8, r1
 8000460:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000464:	fb08 f00e 	mul.w	r0, r8, lr
 8000468:	4288      	cmp	r0, r1
 800046a:	fa02 f206 	lsl.w	r2, r2, r6
 800046e:	d90b      	bls.n	8000488 <__udivmoddi4+0x1b8>
 8000470:	eb1c 0101 	adds.w	r1, ip, r1
 8000474:	f108 3aff 	add.w	sl, r8, #4294967295
 8000478:	f080 8088 	bcs.w	800058c <__udivmoddi4+0x2bc>
 800047c:	4288      	cmp	r0, r1
 800047e:	f240 8085 	bls.w	800058c <__udivmoddi4+0x2bc>
 8000482:	f1a8 0802 	sub.w	r8, r8, #2
 8000486:	4461      	add	r1, ip
 8000488:	1a09      	subs	r1, r1, r0
 800048a:	b2a4      	uxth	r4, r4
 800048c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000490:	fb09 1110 	mls	r1, r9, r0, r1
 8000494:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000498:	fb00 fe0e 	mul.w	lr, r0, lr
 800049c:	458e      	cmp	lr, r1
 800049e:	d908      	bls.n	80004b2 <__udivmoddi4+0x1e2>
 80004a0:	eb1c 0101 	adds.w	r1, ip, r1
 80004a4:	f100 34ff 	add.w	r4, r0, #4294967295
 80004a8:	d26c      	bcs.n	8000584 <__udivmoddi4+0x2b4>
 80004aa:	458e      	cmp	lr, r1
 80004ac:	d96a      	bls.n	8000584 <__udivmoddi4+0x2b4>
 80004ae:	3802      	subs	r0, #2
 80004b0:	4461      	add	r1, ip
 80004b2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80004b6:	fba0 9402 	umull	r9, r4, r0, r2
 80004ba:	eba1 010e 	sub.w	r1, r1, lr
 80004be:	42a1      	cmp	r1, r4
 80004c0:	46c8      	mov	r8, r9
 80004c2:	46a6      	mov	lr, r4
 80004c4:	d356      	bcc.n	8000574 <__udivmoddi4+0x2a4>
 80004c6:	d053      	beq.n	8000570 <__udivmoddi4+0x2a0>
 80004c8:	b15d      	cbz	r5, 80004e2 <__udivmoddi4+0x212>
 80004ca:	ebb3 0208 	subs.w	r2, r3, r8
 80004ce:	eb61 010e 	sbc.w	r1, r1, lr
 80004d2:	fa01 f707 	lsl.w	r7, r1, r7
 80004d6:	fa22 f306 	lsr.w	r3, r2, r6
 80004da:	40f1      	lsrs	r1, r6
 80004dc:	431f      	orrs	r7, r3
 80004de:	e9c5 7100 	strd	r7, r1, [r5]
 80004e2:	2600      	movs	r6, #0
 80004e4:	4631      	mov	r1, r6
 80004e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004ea:	f1c2 0320 	rsb	r3, r2, #32
 80004ee:	40d8      	lsrs	r0, r3
 80004f0:	fa0c fc02 	lsl.w	ip, ip, r2
 80004f4:	fa21 f303 	lsr.w	r3, r1, r3
 80004f8:	4091      	lsls	r1, r2
 80004fa:	4301      	orrs	r1, r0
 80004fc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000500:	fa1f fe8c 	uxth.w	lr, ip
 8000504:	fbb3 f0f7 	udiv	r0, r3, r7
 8000508:	fb07 3610 	mls	r6, r7, r0, r3
 800050c:	0c0b      	lsrs	r3, r1, #16
 800050e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000512:	fb00 f60e 	mul.w	r6, r0, lr
 8000516:	429e      	cmp	r6, r3
 8000518:	fa04 f402 	lsl.w	r4, r4, r2
 800051c:	d908      	bls.n	8000530 <__udivmoddi4+0x260>
 800051e:	eb1c 0303 	adds.w	r3, ip, r3
 8000522:	f100 38ff 	add.w	r8, r0, #4294967295
 8000526:	d22f      	bcs.n	8000588 <__udivmoddi4+0x2b8>
 8000528:	429e      	cmp	r6, r3
 800052a:	d92d      	bls.n	8000588 <__udivmoddi4+0x2b8>
 800052c:	3802      	subs	r0, #2
 800052e:	4463      	add	r3, ip
 8000530:	1b9b      	subs	r3, r3, r6
 8000532:	b289      	uxth	r1, r1
 8000534:	fbb3 f6f7 	udiv	r6, r3, r7
 8000538:	fb07 3316 	mls	r3, r7, r6, r3
 800053c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000540:	fb06 f30e 	mul.w	r3, r6, lr
 8000544:	428b      	cmp	r3, r1
 8000546:	d908      	bls.n	800055a <__udivmoddi4+0x28a>
 8000548:	eb1c 0101 	adds.w	r1, ip, r1
 800054c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000550:	d216      	bcs.n	8000580 <__udivmoddi4+0x2b0>
 8000552:	428b      	cmp	r3, r1
 8000554:	d914      	bls.n	8000580 <__udivmoddi4+0x2b0>
 8000556:	3e02      	subs	r6, #2
 8000558:	4461      	add	r1, ip
 800055a:	1ac9      	subs	r1, r1, r3
 800055c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000560:	e738      	b.n	80003d4 <__udivmoddi4+0x104>
 8000562:	462e      	mov	r6, r5
 8000564:	4628      	mov	r0, r5
 8000566:	e705      	b.n	8000374 <__udivmoddi4+0xa4>
 8000568:	4606      	mov	r6, r0
 800056a:	e6e3      	b.n	8000334 <__udivmoddi4+0x64>
 800056c:	4618      	mov	r0, r3
 800056e:	e6f8      	b.n	8000362 <__udivmoddi4+0x92>
 8000570:	454b      	cmp	r3, r9
 8000572:	d2a9      	bcs.n	80004c8 <__udivmoddi4+0x1f8>
 8000574:	ebb9 0802 	subs.w	r8, r9, r2
 8000578:	eb64 0e0c 	sbc.w	lr, r4, ip
 800057c:	3801      	subs	r0, #1
 800057e:	e7a3      	b.n	80004c8 <__udivmoddi4+0x1f8>
 8000580:	4646      	mov	r6, r8
 8000582:	e7ea      	b.n	800055a <__udivmoddi4+0x28a>
 8000584:	4620      	mov	r0, r4
 8000586:	e794      	b.n	80004b2 <__udivmoddi4+0x1e2>
 8000588:	4640      	mov	r0, r8
 800058a:	e7d1      	b.n	8000530 <__udivmoddi4+0x260>
 800058c:	46d0      	mov	r8, sl
 800058e:	e77b      	b.n	8000488 <__udivmoddi4+0x1b8>
 8000590:	3b02      	subs	r3, #2
 8000592:	4461      	add	r1, ip
 8000594:	e732      	b.n	80003fc <__udivmoddi4+0x12c>
 8000596:	4630      	mov	r0, r6
 8000598:	e709      	b.n	80003ae <__udivmoddi4+0xde>
 800059a:	4464      	add	r4, ip
 800059c:	3802      	subs	r0, #2
 800059e:	e742      	b.n	8000426 <__udivmoddi4+0x156>

080005a0 <__aeabi_idiv0>:
 80005a0:	4770      	bx	lr
 80005a2:	bf00      	nop

080005a4 <sizeofuser>:
userDetails user[maxnumberofusers];

int usernumber = 0;

int sizeofuser (userDetails *user)
{
 80005a4:	b480      	push	{r7}
 80005a6:	b085      	sub	sp, #20
 80005a8:	af00      	add	r7, sp, #0
 80005aa:	6078      	str	r0, [r7, #4]
	int size=0;
 80005ac:	2300      	movs	r3, #0
 80005ae:	60fb      	str	r3, [r7, #12]
	while (user[size].firstname[0] != '\0') size++;
 80005b0:	e002      	b.n	80005b8 <sizeofuser+0x14>
 80005b2:	68fb      	ldr	r3, [r7, #12]
 80005b4:	3301      	adds	r3, #1
 80005b6:	60fb      	str	r3, [r7, #12]
 80005b8:	68fa      	ldr	r2, [r7, #12]
 80005ba:	4613      	mov	r3, r2
 80005bc:	015b      	lsls	r3, r3, #5
 80005be:	4413      	add	r3, r2
 80005c0:	687a      	ldr	r2, [r7, #4]
 80005c2:	4413      	add	r3, r2
 80005c4:	781b      	ldrb	r3, [r3, #0]
 80005c6:	2b00      	cmp	r3, #0
 80005c8:	d1f3      	bne.n	80005b2 <sizeofuser+0xe>
	return size+1;
 80005ca:	68fb      	ldr	r3, [r7, #12]
 80005cc:	3301      	adds	r3, #1
}
 80005ce:	4618      	mov	r0, r3
 80005d0:	3714      	adds	r7, #20
 80005d2:	46bd      	mov	sp, r7
 80005d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005d8:	4770      	bx	lr
	...

080005dc <ESP_Init>:


/*****************************************************************************************************************************************/

void ESP_Init (char *SSID, char *PASSWD, char *STAIP)
{
 80005dc:	b580      	push	{r7, lr}
 80005de:	b098      	sub	sp, #96	; 0x60
 80005e0:	af00      	add	r7, sp, #0
 80005e2:	60f8      	str	r0, [r7, #12]
 80005e4:	60b9      	str	r1, [r7, #8]
 80005e6:	607a      	str	r2, [r7, #4]
	char data[80];

	Ringbuf_init();
 80005e8:	f000 fa86 	bl	8000af8 <Ringbuf_init>

	Uart_sendstring("AT+RST\r\n");
 80005ec:	4832      	ldr	r0, [pc, #200]	; (80006b8 <ESP_Init+0xdc>)
 80005ee:	f000 fb91 	bl	8000d14 <Uart_sendstring>
	HAL_Delay(2000);
 80005f2:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80005f6:	f001 f90f 	bl	8001818 <HAL_Delay>

	/********* AT **********/
	Uart_flush();
 80005fa:	f000 fc41 	bl	8000e80 <Uart_flush>
	Uart_sendstring("AT\r\n");
 80005fe:	482f      	ldr	r0, [pc, #188]	; (80006bc <ESP_Init+0xe0>)
 8000600:	f000 fb88 	bl	8000d14 <Uart_sendstring>
	while(!(Wait_for("OK\r\n")));
 8000604:	bf00      	nop
 8000606:	482e      	ldr	r0, [pc, #184]	; (80006c0 <ESP_Init+0xe4>)
 8000608:	f000 fd06 	bl	8001018 <Wait_for>
 800060c:	4603      	mov	r3, r0
 800060e:	2b00      	cmp	r3, #0
 8000610:	d0f9      	beq.n	8000606 <ESP_Init+0x2a>


	/********* AT+CWMODE=1 **********/
	Uart_flush();
 8000612:	f000 fc35 	bl	8000e80 <Uart_flush>
	Uart_sendstring("AT+CWMODE=1\r\n");
 8000616:	482b      	ldr	r0, [pc, #172]	; (80006c4 <ESP_Init+0xe8>)
 8000618:	f000 fb7c 	bl	8000d14 <Uart_sendstring>
	while (!(Wait_for("OK\r\n")));
 800061c:	bf00      	nop
 800061e:	4828      	ldr	r0, [pc, #160]	; (80006c0 <ESP_Init+0xe4>)
 8000620:	f000 fcfa 	bl	8001018 <Wait_for>
 8000624:	4603      	mov	r3, r0
 8000626:	2b00      	cmp	r3, #0
 8000628:	d0f9      	beq.n	800061e <ESP_Init+0x42>

	/* Set Static IP Address */
	/********* AT+CWSTAIP=IPADDRESS **********/
	Uart_flush();
 800062a:	f000 fc29 	bl	8000e80 <Uart_flush>
	sprintf (data, "AT+CIPSTA=\"%s\"\r\n", STAIP);
 800062e:	f107 0310 	add.w	r3, r7, #16
 8000632:	687a      	ldr	r2, [r7, #4]
 8000634:	4924      	ldr	r1, [pc, #144]	; (80006c8 <ESP_Init+0xec>)
 8000636:	4618      	mov	r0, r3
 8000638:	f004 f940 	bl	80048bc <siprintf>
	Uart_sendstring(data);
 800063c:	f107 0310 	add.w	r3, r7, #16
 8000640:	4618      	mov	r0, r3
 8000642:	f000 fb67 	bl	8000d14 <Uart_sendstring>
	while (!(Wait_for("OK\r\n")));
 8000646:	bf00      	nop
 8000648:	481d      	ldr	r0, [pc, #116]	; (80006c0 <ESP_Init+0xe4>)
 800064a:	f000 fce5 	bl	8001018 <Wait_for>
 800064e:	4603      	mov	r3, r0
 8000650:	2b00      	cmp	r3, #0
 8000652:	d0f9      	beq.n	8000648 <ESP_Init+0x6c>

	/********* AT+CWJAP="SSID","PASSWD" **********/
	Uart_flush();
 8000654:	f000 fc14 	bl	8000e80 <Uart_flush>
	sprintf (data, "AT+CWJAP=\"%s\",\"%s\"\r\n", SSID, PASSWD);
 8000658:	f107 0010 	add.w	r0, r7, #16
 800065c:	68bb      	ldr	r3, [r7, #8]
 800065e:	68fa      	ldr	r2, [r7, #12]
 8000660:	491a      	ldr	r1, [pc, #104]	; (80006cc <ESP_Init+0xf0>)
 8000662:	f004 f92b 	bl	80048bc <siprintf>
	Uart_sendstring(data);
 8000666:	f107 0310 	add.w	r3, r7, #16
 800066a:	4618      	mov	r0, r3
 800066c:	f000 fb52 	bl	8000d14 <Uart_sendstring>
	while (!(Wait_for("OK\r\n")));
 8000670:	bf00      	nop
 8000672:	4813      	ldr	r0, [pc, #76]	; (80006c0 <ESP_Init+0xe4>)
 8000674:	f000 fcd0 	bl	8001018 <Wait_for>
 8000678:	4603      	mov	r3, r0
 800067a:	2b00      	cmp	r3, #0
 800067c:	d0f9      	beq.n	8000672 <ESP_Init+0x96>

	/********* AT+CIPMUX **********/
	Uart_flush();
 800067e:	f000 fbff 	bl	8000e80 <Uart_flush>
	Uart_sendstring("AT+CIPMUX=1\r\n");
 8000682:	4813      	ldr	r0, [pc, #76]	; (80006d0 <ESP_Init+0xf4>)
 8000684:	f000 fb46 	bl	8000d14 <Uart_sendstring>
	while (!(Wait_for("OK\r\n")));
 8000688:	bf00      	nop
 800068a:	480d      	ldr	r0, [pc, #52]	; (80006c0 <ESP_Init+0xe4>)
 800068c:	f000 fcc4 	bl	8001018 <Wait_for>
 8000690:	4603      	mov	r3, r0
 8000692:	2b00      	cmp	r3, #0
 8000694:	d0f9      	beq.n	800068a <ESP_Init+0xae>

	/********* AT+CIPSERVER **********/
	Uart_flush();
 8000696:	f000 fbf3 	bl	8000e80 <Uart_flush>
	Uart_sendstring("AT+CIPSERVER=1,80\r\n");
 800069a:	480e      	ldr	r0, [pc, #56]	; (80006d4 <ESP_Init+0xf8>)
 800069c:	f000 fb3a 	bl	8000d14 <Uart_sendstring>
	while (!(Wait_for("OK\r\n")));
 80006a0:	bf00      	nop
 80006a2:	4807      	ldr	r0, [pc, #28]	; (80006c0 <ESP_Init+0xe4>)
 80006a4:	f000 fcb8 	bl	8001018 <Wait_for>
 80006a8:	4603      	mov	r3, r0
 80006aa:	2b00      	cmp	r3, #0
 80006ac:	d0f9      	beq.n	80006a2 <ESP_Init+0xc6>

}
 80006ae:	bf00      	nop
 80006b0:	bf00      	nop
 80006b2:	3760      	adds	r7, #96	; 0x60
 80006b4:	46bd      	mov	sp, r7
 80006b6:	bd80      	pop	{r7, pc}
 80006b8:	08005778 	.word	0x08005778
 80006bc:	08005784 	.word	0x08005784
 80006c0:	0800578c 	.word	0x0800578c
 80006c4:	08005794 	.word	0x08005794
 80006c8:	080057a4 	.word	0x080057a4
 80006cc:	080057b8 	.word	0x080057b8
 80006d0:	080057d0 	.word	0x080057d0
 80006d4:	080057e0 	.word	0x080057e0

080006d8 <Server_Send>:




int Server_Send (char *str, int Link_ID)
{
 80006d8:	b580      	push	{r7, lr}
 80006da:	b098      	sub	sp, #96	; 0x60
 80006dc:	af00      	add	r7, sp, #0
 80006de:	6078      	str	r0, [r7, #4]
 80006e0:	6039      	str	r1, [r7, #0]
	int len = strlen (str);
 80006e2:	6878      	ldr	r0, [r7, #4]
 80006e4:	f7ff fd7e 	bl	80001e4 <strlen>
 80006e8:	4603      	mov	r3, r0
 80006ea:	65fb      	str	r3, [r7, #92]	; 0x5c
	char data[80];
	Uart_flush();
 80006ec:	f000 fbc8 	bl	8000e80 <Uart_flush>
	sprintf (data, "AT+CIPSEND=%d,%d\r\n", Link_ID, len);
 80006f0:	f107 000c 	add.w	r0, r7, #12
 80006f4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80006f6:	683a      	ldr	r2, [r7, #0]
 80006f8:	4919      	ldr	r1, [pc, #100]	; (8000760 <Server_Send+0x88>)
 80006fa:	f004 f8df 	bl	80048bc <siprintf>
	Uart_sendstring(data);
 80006fe:	f107 030c 	add.w	r3, r7, #12
 8000702:	4618      	mov	r0, r3
 8000704:	f000 fb06 	bl	8000d14 <Uart_sendstring>
	while (!(Wait_for(">")));
 8000708:	bf00      	nop
 800070a:	4816      	ldr	r0, [pc, #88]	; (8000764 <Server_Send+0x8c>)
 800070c:	f000 fc84 	bl	8001018 <Wait_for>
 8000710:	4603      	mov	r3, r0
 8000712:	2b00      	cmp	r3, #0
 8000714:	d0f9      	beq.n	800070a <Server_Send+0x32>
	Uart_sendstring (str);
 8000716:	6878      	ldr	r0, [r7, #4]
 8000718:	f000 fafc 	bl	8000d14 <Uart_sendstring>
	while (!(Wait_for("SEND OK")));
 800071c:	bf00      	nop
 800071e:	4812      	ldr	r0, [pc, #72]	; (8000768 <Server_Send+0x90>)
 8000720:	f000 fc7a 	bl	8001018 <Wait_for>
 8000724:	4603      	mov	r3, r0
 8000726:	2b00      	cmp	r3, #0
 8000728:	d0f9      	beq.n	800071e <Server_Send+0x46>
	Uart_flush();
 800072a:	f000 fba9 	bl	8000e80 <Uart_flush>
	sprintf (data, "AT+CIPCLOSE=%d\r\n",Link_ID);
 800072e:	f107 030c 	add.w	r3, r7, #12
 8000732:	683a      	ldr	r2, [r7, #0]
 8000734:	490d      	ldr	r1, [pc, #52]	; (800076c <Server_Send+0x94>)
 8000736:	4618      	mov	r0, r3
 8000738:	f004 f8c0 	bl	80048bc <siprintf>
	Uart_sendstring(data);
 800073c:	f107 030c 	add.w	r3, r7, #12
 8000740:	4618      	mov	r0, r3
 8000742:	f000 fae7 	bl	8000d14 <Uart_sendstring>
	while (!(Wait_for("OK\r\n")));
 8000746:	bf00      	nop
 8000748:	4809      	ldr	r0, [pc, #36]	; (8000770 <Server_Send+0x98>)
 800074a:	f000 fc65 	bl	8001018 <Wait_for>
 800074e:	4603      	mov	r3, r0
 8000750:	2b00      	cmp	r3, #0
 8000752:	d0f9      	beq.n	8000748 <Server_Send+0x70>
	return 1;
 8000754:	2301      	movs	r3, #1
}
 8000756:	4618      	mov	r0, r3
 8000758:	3760      	adds	r7, #96	; 0x60
 800075a:	46bd      	mov	sp, r7
 800075c:	bd80      	pop	{r7, pc}
 800075e:	bf00      	nop
 8000760:	080057f4 	.word	0x080057f4
 8000764:	08005808 	.word	0x08005808
 8000768:	0800580c 	.word	0x0800580c
 800076c:	08005814 	.word	0x08005814
 8000770:	0800578c 	.word	0x0800578c

08000774 <Server_Handle>:

void Server_Handle (char *str, int Link_ID)
{
 8000774:	b590      	push	{r4, r7, lr}
 8000776:	f5ad 5dc0 	sub.w	sp, sp, #6144	; 0x1800
 800077a:	b087      	sub	sp, #28
 800077c:	af02      	add	r7, sp, #8
 800077e:	f507 6301 	add.w	r3, r7, #2064	; 0x810
 8000782:	f6a3 030c 	subw	r3, r3, #2060	; 0x80c
 8000786:	6018      	str	r0, [r3, #0]
 8000788:	f507 6301 	add.w	r3, r7, #2064	; 0x810
 800078c:	f5a3 6301 	sub.w	r3, r3, #2064	; 0x810
 8000790:	6019      	str	r1, [r3, #0]
	char datatosend[4096] = {0};
 8000792:	f507 6301 	add.w	r3, r7, #2064	; 0x810
 8000796:	2200      	movs	r2, #0
 8000798:	f843 2c08 	str.w	r2, [r3, #-8]
 800079c:	3b04      	subs	r3, #4
 800079e:	f640 72fc 	movw	r2, #4092	; 0xffc
 80007a2:	2100      	movs	r1, #0
 80007a4:	4618      	mov	r0, r3
 80007a6:	f004 f881 	bl	80048ac <memset>
	if (!(strcmp (str, "/page1")))
 80007aa:	f507 6301 	add.w	r3, r7, #2064	; 0x810
 80007ae:	f6a3 030c 	subw	r3, r3, #2060	; 0x80c
 80007b2:	496c      	ldr	r1, [pc, #432]	; (8000964 <Server_Handle+0x1f0>)
 80007b4:	6818      	ldr	r0, [r3, #0]
 80007b6:	f7ff fd0b 	bl	80001d0 <strcmp>
 80007ba:	4603      	mov	r3, r0
 80007bc:	2b00      	cmp	r3, #0
 80007be:	d114      	bne.n	80007ea <Server_Handle+0x76>
	{
		sprintf(datatosend, page1);
 80007c0:	4b69      	ldr	r3, [pc, #420]	; (8000968 <Server_Handle+0x1f4>)
 80007c2:	681a      	ldr	r2, [r3, #0]
 80007c4:	f507 6301 	add.w	r3, r7, #2064	; 0x810
 80007c8:	3b08      	subs	r3, #8
 80007ca:	4611      	mov	r1, r2
 80007cc:	4618      	mov	r0, r3
 80007ce:	f004 f875 	bl	80048bc <siprintf>
		Server_Send(datatosend, Link_ID);
 80007d2:	f507 6301 	add.w	r3, r7, #2064	; 0x810
 80007d6:	f5a3 6201 	sub.w	r2, r3, #2064	; 0x810
 80007da:	f507 6301 	add.w	r3, r7, #2064	; 0x810
 80007de:	3b08      	subs	r3, #8
 80007e0:	6811      	ldr	r1, [r2, #0]
 80007e2:	4618      	mov	r0, r3
 80007e4:	f7ff ff78 	bl	80006d8 <Server_Send>
	{
		sprintf (datatosend, home);
		Server_Send(datatosend, Link_ID);
	}

}
 80007e8:	e0b5      	b.n	8000956 <Server_Handle+0x1e2>
	else if (!(strcmp (str, "/page2")))
 80007ea:	f507 6301 	add.w	r3, r7, #2064	; 0x810
 80007ee:	f6a3 030c 	subw	r3, r3, #2060	; 0x80c
 80007f2:	495e      	ldr	r1, [pc, #376]	; (800096c <Server_Handle+0x1f8>)
 80007f4:	6818      	ldr	r0, [r3, #0]
 80007f6:	f7ff fceb 	bl	80001d0 <strcmp>
 80007fa:	4603      	mov	r3, r0
 80007fc:	2b00      	cmp	r3, #0
 80007fe:	f040 8096 	bne.w	800092e <Server_Handle+0x1ba>
		sprintf(datatosend, page2_Top);
 8000802:	4b5b      	ldr	r3, [pc, #364]	; (8000970 <Server_Handle+0x1fc>)
 8000804:	681a      	ldr	r2, [r3, #0]
 8000806:	f507 6301 	add.w	r3, r7, #2064	; 0x810
 800080a:	3b08      	subs	r3, #8
 800080c:	4611      	mov	r1, r2
 800080e:	4618      	mov	r0, r3
 8000810:	f004 f854 	bl	80048bc <siprintf>
		strcat (datatosend, table);
 8000814:	4b57      	ldr	r3, [pc, #348]	; (8000974 <Server_Handle+0x200>)
 8000816:	681a      	ldr	r2, [r3, #0]
 8000818:	f507 6301 	add.w	r3, r7, #2064	; 0x810
 800081c:	3b08      	subs	r3, #8
 800081e:	4611      	mov	r1, r2
 8000820:	4618      	mov	r0, r3
 8000822:	f004 f86b 	bl	80048fc <strcat>
		int bufsize = (sizeofuser (user));
 8000826:	4854      	ldr	r0, [pc, #336]	; (8000978 <Server_Handle+0x204>)
 8000828:	f7ff febc 	bl	80005a4 <sizeofuser>
 800082c:	f507 53c0 	add.w	r3, r7, #6144	; 0x1800
 8000830:	f103 0308 	add.w	r3, r3, #8
 8000834:	6018      	str	r0, [r3, #0]
		for (int i=0; i<bufsize; i++)
 8000836:	2300      	movs	r3, #0
 8000838:	f507 52c0 	add.w	r2, r7, #6144	; 0x1800
 800083c:	f102 020c 	add.w	r2, r2, #12
 8000840:	6013      	str	r3, [r2, #0]
 8000842:	e03f      	b.n	80008c4 <Server_Handle+0x150>
			sprintf (localbuf, "<tr><td>%s %s</td>	<td>%s</td></tr>",user[i].firstname,user[i].lastname,user[i].age);
 8000844:	f507 53c0 	add.w	r3, r7, #6144	; 0x1800
 8000848:	f103 030c 	add.w	r3, r3, #12
 800084c:	681a      	ldr	r2, [r3, #0]
 800084e:	4613      	mov	r3, r2
 8000850:	015b      	lsls	r3, r3, #5
 8000852:	4413      	add	r3, r2
 8000854:	4a48      	ldr	r2, [pc, #288]	; (8000978 <Server_Handle+0x204>)
 8000856:	1899      	adds	r1, r3, r2
 8000858:	f507 53c0 	add.w	r3, r7, #6144	; 0x1800
 800085c:	f103 030c 	add.w	r3, r3, #12
 8000860:	681a      	ldr	r2, [r3, #0]
 8000862:	4613      	mov	r3, r2
 8000864:	015b      	lsls	r3, r3, #5
 8000866:	4413      	add	r3, r2
 8000868:	3308      	adds	r3, #8
 800086a:	4a43      	ldr	r2, [pc, #268]	; (8000978 <Server_Handle+0x204>)
 800086c:	4413      	add	r3, r2
 800086e:	1ddc      	adds	r4, r3, #7
 8000870:	f507 53c0 	add.w	r3, r7, #6144	; 0x1800
 8000874:	f103 030c 	add.w	r3, r3, #12
 8000878:	681a      	ldr	r2, [r3, #0]
 800087a:	4613      	mov	r3, r2
 800087c:	015b      	lsls	r3, r3, #5
 800087e:	4413      	add	r3, r2
 8000880:	3318      	adds	r3, #24
 8000882:	4a3d      	ldr	r2, [pc, #244]	; (8000978 <Server_Handle+0x204>)
 8000884:	4413      	add	r3, r2
 8000886:	3306      	adds	r3, #6
 8000888:	f107 0010 	add.w	r0, r7, #16
 800088c:	3808      	subs	r0, #8
 800088e:	9300      	str	r3, [sp, #0]
 8000890:	4623      	mov	r3, r4
 8000892:	460a      	mov	r2, r1
 8000894:	4939      	ldr	r1, [pc, #228]	; (800097c <Server_Handle+0x208>)
 8000896:	f004 f811 	bl	80048bc <siprintf>
			strcat (datatosend, localbuf);
 800089a:	f107 0210 	add.w	r2, r7, #16
 800089e:	3a08      	subs	r2, #8
 80008a0:	f507 6301 	add.w	r3, r7, #2064	; 0x810
 80008a4:	3b08      	subs	r3, #8
 80008a6:	4611      	mov	r1, r2
 80008a8:	4618      	mov	r0, r3
 80008aa:	f004 f827 	bl	80048fc <strcat>
		for (int i=0; i<bufsize; i++)
 80008ae:	f507 53c0 	add.w	r3, r7, #6144	; 0x1800
 80008b2:	f103 030c 	add.w	r3, r3, #12
 80008b6:	681b      	ldr	r3, [r3, #0]
 80008b8:	3301      	adds	r3, #1
 80008ba:	f507 52c0 	add.w	r2, r7, #6144	; 0x1800
 80008be:	f102 020c 	add.w	r2, r2, #12
 80008c2:	6013      	str	r3, [r2, #0]
 80008c4:	f507 53c0 	add.w	r3, r7, #6144	; 0x1800
 80008c8:	f103 030c 	add.w	r3, r3, #12
 80008cc:	681a      	ldr	r2, [r3, #0]
 80008ce:	f507 53c0 	add.w	r3, r7, #6144	; 0x1800
 80008d2:	f103 0308 	add.w	r3, r3, #8
 80008d6:	681b      	ldr	r3, [r3, #0]
 80008d8:	429a      	cmp	r2, r3
 80008da:	dbb3      	blt.n	8000844 <Server_Handle+0xd0>
		strcat (datatosend, "</table>");
 80008dc:	f507 6301 	add.w	r3, r7, #2064	; 0x810
 80008e0:	3b08      	subs	r3, #8
 80008e2:	4618      	mov	r0, r3
 80008e4:	f7ff fc7e 	bl	80001e4 <strlen>
 80008e8:	4603      	mov	r3, r0
 80008ea:	461a      	mov	r2, r3
 80008ec:	f507 6301 	add.w	r3, r7, #2064	; 0x810
 80008f0:	3b08      	subs	r3, #8
 80008f2:	4413      	add	r3, r2
 80008f4:	4922      	ldr	r1, [pc, #136]	; (8000980 <Server_Handle+0x20c>)
 80008f6:	461a      	mov	r2, r3
 80008f8:	460b      	mov	r3, r1
 80008fa:	cb03      	ldmia	r3!, {r0, r1}
 80008fc:	6010      	str	r0, [r2, #0]
 80008fe:	6051      	str	r1, [r2, #4]
 8000900:	781b      	ldrb	r3, [r3, #0]
 8000902:	7213      	strb	r3, [r2, #8]
		strcat(datatosend, page2_end);
 8000904:	4b1f      	ldr	r3, [pc, #124]	; (8000984 <Server_Handle+0x210>)
 8000906:	681a      	ldr	r2, [r3, #0]
 8000908:	f507 6301 	add.w	r3, r7, #2064	; 0x810
 800090c:	3b08      	subs	r3, #8
 800090e:	4611      	mov	r1, r2
 8000910:	4618      	mov	r0, r3
 8000912:	f003 fff3 	bl	80048fc <strcat>
		Server_Send(datatosend, Link_ID);
 8000916:	f507 6301 	add.w	r3, r7, #2064	; 0x810
 800091a:	f5a3 6201 	sub.w	r2, r3, #2064	; 0x810
 800091e:	f507 6301 	add.w	r3, r7, #2064	; 0x810
 8000922:	3b08      	subs	r3, #8
 8000924:	6811      	ldr	r1, [r2, #0]
 8000926:	4618      	mov	r0, r3
 8000928:	f7ff fed6 	bl	80006d8 <Server_Send>
}
 800092c:	e013      	b.n	8000956 <Server_Handle+0x1e2>
		sprintf (datatosend, home);
 800092e:	4b16      	ldr	r3, [pc, #88]	; (8000988 <Server_Handle+0x214>)
 8000930:	681a      	ldr	r2, [r3, #0]
 8000932:	f507 6301 	add.w	r3, r7, #2064	; 0x810
 8000936:	3b08      	subs	r3, #8
 8000938:	4611      	mov	r1, r2
 800093a:	4618      	mov	r0, r3
 800093c:	f003 ffbe 	bl	80048bc <siprintf>
		Server_Send(datatosend, Link_ID);
 8000940:	f507 6301 	add.w	r3, r7, #2064	; 0x810
 8000944:	f5a3 6201 	sub.w	r2, r3, #2064	; 0x810
 8000948:	f507 6301 	add.w	r3, r7, #2064	; 0x810
 800094c:	3b08      	subs	r3, #8
 800094e:	6811      	ldr	r1, [r2, #0]
 8000950:	4618      	mov	r0, r3
 8000952:	f7ff fec1 	bl	80006d8 <Server_Send>
}
 8000956:	bf00      	nop
 8000958:	f507 57c0 	add.w	r7, r7, #6144	; 0x1800
 800095c:	3714      	adds	r7, #20
 800095e:	46bd      	mov	sp, r7
 8000960:	bd90      	pop	{r4, r7, pc}
 8000962:	bf00      	nop
 8000964:	08005828 	.word	0x08005828
 8000968:	20000004 	.word	0x20000004
 800096c:	08005830 	.word	0x08005830
 8000970:	20000008 	.word	0x20000008
 8000974:	20000010 	.word	0x20000010
 8000978:	200000a0 	.word	0x200000a0
 800097c:	08005838 	.word	0x08005838
 8000980:	0800585c 	.word	0x0800585c
 8000984:	2000000c 	.word	0x2000000c
 8000988:	20000000 	.word	0x20000000

0800098c <Server_Start>:

void Server_Start (void)
{
 800098c:	b580      	push	{r7, lr}
 800098e:	b0a2      	sub	sp, #136	; 0x88
 8000990:	af00      	add	r7, sp, #0
	char buftostoreheader[128] = {0};
 8000992:	2300      	movs	r3, #0
 8000994:	60bb      	str	r3, [r7, #8]
 8000996:	f107 030c 	add.w	r3, r7, #12
 800099a:	227c      	movs	r2, #124	; 0x7c
 800099c:	2100      	movs	r1, #0
 800099e:	4618      	mov	r0, r3
 80009a0:	f003 ff84 	bl	80048ac <memset>
	char Link_ID;
	while (!(Get_after("+IPD,", 1, &Link_ID)));
 80009a4:	bf00      	nop
 80009a6:	1dfb      	adds	r3, r7, #7
 80009a8:	461a      	mov	r2, r3
 80009aa:	2101      	movs	r1, #1
 80009ac:	4844      	ldr	r0, [pc, #272]	; (8000ac0 <Server_Start+0x134>)
 80009ae:	f000 fb07 	bl	8000fc0 <Get_after>
 80009b2:	4603      	mov	r3, r0
 80009b4:	2b00      	cmp	r3, #0
 80009b6:	d0f6      	beq.n	80009a6 <Server_Start+0x1a>

	Link_ID -= 48;
 80009b8:	79fb      	ldrb	r3, [r7, #7]
 80009ba:	3b30      	subs	r3, #48	; 0x30
 80009bc:	b2db      	uxtb	r3, r3
 80009be:	71fb      	strb	r3, [r7, #7]
	while (!(Copy_upto(" HTTP/1.1", buftostoreheader)));
 80009c0:	bf00      	nop
 80009c2:	f107 0308 	add.w	r3, r7, #8
 80009c6:	4619      	mov	r1, r3
 80009c8:	483e      	ldr	r0, [pc, #248]	; (8000ac4 <Server_Start+0x138>)
 80009ca:	f000 fa85 	bl	8000ed8 <Copy_upto>
 80009ce:	4603      	mov	r3, r0
 80009d0:	2b00      	cmp	r3, #0
 80009d2:	d0f6      	beq.n	80009c2 <Server_Start+0x36>
	if (Look_for("/page1", buftostoreheader) == 1)
 80009d4:	f107 0308 	add.w	r3, r7, #8
 80009d8:	4619      	mov	r1, r3
 80009da:	483b      	ldr	r0, [pc, #236]	; (8000ac8 <Server_Start+0x13c>)
 80009dc:	f000 f8d3 	bl	8000b86 <Look_for>
 80009e0:	4603      	mov	r3, r0
 80009e2:	2b01      	cmp	r3, #1
 80009e4:	d13c      	bne.n	8000a60 <Server_Start+0xd4>
	{
		GetDataFromBuffer("fname=", "&", buftostoreheader, user[usernumber].firstname);
 80009e6:	4b39      	ldr	r3, [pc, #228]	; (8000acc <Server_Start+0x140>)
 80009e8:	681a      	ldr	r2, [r3, #0]
 80009ea:	4613      	mov	r3, r2
 80009ec:	015b      	lsls	r3, r3, #5
 80009ee:	4413      	add	r3, r2
 80009f0:	4a37      	ldr	r2, [pc, #220]	; (8000ad0 <Server_Start+0x144>)
 80009f2:	4413      	add	r3, r2
 80009f4:	f107 0208 	add.w	r2, r7, #8
 80009f8:	4936      	ldr	r1, [pc, #216]	; (8000ad4 <Server_Start+0x148>)
 80009fa:	4837      	ldr	r0, [pc, #220]	; (8000ad8 <Server_Start+0x14c>)
 80009fc:	f000 f99f 	bl	8000d3e <GetDataFromBuffer>
		GetDataFromBuffer("lname=", "&", buftostoreheader, user[usernumber].lastname);
 8000a00:	4b32      	ldr	r3, [pc, #200]	; (8000acc <Server_Start+0x140>)
 8000a02:	681a      	ldr	r2, [r3, #0]
 8000a04:	4613      	mov	r3, r2
 8000a06:	015b      	lsls	r3, r3, #5
 8000a08:	4413      	add	r3, r2
 8000a0a:	3308      	adds	r3, #8
 8000a0c:	4a30      	ldr	r2, [pc, #192]	; (8000ad0 <Server_Start+0x144>)
 8000a0e:	4413      	add	r3, r2
 8000a10:	3307      	adds	r3, #7
 8000a12:	f107 0208 	add.w	r2, r7, #8
 8000a16:	492f      	ldr	r1, [pc, #188]	; (8000ad4 <Server_Start+0x148>)
 8000a18:	4830      	ldr	r0, [pc, #192]	; (8000adc <Server_Start+0x150>)
 8000a1a:	f000 f990 	bl	8000d3e <GetDataFromBuffer>
		GetDataFromBuffer("age=", " HTTP", buftostoreheader, user[usernumber].age);
 8000a1e:	4b2b      	ldr	r3, [pc, #172]	; (8000acc <Server_Start+0x140>)
 8000a20:	681a      	ldr	r2, [r3, #0]
 8000a22:	4613      	mov	r3, r2
 8000a24:	015b      	lsls	r3, r3, #5
 8000a26:	4413      	add	r3, r2
 8000a28:	3318      	adds	r3, #24
 8000a2a:	4a29      	ldr	r2, [pc, #164]	; (8000ad0 <Server_Start+0x144>)
 8000a2c:	4413      	add	r3, r2
 8000a2e:	3306      	adds	r3, #6
 8000a30:	f107 0208 	add.w	r2, r7, #8
 8000a34:	492a      	ldr	r1, [pc, #168]	; (8000ae0 <Server_Start+0x154>)
 8000a36:	482b      	ldr	r0, [pc, #172]	; (8000ae4 <Server_Start+0x158>)
 8000a38:	f000 f981 	bl	8000d3e <GetDataFromBuffer>
		usernumber++;
 8000a3c:	4b23      	ldr	r3, [pc, #140]	; (8000acc <Server_Start+0x140>)
 8000a3e:	681b      	ldr	r3, [r3, #0]
 8000a40:	3301      	adds	r3, #1
 8000a42:	4a22      	ldr	r2, [pc, #136]	; (8000acc <Server_Start+0x140>)
 8000a44:	6013      	str	r3, [r2, #0]
		if (usernumber >9) usernumber = 0;
 8000a46:	4b21      	ldr	r3, [pc, #132]	; (8000acc <Server_Start+0x140>)
 8000a48:	681b      	ldr	r3, [r3, #0]
 8000a4a:	2b09      	cmp	r3, #9
 8000a4c:	dd02      	ble.n	8000a54 <Server_Start+0xc8>
 8000a4e:	4b1f      	ldr	r3, [pc, #124]	; (8000acc <Server_Start+0x140>)
 8000a50:	2200      	movs	r2, #0
 8000a52:	601a      	str	r2, [r3, #0]
		Server_Handle("/page1",Link_ID);
 8000a54:	79fb      	ldrb	r3, [r7, #7]
 8000a56:	4619      	mov	r1, r3
 8000a58:	481b      	ldr	r0, [pc, #108]	; (8000ac8 <Server_Start+0x13c>)
 8000a5a:	f7ff fe8b 	bl	8000774 <Server_Handle>

	else
	{
		Server_Handle("/ ", Link_ID);
	}
}
 8000a5e:	e02b      	b.n	8000ab8 <Server_Start+0x12c>
	else if (Look_for("/page2", buftostoreheader) == 1)
 8000a60:	f107 0308 	add.w	r3, r7, #8
 8000a64:	4619      	mov	r1, r3
 8000a66:	4820      	ldr	r0, [pc, #128]	; (8000ae8 <Server_Start+0x15c>)
 8000a68:	f000 f88d 	bl	8000b86 <Look_for>
 8000a6c:	4603      	mov	r3, r0
 8000a6e:	2b01      	cmp	r3, #1
 8000a70:	d105      	bne.n	8000a7e <Server_Start+0xf2>
		Server_Handle("/page2",Link_ID);
 8000a72:	79fb      	ldrb	r3, [r7, #7]
 8000a74:	4619      	mov	r1, r3
 8000a76:	481c      	ldr	r0, [pc, #112]	; (8000ae8 <Server_Start+0x15c>)
 8000a78:	f7ff fe7c 	bl	8000774 <Server_Handle>
}
 8000a7c:	e01c      	b.n	8000ab8 <Server_Start+0x12c>
	else if (Look_for("/home", buftostoreheader) == 1)
 8000a7e:	f107 0308 	add.w	r3, r7, #8
 8000a82:	4619      	mov	r1, r3
 8000a84:	4819      	ldr	r0, [pc, #100]	; (8000aec <Server_Start+0x160>)
 8000a86:	f000 f87e 	bl	8000b86 <Look_for>
 8000a8a:	4603      	mov	r3, r0
 8000a8c:	2b01      	cmp	r3, #1
 8000a8e:	d105      	bne.n	8000a9c <Server_Start+0x110>
		Server_Handle("/home",Link_ID);
 8000a90:	79fb      	ldrb	r3, [r7, #7]
 8000a92:	4619      	mov	r1, r3
 8000a94:	4815      	ldr	r0, [pc, #84]	; (8000aec <Server_Start+0x160>)
 8000a96:	f7ff fe6d 	bl	8000774 <Server_Handle>
}
 8000a9a:	e00d      	b.n	8000ab8 <Server_Start+0x12c>
	else if (Look_for("/favicon.ico", buftostoreheader) == 1);
 8000a9c:	f107 0308 	add.w	r3, r7, #8
 8000aa0:	4619      	mov	r1, r3
 8000aa2:	4813      	ldr	r0, [pc, #76]	; (8000af0 <Server_Start+0x164>)
 8000aa4:	f000 f86f 	bl	8000b86 <Look_for>
 8000aa8:	4603      	mov	r3, r0
 8000aaa:	2b01      	cmp	r3, #1
 8000aac:	d004      	beq.n	8000ab8 <Server_Start+0x12c>
		Server_Handle("/ ", Link_ID);
 8000aae:	79fb      	ldrb	r3, [r7, #7]
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4810      	ldr	r0, [pc, #64]	; (8000af4 <Server_Start+0x168>)
 8000ab4:	f7ff fe5e 	bl	8000774 <Server_Handle>
}
 8000ab8:	bf00      	nop
 8000aba:	3788      	adds	r7, #136	; 0x88
 8000abc:	46bd      	mov	sp, r7
 8000abe:	bd80      	pop	{r7, pc}
 8000ac0:	08005868 	.word	0x08005868
 8000ac4:	08005870 	.word	0x08005870
 8000ac8:	08005828 	.word	0x08005828
 8000acc:	200001ec 	.word	0x200001ec
 8000ad0:	200000a0 	.word	0x200000a0
 8000ad4:	0800587c 	.word	0x0800587c
 8000ad8:	08005880 	.word	0x08005880
 8000adc:	08005888 	.word	0x08005888
 8000ae0:	08005890 	.word	0x08005890
 8000ae4:	08005898 	.word	0x08005898
 8000ae8:	08005830 	.word	0x08005830
 8000aec:	080058a0 	.word	0x080058a0
 8000af0:	080058a8 	.word	0x080058a8
 8000af4:	080058b8 	.word	0x080058b8

08000af8 <Ringbuf_init>:

void store_char(unsigned char c, ring_buffer *buffer);


void Ringbuf_init(void)
{
 8000af8:	b480      	push	{r7}
 8000afa:	af00      	add	r7, sp, #0
  _rx_buffer = &rx_buffer;
 8000afc:	4b0d      	ldr	r3, [pc, #52]	; (8000b34 <Ringbuf_init+0x3c>)
 8000afe:	4a0e      	ldr	r2, [pc, #56]	; (8000b38 <Ringbuf_init+0x40>)
 8000b00:	601a      	str	r2, [r3, #0]
  _tx_buffer = &tx_buffer;
 8000b02:	4b0e      	ldr	r3, [pc, #56]	; (8000b3c <Ringbuf_init+0x44>)
 8000b04:	4a0e      	ldr	r2, [pc, #56]	; (8000b40 <Ringbuf_init+0x48>)
 8000b06:	601a      	str	r2, [r3, #0]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(uart, UART_IT_ERR);
 8000b08:	4b0e      	ldr	r3, [pc, #56]	; (8000b44 <Ringbuf_init+0x4c>)
 8000b0a:	681b      	ldr	r3, [r3, #0]
 8000b0c:	689a      	ldr	r2, [r3, #8]
 8000b0e:	4b0d      	ldr	r3, [pc, #52]	; (8000b44 <Ringbuf_init+0x4c>)
 8000b10:	681b      	ldr	r3, [r3, #0]
 8000b12:	f042 0201 	orr.w	r2, r2, #1
 8000b16:	609a      	str	r2, [r3, #8]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(uart, UART_IT_RXNE);
 8000b18:	4b0a      	ldr	r3, [pc, #40]	; (8000b44 <Ringbuf_init+0x4c>)
 8000b1a:	681b      	ldr	r3, [r3, #0]
 8000b1c:	681a      	ldr	r2, [r3, #0]
 8000b1e:	4b09      	ldr	r3, [pc, #36]	; (8000b44 <Ringbuf_init+0x4c>)
 8000b20:	681b      	ldr	r3, [r3, #0]
 8000b22:	f042 0220 	orr.w	r2, r2, #32
 8000b26:	601a      	str	r2, [r3, #0]
}
 8000b28:	bf00      	nop
 8000b2a:	46bd      	mov	sp, r7
 8000b2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b30:	4770      	bx	lr
 8000b32:	bf00      	nop
 8000b34:	20000304 	.word	0x20000304
 8000b38:	20000274 	.word	0x20000274
 8000b3c:	20000308 	.word	0x20000308
 8000b40:	200002bc 	.word	0x200002bc
 8000b44:	200001f0 	.word	0x200001f0

08000b48 <store_char>:

void store_char(unsigned char c, ring_buffer *buffer)
{
 8000b48:	b480      	push	{r7}
 8000b4a:	b085      	sub	sp, #20
 8000b4c:	af00      	add	r7, sp, #0
 8000b4e:	4603      	mov	r3, r0
 8000b50:	6039      	str	r1, [r7, #0]
 8000b52:	71fb      	strb	r3, [r7, #7]
  int i = (unsigned int)(buffer->head + 1) % UART_BUFFER_SIZE;
 8000b54:	683b      	ldr	r3, [r7, #0]
 8000b56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b58:	3301      	adds	r3, #1
 8000b5a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8000b5e:	60fb      	str	r3, [r7, #12]

  // if we should be storing the received character into the location
  // just before the tail (meaning that the head would advance to the
  // current location of the tail), we're about to overflow the buffer
  // and so we don't write the character or advance the head.
  if(i != buffer->tail) {
 8000b60:	683b      	ldr	r3, [r7, #0]
 8000b62:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8000b64:	68fb      	ldr	r3, [r7, #12]
 8000b66:	429a      	cmp	r2, r3
 8000b68:	d007      	beq.n	8000b7a <store_char+0x32>
    buffer->buffer[buffer->head] = c;
 8000b6a:	683b      	ldr	r3, [r7, #0]
 8000b6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b6e:	683a      	ldr	r2, [r7, #0]
 8000b70:	79f9      	ldrb	r1, [r7, #7]
 8000b72:	54d1      	strb	r1, [r2, r3]
    buffer->head = i;
 8000b74:	68fa      	ldr	r2, [r7, #12]
 8000b76:	683b      	ldr	r3, [r7, #0]
 8000b78:	641a      	str	r2, [r3, #64]	; 0x40
  }
}
 8000b7a:	bf00      	nop
 8000b7c:	3714      	adds	r7, #20
 8000b7e:	46bd      	mov	sp, r7
 8000b80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b84:	4770      	bx	lr

08000b86 <Look_for>:

int Look_for (char *str, char *buffertolookinto)
{
 8000b86:	b580      	push	{r7, lr}
 8000b88:	b086      	sub	sp, #24
 8000b8a:	af00      	add	r7, sp, #0
 8000b8c:	6078      	str	r0, [r7, #4]
 8000b8e:	6039      	str	r1, [r7, #0]
	int stringlength = strlen (str);
 8000b90:	6878      	ldr	r0, [r7, #4]
 8000b92:	f7ff fb27 	bl	80001e4 <strlen>
 8000b96:	4603      	mov	r3, r0
 8000b98:	60fb      	str	r3, [r7, #12]
	int bufferlength = strlen (buffertolookinto);
 8000b9a:	6838      	ldr	r0, [r7, #0]
 8000b9c:	f7ff fb22 	bl	80001e4 <strlen>
 8000ba0:	4603      	mov	r3, r0
 8000ba2:	60bb      	str	r3, [r7, #8]
	int so_far = 0;
 8000ba4:	2300      	movs	r3, #0
 8000ba6:	617b      	str	r3, [r7, #20]
	int indx = 0;
 8000ba8:	2300      	movs	r3, #0
 8000baa:	613b      	str	r3, [r7, #16]
repeat:
	while (str[so_far] != buffertolookinto[indx]) indx++;
 8000bac:	e002      	b.n	8000bb4 <Look_for+0x2e>
 8000bae:	693b      	ldr	r3, [r7, #16]
 8000bb0:	3301      	adds	r3, #1
 8000bb2:	613b      	str	r3, [r7, #16]
 8000bb4:	697b      	ldr	r3, [r7, #20]
 8000bb6:	687a      	ldr	r2, [r7, #4]
 8000bb8:	4413      	add	r3, r2
 8000bba:	781a      	ldrb	r2, [r3, #0]
 8000bbc:	693b      	ldr	r3, [r7, #16]
 8000bbe:	6839      	ldr	r1, [r7, #0]
 8000bc0:	440b      	add	r3, r1
 8000bc2:	781b      	ldrb	r3, [r3, #0]
 8000bc4:	429a      	cmp	r2, r3
 8000bc6:	d1f2      	bne.n	8000bae <Look_for+0x28>
	if (str[so_far] == buffertolookinto[indx])
 8000bc8:	697b      	ldr	r3, [r7, #20]
 8000bca:	687a      	ldr	r2, [r7, #4]
 8000bcc:	4413      	add	r3, r2
 8000bce:	781a      	ldrb	r2, [r3, #0]
 8000bd0:	693b      	ldr	r3, [r7, #16]
 8000bd2:	6839      	ldr	r1, [r7, #0]
 8000bd4:	440b      	add	r3, r1
 8000bd6:	781b      	ldrb	r3, [r3, #0]
 8000bd8:	429a      	cmp	r2, r3
 8000bda:	d111      	bne.n	8000c00 <Look_for+0x7a>
	{
		while (str[so_far] == buffertolookinto[indx])
 8000bdc:	e005      	b.n	8000bea <Look_for+0x64>
		{
			so_far++;
 8000bde:	697b      	ldr	r3, [r7, #20]
 8000be0:	3301      	adds	r3, #1
 8000be2:	617b      	str	r3, [r7, #20]
			indx++;
 8000be4:	693b      	ldr	r3, [r7, #16]
 8000be6:	3301      	adds	r3, #1
 8000be8:	613b      	str	r3, [r7, #16]
		while (str[so_far] == buffertolookinto[indx])
 8000bea:	697b      	ldr	r3, [r7, #20]
 8000bec:	687a      	ldr	r2, [r7, #4]
 8000bee:	4413      	add	r3, r2
 8000bf0:	781a      	ldrb	r2, [r3, #0]
 8000bf2:	693b      	ldr	r3, [r7, #16]
 8000bf4:	6839      	ldr	r1, [r7, #0]
 8000bf6:	440b      	add	r3, r1
 8000bf8:	781b      	ldrb	r3, [r3, #0]
 8000bfa:	429a      	cmp	r2, r3
 8000bfc:	d0ef      	beq.n	8000bde <Look_for+0x58>
 8000bfe:	e008      	b.n	8000c12 <Look_for+0x8c>
		}
	}
	else
	{
		so_far =0;
 8000c00:	2300      	movs	r3, #0
 8000c02:	617b      	str	r3, [r7, #20]
		if (indx >= bufferlength) return -1;
 8000c04:	693a      	ldr	r2, [r7, #16]
 8000c06:	68bb      	ldr	r3, [r7, #8]
 8000c08:	429a      	cmp	r2, r3
 8000c0a:	dbcf      	blt.n	8000bac <Look_for+0x26>
 8000c0c:	f04f 33ff 	mov.w	r3, #4294967295
 8000c10:	e007      	b.n	8000c22 <Look_for+0x9c>
		goto repeat;
	}

	if (so_far == stringlength) return 1;
 8000c12:	697a      	ldr	r2, [r7, #20]
 8000c14:	68fb      	ldr	r3, [r7, #12]
 8000c16:	429a      	cmp	r2, r3
 8000c18:	d101      	bne.n	8000c1e <Look_for+0x98>
 8000c1a:	2301      	movs	r3, #1
 8000c1c:	e001      	b.n	8000c22 <Look_for+0x9c>
	else return -1;
 8000c1e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000c22:	4618      	mov	r0, r3
 8000c24:	3718      	adds	r7, #24
 8000c26:	46bd      	mov	sp, r7
 8000c28:	bd80      	pop	{r7, pc}
	...

08000c2c <Uart_read>:

int Uart_read(void)
{
 8000c2c:	b480      	push	{r7}
 8000c2e:	b083      	sub	sp, #12
 8000c30:	af00      	add	r7, sp, #0
  // if the head isn't ahead of the tail, we don't have any characters
  if(_rx_buffer->head == _rx_buffer->tail)
 8000c32:	4b11      	ldr	r3, [pc, #68]	; (8000c78 <Uart_read+0x4c>)
 8000c34:	681b      	ldr	r3, [r3, #0]
 8000c36:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000c38:	4b0f      	ldr	r3, [pc, #60]	; (8000c78 <Uart_read+0x4c>)
 8000c3a:	681b      	ldr	r3, [r3, #0]
 8000c3c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c3e:	429a      	cmp	r2, r3
 8000c40:	d102      	bne.n	8000c48 <Uart_read+0x1c>
  {
    return -1;
 8000c42:	f04f 33ff 	mov.w	r3, #4294967295
 8000c46:	e010      	b.n	8000c6a <Uart_read+0x3e>
  }
  else
  {
    unsigned char c = _rx_buffer->buffer[_rx_buffer->tail];
 8000c48:	4b0b      	ldr	r3, [pc, #44]	; (8000c78 <Uart_read+0x4c>)
 8000c4a:	681a      	ldr	r2, [r3, #0]
 8000c4c:	4b0a      	ldr	r3, [pc, #40]	; (8000c78 <Uart_read+0x4c>)
 8000c4e:	681b      	ldr	r3, [r3, #0]
 8000c50:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c52:	5cd3      	ldrb	r3, [r2, r3]
 8000c54:	71fb      	strb	r3, [r7, #7]
    _rx_buffer->tail = (unsigned int)(_rx_buffer->tail + 1) % UART_BUFFER_SIZE;
 8000c56:	4b08      	ldr	r3, [pc, #32]	; (8000c78 <Uart_read+0x4c>)
 8000c58:	681b      	ldr	r3, [r3, #0]
 8000c5a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c5c:	1c5a      	adds	r2, r3, #1
 8000c5e:	4b06      	ldr	r3, [pc, #24]	; (8000c78 <Uart_read+0x4c>)
 8000c60:	681b      	ldr	r3, [r3, #0]
 8000c62:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 8000c66:	645a      	str	r2, [r3, #68]	; 0x44
    return c;
 8000c68:	79fb      	ldrb	r3, [r7, #7]
  }
}
 8000c6a:	4618      	mov	r0, r3
 8000c6c:	370c      	adds	r7, #12
 8000c6e:	46bd      	mov	sp, r7
 8000c70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c74:	4770      	bx	lr
 8000c76:	bf00      	nop
 8000c78:	20000304 	.word	0x20000304

08000c7c <Uart_write>:

void Uart_write(int c)
{
 8000c7c:	b480      	push	{r7}
 8000c7e:	b085      	sub	sp, #20
 8000c80:	af00      	add	r7, sp, #0
 8000c82:	6078      	str	r0, [r7, #4]
	if (c>=0)
 8000c84:	687b      	ldr	r3, [r7, #4]
 8000c86:	2b00      	cmp	r3, #0
 8000c88:	db21      	blt.n	8000cce <Uart_write+0x52>
	{
		int i = (_tx_buffer->head + 1) % UART_BUFFER_SIZE;
 8000c8a:	4b14      	ldr	r3, [pc, #80]	; (8000cdc <Uart_write+0x60>)
 8000c8c:	681b      	ldr	r3, [r3, #0]
 8000c8e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c90:	3301      	adds	r3, #1
 8000c92:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8000c96:	60fb      	str	r3, [r7, #12]

		// If the output buffer is full, there's nothing for it other than to
		// wait for the interrupt handler to empty it a bit
		// ???: return 0 here instead?
		while (i == _tx_buffer->tail);
 8000c98:	bf00      	nop
 8000c9a:	4b10      	ldr	r3, [pc, #64]	; (8000cdc <Uart_write+0x60>)
 8000c9c:	681b      	ldr	r3, [r3, #0]
 8000c9e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8000ca0:	68fb      	ldr	r3, [r7, #12]
 8000ca2:	429a      	cmp	r2, r3
 8000ca4:	d0f9      	beq.n	8000c9a <Uart_write+0x1e>

		_tx_buffer->buffer[_tx_buffer->head] = (uint8_t)c;
 8000ca6:	4b0d      	ldr	r3, [pc, #52]	; (8000cdc <Uart_write+0x60>)
 8000ca8:	681a      	ldr	r2, [r3, #0]
 8000caa:	4b0c      	ldr	r3, [pc, #48]	; (8000cdc <Uart_write+0x60>)
 8000cac:	681b      	ldr	r3, [r3, #0]
 8000cae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000cb0:	6879      	ldr	r1, [r7, #4]
 8000cb2:	b2c9      	uxtb	r1, r1
 8000cb4:	54d1      	strb	r1, [r2, r3]
		_tx_buffer->head = i;
 8000cb6:	4b09      	ldr	r3, [pc, #36]	; (8000cdc <Uart_write+0x60>)
 8000cb8:	681b      	ldr	r3, [r3, #0]
 8000cba:	68fa      	ldr	r2, [r7, #12]
 8000cbc:	641a      	str	r2, [r3, #64]	; 0x40

		__HAL_UART_ENABLE_IT(uart, UART_IT_TXE); // Enable UART transmission interrupt
 8000cbe:	4b08      	ldr	r3, [pc, #32]	; (8000ce0 <Uart_write+0x64>)
 8000cc0:	681b      	ldr	r3, [r3, #0]
 8000cc2:	681a      	ldr	r2, [r3, #0]
 8000cc4:	4b06      	ldr	r3, [pc, #24]	; (8000ce0 <Uart_write+0x64>)
 8000cc6:	681b      	ldr	r3, [r3, #0]
 8000cc8:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8000ccc:	601a      	str	r2, [r3, #0]
	}
}
 8000cce:	bf00      	nop
 8000cd0:	3714      	adds	r7, #20
 8000cd2:	46bd      	mov	sp, r7
 8000cd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cd8:	4770      	bx	lr
 8000cda:	bf00      	nop
 8000cdc:	20000308 	.word	0x20000308
 8000ce0:	200001f0 	.word	0x200001f0

08000ce4 <IsDataAvailable>:

int IsDataAvailable(void)
{
 8000ce4:	b480      	push	{r7}
 8000ce6:	af00      	add	r7, sp, #0
  return (uint16_t)(UART_BUFFER_SIZE + _rx_buffer->head - _rx_buffer->tail) % UART_BUFFER_SIZE;
 8000ce8:	4b09      	ldr	r3, [pc, #36]	; (8000d10 <IsDataAvailable+0x2c>)
 8000cea:	681b      	ldr	r3, [r3, #0]
 8000cec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000cee:	b29a      	uxth	r2, r3
 8000cf0:	4b07      	ldr	r3, [pc, #28]	; (8000d10 <IsDataAvailable+0x2c>)
 8000cf2:	681b      	ldr	r3, [r3, #0]
 8000cf4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000cf6:	b29b      	uxth	r3, r3
 8000cf8:	1ad3      	subs	r3, r2, r3
 8000cfa:	b29b      	uxth	r3, r3
 8000cfc:	3340      	adds	r3, #64	; 0x40
 8000cfe:	b29b      	uxth	r3, r3
 8000d00:	f003 033f 	and.w	r3, r3, #63	; 0x3f
}
 8000d04:	4618      	mov	r0, r3
 8000d06:	46bd      	mov	sp, r7
 8000d08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d0c:	4770      	bx	lr
 8000d0e:	bf00      	nop
 8000d10:	20000304 	.word	0x20000304

08000d14 <Uart_sendstring>:

void Uart_sendstring (const char *s)
{
 8000d14:	b580      	push	{r7, lr}
 8000d16:	b082      	sub	sp, #8
 8000d18:	af00      	add	r7, sp, #0
 8000d1a:	6078      	str	r0, [r7, #4]
	while(*s) Uart_write(*s++);
 8000d1c:	e006      	b.n	8000d2c <Uart_sendstring+0x18>
 8000d1e:	687b      	ldr	r3, [r7, #4]
 8000d20:	1c5a      	adds	r2, r3, #1
 8000d22:	607a      	str	r2, [r7, #4]
 8000d24:	781b      	ldrb	r3, [r3, #0]
 8000d26:	4618      	mov	r0, r3
 8000d28:	f7ff ffa8 	bl	8000c7c <Uart_write>
 8000d2c:	687b      	ldr	r3, [r7, #4]
 8000d2e:	781b      	ldrb	r3, [r3, #0]
 8000d30:	2b00      	cmp	r3, #0
 8000d32:	d1f4      	bne.n	8000d1e <Uart_sendstring+0xa>
}
 8000d34:	bf00      	nop
 8000d36:	bf00      	nop
 8000d38:	3708      	adds	r7, #8
 8000d3a:	46bd      	mov	sp, r7
 8000d3c:	bd80      	pop	{r7, pc}

08000d3e <GetDataFromBuffer>:

  while(*s) Uart_write(*s++);
}

void GetDataFromBuffer (char *startString, char *endString, char *buffertocopyfrom, char *buffertocopyinto)
{
 8000d3e:	b580      	push	{r7, lr}
 8000d40:	b08c      	sub	sp, #48	; 0x30
 8000d42:	af00      	add	r7, sp, #0
 8000d44:	60f8      	str	r0, [r7, #12]
 8000d46:	60b9      	str	r1, [r7, #8]
 8000d48:	607a      	str	r2, [r7, #4]
 8000d4a:	603b      	str	r3, [r7, #0]
	int startStringLength = strlen (startString);
 8000d4c:	68f8      	ldr	r0, [r7, #12]
 8000d4e:	f7ff fa49 	bl	80001e4 <strlen>
 8000d52:	4603      	mov	r3, r0
 8000d54:	623b      	str	r3, [r7, #32]
	int endStringLength   = strlen (endString);
 8000d56:	68b8      	ldr	r0, [r7, #8]
 8000d58:	f7ff fa44 	bl	80001e4 <strlen>
 8000d5c:	4603      	mov	r3, r0
 8000d5e:	61fb      	str	r3, [r7, #28]
	int so_far = 0;
 8000d60:	2300      	movs	r3, #0
 8000d62:	62fb      	str	r3, [r7, #44]	; 0x2c
	int indx = 0;
 8000d64:	2300      	movs	r3, #0
 8000d66:	62bb      	str	r3, [r7, #40]	; 0x28
	int startposition = 0;
 8000d68:	2300      	movs	r3, #0
 8000d6a:	61bb      	str	r3, [r7, #24]
	int endposition = 0;
 8000d6c:	2300      	movs	r3, #0
 8000d6e:	617b      	str	r3, [r7, #20]

repeat1:
	while (startString[so_far] != buffertocopyfrom[indx]) indx++;
 8000d70:	e002      	b.n	8000d78 <GetDataFromBuffer+0x3a>
 8000d72:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000d74:	3301      	adds	r3, #1
 8000d76:	62bb      	str	r3, [r7, #40]	; 0x28
 8000d78:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000d7a:	68fa      	ldr	r2, [r7, #12]
 8000d7c:	4413      	add	r3, r2
 8000d7e:	781a      	ldrb	r2, [r3, #0]
 8000d80:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000d82:	6879      	ldr	r1, [r7, #4]
 8000d84:	440b      	add	r3, r1
 8000d86:	781b      	ldrb	r3, [r3, #0]
 8000d88:	429a      	cmp	r2, r3
 8000d8a:	d1f2      	bne.n	8000d72 <GetDataFromBuffer+0x34>
	if (startString[so_far] == buffertocopyfrom[indx])
 8000d8c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000d8e:	68fa      	ldr	r2, [r7, #12]
 8000d90:	4413      	add	r3, r2
 8000d92:	781a      	ldrb	r2, [r3, #0]
 8000d94:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000d96:	6879      	ldr	r1, [r7, #4]
 8000d98:	440b      	add	r3, r1
 8000d9a:	781b      	ldrb	r3, [r3, #0]
 8000d9c:	429a      	cmp	r2, r3
 8000d9e:	d110      	bne.n	8000dc2 <GetDataFromBuffer+0x84>
	{
		while (startString[so_far] == buffertocopyfrom[indx])
 8000da0:	e005      	b.n	8000dae <GetDataFromBuffer+0x70>
		{
			so_far++;
 8000da2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000da4:	3301      	adds	r3, #1
 8000da6:	62fb      	str	r3, [r7, #44]	; 0x2c
			indx++;
 8000da8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000daa:	3301      	adds	r3, #1
 8000dac:	62bb      	str	r3, [r7, #40]	; 0x28
		while (startString[so_far] == buffertocopyfrom[indx])
 8000dae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000db0:	68fa      	ldr	r2, [r7, #12]
 8000db2:	4413      	add	r3, r2
 8000db4:	781a      	ldrb	r2, [r3, #0]
 8000db6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000db8:	6879      	ldr	r1, [r7, #4]
 8000dba:	440b      	add	r3, r1
 8000dbc:	781b      	ldrb	r3, [r3, #0]
 8000dbe:	429a      	cmp	r2, r3
 8000dc0:	d0ef      	beq.n	8000da2 <GetDataFromBuffer+0x64>
		}
	}

	if (so_far == startStringLength) startposition = indx;
 8000dc2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8000dc4:	6a3b      	ldr	r3, [r7, #32]
 8000dc6:	429a      	cmp	r2, r3
 8000dc8:	d104      	bne.n	8000dd4 <GetDataFromBuffer+0x96>
 8000dca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000dcc:	61bb      	str	r3, [r7, #24]
	{
		so_far =0;
		goto repeat1;
	}

	so_far = 0;
 8000dce:	2300      	movs	r3, #0
 8000dd0:	62fb      	str	r3, [r7, #44]	; 0x2c
 8000dd2:	e006      	b.n	8000de2 <GetDataFromBuffer+0xa4>
		so_far =0;
 8000dd4:	2300      	movs	r3, #0
 8000dd6:	62fb      	str	r3, [r7, #44]	; 0x2c
		goto repeat1;
 8000dd8:	e7ca      	b.n	8000d70 <GetDataFromBuffer+0x32>

repeat2:
	while (endString[so_far] != buffertocopyfrom[indx]) indx++;
 8000dda:	e002      	b.n	8000de2 <GetDataFromBuffer+0xa4>
 8000ddc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000dde:	3301      	adds	r3, #1
 8000de0:	62bb      	str	r3, [r7, #40]	; 0x28
 8000de2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000de4:	68ba      	ldr	r2, [r7, #8]
 8000de6:	4413      	add	r3, r2
 8000de8:	781a      	ldrb	r2, [r3, #0]
 8000dea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000dec:	6879      	ldr	r1, [r7, #4]
 8000dee:	440b      	add	r3, r1
 8000df0:	781b      	ldrb	r3, [r3, #0]
 8000df2:	429a      	cmp	r2, r3
 8000df4:	d1f2      	bne.n	8000ddc <GetDataFromBuffer+0x9e>
	if (endString[so_far] == buffertocopyfrom[indx])
 8000df6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000df8:	68ba      	ldr	r2, [r7, #8]
 8000dfa:	4413      	add	r3, r2
 8000dfc:	781a      	ldrb	r2, [r3, #0]
 8000dfe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000e00:	6879      	ldr	r1, [r7, #4]
 8000e02:	440b      	add	r3, r1
 8000e04:	781b      	ldrb	r3, [r3, #0]
 8000e06:	429a      	cmp	r2, r3
 8000e08:	d110      	bne.n	8000e2c <GetDataFromBuffer+0xee>
	{
		while (endString[so_far] == buffertocopyfrom[indx])
 8000e0a:	e005      	b.n	8000e18 <GetDataFromBuffer+0xda>
		{
			so_far++;
 8000e0c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000e0e:	3301      	adds	r3, #1
 8000e10:	62fb      	str	r3, [r7, #44]	; 0x2c
			indx++;
 8000e12:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000e14:	3301      	adds	r3, #1
 8000e16:	62bb      	str	r3, [r7, #40]	; 0x28
		while (endString[so_far] == buffertocopyfrom[indx])
 8000e18:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000e1a:	68ba      	ldr	r2, [r7, #8]
 8000e1c:	4413      	add	r3, r2
 8000e1e:	781a      	ldrb	r2, [r3, #0]
 8000e20:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000e22:	6879      	ldr	r1, [r7, #4]
 8000e24:	440b      	add	r3, r1
 8000e26:	781b      	ldrb	r3, [r3, #0]
 8000e28:	429a      	cmp	r2, r3
 8000e2a:	d0ef      	beq.n	8000e0c <GetDataFromBuffer+0xce>
		}
	}

	if (so_far == endStringLength) endposition = indx-endStringLength;
 8000e2c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8000e2e:	69fb      	ldr	r3, [r7, #28]
 8000e30:	429a      	cmp	r2, r3
 8000e32:	d10a      	bne.n	8000e4a <GetDataFromBuffer+0x10c>
 8000e34:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8000e36:	69fb      	ldr	r3, [r7, #28]
 8000e38:	1ad3      	subs	r3, r2, r3
 8000e3a:	617b      	str	r3, [r7, #20]
	{
		so_far =0;
		goto repeat2;
	}

	so_far = 0;
 8000e3c:	2300      	movs	r3, #0
 8000e3e:	62fb      	str	r3, [r7, #44]	; 0x2c
	indx=0;
 8000e40:	2300      	movs	r3, #0
 8000e42:	62bb      	str	r3, [r7, #40]	; 0x28

	for (int i=startposition; i<endposition; i++)
 8000e44:	69bb      	ldr	r3, [r7, #24]
 8000e46:	627b      	str	r3, [r7, #36]	; 0x24
 8000e48:	e010      	b.n	8000e6c <GetDataFromBuffer+0x12e>
		so_far =0;
 8000e4a:	2300      	movs	r3, #0
 8000e4c:	62fb      	str	r3, [r7, #44]	; 0x2c
		goto repeat2;
 8000e4e:	e7c4      	b.n	8000dda <GetDataFromBuffer+0x9c>
	{
		buffertocopyinto[indx] = buffertocopyfrom[i];
 8000e50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e52:	687a      	ldr	r2, [r7, #4]
 8000e54:	441a      	add	r2, r3
 8000e56:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000e58:	6839      	ldr	r1, [r7, #0]
 8000e5a:	440b      	add	r3, r1
 8000e5c:	7812      	ldrb	r2, [r2, #0]
 8000e5e:	701a      	strb	r2, [r3, #0]
		indx++;
 8000e60:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000e62:	3301      	adds	r3, #1
 8000e64:	62bb      	str	r3, [r7, #40]	; 0x28
	for (int i=startposition; i<endposition; i++)
 8000e66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e68:	3301      	adds	r3, #1
 8000e6a:	627b      	str	r3, [r7, #36]	; 0x24
 8000e6c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000e6e:	697b      	ldr	r3, [r7, #20]
 8000e70:	429a      	cmp	r2, r3
 8000e72:	dbed      	blt.n	8000e50 <GetDataFromBuffer+0x112>
	}
}
 8000e74:	bf00      	nop
 8000e76:	bf00      	nop
 8000e78:	3730      	adds	r7, #48	; 0x30
 8000e7a:	46bd      	mov	sp, r7
 8000e7c:	bd80      	pop	{r7, pc}
	...

08000e80 <Uart_flush>:

void Uart_flush (void)
{
 8000e80:	b580      	push	{r7, lr}
 8000e82:	af00      	add	r7, sp, #0
	memset(_rx_buffer->buffer,'\0', UART_BUFFER_SIZE);
 8000e84:	4b06      	ldr	r3, [pc, #24]	; (8000ea0 <Uart_flush+0x20>)
 8000e86:	681b      	ldr	r3, [r3, #0]
 8000e88:	2240      	movs	r2, #64	; 0x40
 8000e8a:	2100      	movs	r1, #0
 8000e8c:	4618      	mov	r0, r3
 8000e8e:	f003 fd0d 	bl	80048ac <memset>
	_rx_buffer->head = 0;
 8000e92:	4b03      	ldr	r3, [pc, #12]	; (8000ea0 <Uart_flush+0x20>)
 8000e94:	681b      	ldr	r3, [r3, #0]
 8000e96:	2200      	movs	r2, #0
 8000e98:	641a      	str	r2, [r3, #64]	; 0x40
}
 8000e9a:	bf00      	nop
 8000e9c:	bd80      	pop	{r7, pc}
 8000e9e:	bf00      	nop
 8000ea0:	20000304 	.word	0x20000304

08000ea4 <Uart_peek>:

int Uart_peek()
{
 8000ea4:	b480      	push	{r7}
 8000ea6:	af00      	add	r7, sp, #0
  if(_rx_buffer->head == _rx_buffer->tail)
 8000ea8:	4b0a      	ldr	r3, [pc, #40]	; (8000ed4 <Uart_peek+0x30>)
 8000eaa:	681b      	ldr	r3, [r3, #0]
 8000eac:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000eae:	4b09      	ldr	r3, [pc, #36]	; (8000ed4 <Uart_peek+0x30>)
 8000eb0:	681b      	ldr	r3, [r3, #0]
 8000eb2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000eb4:	429a      	cmp	r2, r3
 8000eb6:	d102      	bne.n	8000ebe <Uart_peek+0x1a>
  {
    return -1;
 8000eb8:	f04f 33ff 	mov.w	r3, #4294967295
 8000ebc:	e005      	b.n	8000eca <Uart_peek+0x26>
  }
  else
  {
    return _rx_buffer->buffer[_rx_buffer->tail];
 8000ebe:	4b05      	ldr	r3, [pc, #20]	; (8000ed4 <Uart_peek+0x30>)
 8000ec0:	681a      	ldr	r2, [r3, #0]
 8000ec2:	4b04      	ldr	r3, [pc, #16]	; (8000ed4 <Uart_peek+0x30>)
 8000ec4:	681b      	ldr	r3, [r3, #0]
 8000ec6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ec8:	5cd3      	ldrb	r3, [r2, r3]
  }
}
 8000eca:	4618      	mov	r0, r3
 8000ecc:	46bd      	mov	sp, r7
 8000ece:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ed2:	4770      	bx	lr
 8000ed4:	20000304 	.word	0x20000304

08000ed8 <Copy_upto>:


int Copy_upto (char *string, char *buffertocopyinto)
{
 8000ed8:	b580      	push	{r7, lr}
 8000eda:	b086      	sub	sp, #24
 8000edc:	af00      	add	r7, sp, #0
 8000ede:	6078      	str	r0, [r7, #4]
 8000ee0:	6039      	str	r1, [r7, #0]
	int so_far =0;
 8000ee2:	2300      	movs	r3, #0
 8000ee4:	617b      	str	r3, [r7, #20]
	int len = strlen (string);
 8000ee6:	6878      	ldr	r0, [r7, #4]
 8000ee8:	f7ff f97c 	bl	80001e4 <strlen>
 8000eec:	4603      	mov	r3, r0
 8000eee:	60fb      	str	r3, [r7, #12]
	int indx = 0;
 8000ef0:	2300      	movs	r3, #0
 8000ef2:	613b      	str	r3, [r7, #16]

again:
	while (!IsDataAvailable());
 8000ef4:	bf00      	nop
 8000ef6:	f7ff fef5 	bl	8000ce4 <IsDataAvailable>
 8000efa:	4603      	mov	r3, r0
 8000efc:	2b00      	cmp	r3, #0
 8000efe:	d0fa      	beq.n	8000ef6 <Copy_upto+0x1e>
	while (Uart_peek() != string[so_far])
 8000f00:	e01b      	b.n	8000f3a <Copy_upto+0x62>
		{
			buffertocopyinto[indx] = _rx_buffer->buffer[_rx_buffer->tail];
 8000f02:	4b2e      	ldr	r3, [pc, #184]	; (8000fbc <Copy_upto+0xe4>)
 8000f04:	6819      	ldr	r1, [r3, #0]
 8000f06:	4b2d      	ldr	r3, [pc, #180]	; (8000fbc <Copy_upto+0xe4>)
 8000f08:	681b      	ldr	r3, [r3, #0]
 8000f0a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8000f0c:	693b      	ldr	r3, [r7, #16]
 8000f0e:	6838      	ldr	r0, [r7, #0]
 8000f10:	4403      	add	r3, r0
 8000f12:	5c8a      	ldrb	r2, [r1, r2]
 8000f14:	701a      	strb	r2, [r3, #0]
			_rx_buffer->tail = (unsigned int)(_rx_buffer->tail + 1) % UART_BUFFER_SIZE;
 8000f16:	4b29      	ldr	r3, [pc, #164]	; (8000fbc <Copy_upto+0xe4>)
 8000f18:	681b      	ldr	r3, [r3, #0]
 8000f1a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f1c:	1c5a      	adds	r2, r3, #1
 8000f1e:	4b27      	ldr	r3, [pc, #156]	; (8000fbc <Copy_upto+0xe4>)
 8000f20:	681b      	ldr	r3, [r3, #0]
 8000f22:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 8000f26:	645a      	str	r2, [r3, #68]	; 0x44
			indx++;
 8000f28:	693b      	ldr	r3, [r7, #16]
 8000f2a:	3301      	adds	r3, #1
 8000f2c:	613b      	str	r3, [r7, #16]
			while (!IsDataAvailable());
 8000f2e:	bf00      	nop
 8000f30:	f7ff fed8 	bl	8000ce4 <IsDataAvailable>
 8000f34:	4603      	mov	r3, r0
 8000f36:	2b00      	cmp	r3, #0
 8000f38:	d0fa      	beq.n	8000f30 <Copy_upto+0x58>
	while (Uart_peek() != string[so_far])
 8000f3a:	f7ff ffb3 	bl	8000ea4 <Uart_peek>
 8000f3e:	4601      	mov	r1, r0
 8000f40:	697b      	ldr	r3, [r7, #20]
 8000f42:	687a      	ldr	r2, [r7, #4]
 8000f44:	4413      	add	r3, r2
 8000f46:	781b      	ldrb	r3, [r3, #0]
 8000f48:	4299      	cmp	r1, r3
 8000f4a:	d1da      	bne.n	8000f02 <Copy_upto+0x2a>

		}
	while (Uart_peek() == string [so_far])
 8000f4c:	e019      	b.n	8000f82 <Copy_upto+0xaa>
	{
		so_far++;
 8000f4e:	697b      	ldr	r3, [r7, #20]
 8000f50:	3301      	adds	r3, #1
 8000f52:	617b      	str	r3, [r7, #20]
		buffertocopyinto[indx++] = Uart_read();
 8000f54:	f7ff fe6a 	bl	8000c2c <Uart_read>
 8000f58:	4601      	mov	r1, r0
 8000f5a:	693b      	ldr	r3, [r7, #16]
 8000f5c:	1c5a      	adds	r2, r3, #1
 8000f5e:	613a      	str	r2, [r7, #16]
 8000f60:	461a      	mov	r2, r3
 8000f62:	683b      	ldr	r3, [r7, #0]
 8000f64:	4413      	add	r3, r2
 8000f66:	b2ca      	uxtb	r2, r1
 8000f68:	701a      	strb	r2, [r3, #0]
		if (so_far == len) return 1;
 8000f6a:	697a      	ldr	r2, [r7, #20]
 8000f6c:	68fb      	ldr	r3, [r7, #12]
 8000f6e:	429a      	cmp	r2, r3
 8000f70:	d101      	bne.n	8000f76 <Copy_upto+0x9e>
 8000f72:	2301      	movs	r3, #1
 8000f74:	e01d      	b.n	8000fb2 <Copy_upto+0xda>
		while (!IsDataAvailable());
 8000f76:	bf00      	nop
 8000f78:	f7ff feb4 	bl	8000ce4 <IsDataAvailable>
 8000f7c:	4603      	mov	r3, r0
 8000f7e:	2b00      	cmp	r3, #0
 8000f80:	d0fa      	beq.n	8000f78 <Copy_upto+0xa0>
	while (Uart_peek() == string [so_far])
 8000f82:	f7ff ff8f 	bl	8000ea4 <Uart_peek>
 8000f86:	4601      	mov	r1, r0
 8000f88:	697b      	ldr	r3, [r7, #20]
 8000f8a:	687a      	ldr	r2, [r7, #4]
 8000f8c:	4413      	add	r3, r2
 8000f8e:	781b      	ldrb	r3, [r3, #0]
 8000f90:	4299      	cmp	r1, r3
 8000f92:	d0dc      	beq.n	8000f4e <Copy_upto+0x76>
	}

	if (so_far != len)
 8000f94:	697a      	ldr	r2, [r7, #20]
 8000f96:	68fb      	ldr	r3, [r7, #12]
 8000f98:	429a      	cmp	r2, r3
 8000f9a:	d002      	beq.n	8000fa2 <Copy_upto+0xca>
	{
		so_far = 0;
 8000f9c:	2300      	movs	r3, #0
 8000f9e:	617b      	str	r3, [r7, #20]
		goto again;
 8000fa0:	e7a8      	b.n	8000ef4 <Copy_upto+0x1c>
	}

	if (so_far == len) return 1;
 8000fa2:	697a      	ldr	r2, [r7, #20]
 8000fa4:	68fb      	ldr	r3, [r7, #12]
 8000fa6:	429a      	cmp	r2, r3
 8000fa8:	d101      	bne.n	8000fae <Copy_upto+0xd6>
 8000faa:	2301      	movs	r3, #1
 8000fac:	e001      	b.n	8000fb2 <Copy_upto+0xda>
	else return -1;
 8000fae:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000fb2:	4618      	mov	r0, r3
 8000fb4:	3718      	adds	r7, #24
 8000fb6:	46bd      	mov	sp, r7
 8000fb8:	bd80      	pop	{r7, pc}
 8000fba:	bf00      	nop
 8000fbc:	20000304 	.word	0x20000304

08000fc0 <Get_after>:

int Get_after (char *string, uint8_t numberofchars, char *buffertosave)
{
 8000fc0:	b580      	push	{r7, lr}
 8000fc2:	b086      	sub	sp, #24
 8000fc4:	af00      	add	r7, sp, #0
 8000fc6:	60f8      	str	r0, [r7, #12]
 8000fc8:	460b      	mov	r3, r1
 8000fca:	607a      	str	r2, [r7, #4]
 8000fcc:	72fb      	strb	r3, [r7, #11]

	while (Wait_for(string) != 1);
 8000fce:	bf00      	nop
 8000fd0:	68f8      	ldr	r0, [r7, #12]
 8000fd2:	f000 f821 	bl	8001018 <Wait_for>
 8000fd6:	4603      	mov	r3, r0
 8000fd8:	2b01      	cmp	r3, #1
 8000fda:	d1f9      	bne.n	8000fd0 <Get_after+0x10>
	for (int indx=0; indx<numberofchars; indx++)
 8000fdc:	2300      	movs	r3, #0
 8000fde:	617b      	str	r3, [r7, #20]
 8000fe0:	e010      	b.n	8001004 <Get_after+0x44>
	{
		while (!(IsDataAvailable()));
 8000fe2:	bf00      	nop
 8000fe4:	f7ff fe7e 	bl	8000ce4 <IsDataAvailable>
 8000fe8:	4603      	mov	r3, r0
 8000fea:	2b00      	cmp	r3, #0
 8000fec:	d0fa      	beq.n	8000fe4 <Get_after+0x24>
		buffertosave[indx] = Uart_read();
 8000fee:	f7ff fe1d 	bl	8000c2c <Uart_read>
 8000ff2:	4601      	mov	r1, r0
 8000ff4:	697b      	ldr	r3, [r7, #20]
 8000ff6:	687a      	ldr	r2, [r7, #4]
 8000ff8:	4413      	add	r3, r2
 8000ffa:	b2ca      	uxtb	r2, r1
 8000ffc:	701a      	strb	r2, [r3, #0]
	for (int indx=0; indx<numberofchars; indx++)
 8000ffe:	697b      	ldr	r3, [r7, #20]
 8001000:	3301      	adds	r3, #1
 8001002:	617b      	str	r3, [r7, #20]
 8001004:	7afb      	ldrb	r3, [r7, #11]
 8001006:	697a      	ldr	r2, [r7, #20]
 8001008:	429a      	cmp	r2, r3
 800100a:	dbea      	blt.n	8000fe2 <Get_after+0x22>
	}
	return 1;
 800100c:	2301      	movs	r3, #1
}
 800100e:	4618      	mov	r0, r3
 8001010:	3718      	adds	r7, #24
 8001012:	46bd      	mov	sp, r7
 8001014:	bd80      	pop	{r7, pc}
	...

08001018 <Wait_for>:


int Wait_for (char *string)
{
 8001018:	b580      	push	{r7, lr}
 800101a:	b084      	sub	sp, #16
 800101c:	af00      	add	r7, sp, #0
 800101e:	6078      	str	r0, [r7, #4]
	int so_far =0;
 8001020:	2300      	movs	r3, #0
 8001022:	60fb      	str	r3, [r7, #12]
	int len = strlen (string);
 8001024:	6878      	ldr	r0, [r7, #4]
 8001026:	f7ff f8dd 	bl	80001e4 <strlen>
 800102a:	4603      	mov	r3, r0
 800102c:	60bb      	str	r3, [r7, #8]

again:
	while (!IsDataAvailable());
 800102e:	bf00      	nop
 8001030:	f7ff fe58 	bl	8000ce4 <IsDataAvailable>
 8001034:	4603      	mov	r3, r0
 8001036:	2b00      	cmp	r3, #0
 8001038:	d0fa      	beq.n	8001030 <Wait_for+0x18>
	while (Uart_peek() != string[so_far]) _rx_buffer->tail = (unsigned int)(_rx_buffer->tail + 1) % UART_BUFFER_SIZE;
 800103a:	e008      	b.n	800104e <Wait_for+0x36>
 800103c:	4b1f      	ldr	r3, [pc, #124]	; (80010bc <Wait_for+0xa4>)
 800103e:	681b      	ldr	r3, [r3, #0]
 8001040:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001042:	1c5a      	adds	r2, r3, #1
 8001044:	4b1d      	ldr	r3, [pc, #116]	; (80010bc <Wait_for+0xa4>)
 8001046:	681b      	ldr	r3, [r3, #0]
 8001048:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 800104c:	645a      	str	r2, [r3, #68]	; 0x44
 800104e:	f7ff ff29 	bl	8000ea4 <Uart_peek>
 8001052:	4601      	mov	r1, r0
 8001054:	68fb      	ldr	r3, [r7, #12]
 8001056:	687a      	ldr	r2, [r7, #4]
 8001058:	4413      	add	r3, r2
 800105a:	781b      	ldrb	r3, [r3, #0]
 800105c:	4299      	cmp	r1, r3
 800105e:	d1ed      	bne.n	800103c <Wait_for+0x24>
	while (Uart_peek() == string [so_far])
 8001060:	e010      	b.n	8001084 <Wait_for+0x6c>
	{
		so_far++;
 8001062:	68fb      	ldr	r3, [r7, #12]
 8001064:	3301      	adds	r3, #1
 8001066:	60fb      	str	r3, [r7, #12]
		Uart_read();
 8001068:	f7ff fde0 	bl	8000c2c <Uart_read>
		if (so_far == len) return 1;
 800106c:	68fa      	ldr	r2, [r7, #12]
 800106e:	68bb      	ldr	r3, [r7, #8]
 8001070:	429a      	cmp	r2, r3
 8001072:	d101      	bne.n	8001078 <Wait_for+0x60>
 8001074:	2301      	movs	r3, #1
 8001076:	e01d      	b.n	80010b4 <Wait_for+0x9c>
		while (!IsDataAvailable());
 8001078:	bf00      	nop
 800107a:	f7ff fe33 	bl	8000ce4 <IsDataAvailable>
 800107e:	4603      	mov	r3, r0
 8001080:	2b00      	cmp	r3, #0
 8001082:	d0fa      	beq.n	800107a <Wait_for+0x62>
	while (Uart_peek() == string [so_far])
 8001084:	f7ff ff0e 	bl	8000ea4 <Uart_peek>
 8001088:	4601      	mov	r1, r0
 800108a:	68fb      	ldr	r3, [r7, #12]
 800108c:	687a      	ldr	r2, [r7, #4]
 800108e:	4413      	add	r3, r2
 8001090:	781b      	ldrb	r3, [r3, #0]
 8001092:	4299      	cmp	r1, r3
 8001094:	d0e5      	beq.n	8001062 <Wait_for+0x4a>
	}

	if (so_far != len)
 8001096:	68fa      	ldr	r2, [r7, #12]
 8001098:	68bb      	ldr	r3, [r7, #8]
 800109a:	429a      	cmp	r2, r3
 800109c:	d002      	beq.n	80010a4 <Wait_for+0x8c>
	{
		so_far = 0;
 800109e:	2300      	movs	r3, #0
 80010a0:	60fb      	str	r3, [r7, #12]
		goto again;
 80010a2:	e7c4      	b.n	800102e <Wait_for+0x16>
	}

	if (so_far == len) return 1;
 80010a4:	68fa      	ldr	r2, [r7, #12]
 80010a6:	68bb      	ldr	r3, [r7, #8]
 80010a8:	429a      	cmp	r2, r3
 80010aa:	d101      	bne.n	80010b0 <Wait_for+0x98>
 80010ac:	2301      	movs	r3, #1
 80010ae:	e001      	b.n	80010b4 <Wait_for+0x9c>
	else return -1;
 80010b0:	f04f 33ff 	mov.w	r3, #4294967295
}
 80010b4:	4618      	mov	r0, r3
 80010b6:	3710      	adds	r7, #16
 80010b8:	46bd      	mov	sp, r7
 80010ba:	bd80      	pop	{r7, pc}
 80010bc:	20000304 	.word	0x20000304

080010c0 <Uart_isr>:




void Uart_isr (UART_HandleTypeDef *huart)
{
 80010c0:	b580      	push	{r7, lr}
 80010c2:	b086      	sub	sp, #24
 80010c4:	af00      	add	r7, sp, #0
 80010c6:	6078      	str	r0, [r7, #4]
	  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80010c8:	687b      	ldr	r3, [r7, #4]
 80010ca:	681b      	ldr	r3, [r3, #0]
 80010cc:	69db      	ldr	r3, [r3, #28]
 80010ce:	617b      	str	r3, [r7, #20]
	  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80010d0:	687b      	ldr	r3, [r7, #4]
 80010d2:	681b      	ldr	r3, [r3, #0]
 80010d4:	681b      	ldr	r3, [r3, #0]
 80010d6:	613b      	str	r3, [r7, #16]

    /* if DR is not empty and the Rx Int is enabled */
    if (((isrflags & USART_ISR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80010d8:	697b      	ldr	r3, [r7, #20]
 80010da:	f003 0320 	and.w	r3, r3, #32
 80010de:	2b00      	cmp	r3, #0
 80010e0:	d013      	beq.n	800110a <Uart_isr+0x4a>
 80010e2:	693b      	ldr	r3, [r7, #16]
 80010e4:	f003 0320 	and.w	r3, r3, #32
 80010e8:	2b00      	cmp	r3, #0
 80010ea:	d00e      	beq.n	800110a <Uart_isr+0x4a>
    	    	      * @note   TC flag can be also cleared by software sequence: a read operation to
    	    	      *          USART_SR register followed by a write operation to USART_DR register.
    	    	      * @note   TXE flag is cleared only by a write to the USART_DR register.

    	 *********************/
		huart->Instance->ISR;                       /* Read status register */
 80010ec:	687b      	ldr	r3, [r7, #4]
 80010ee:	681b      	ldr	r3, [r3, #0]
 80010f0:	69db      	ldr	r3, [r3, #28]
        unsigned char c = huart->Instance->ISR;     /* Read data register */
 80010f2:	687b      	ldr	r3, [r7, #4]
 80010f4:	681b      	ldr	r3, [r3, #0]
 80010f6:	69db      	ldr	r3, [r3, #28]
 80010f8:	73fb      	strb	r3, [r7, #15]
        store_char (c, _rx_buffer);  // store data in buffer
 80010fa:	4b1c      	ldr	r3, [pc, #112]	; (800116c <Uart_isr+0xac>)
 80010fc:	681a      	ldr	r2, [r3, #0]
 80010fe:	7bfb      	ldrb	r3, [r7, #15]
 8001100:	4611      	mov	r1, r2
 8001102:	4618      	mov	r0, r3
 8001104:	f7ff fd20 	bl	8000b48 <store_char>
        return;
 8001108:	e02d      	b.n	8001166 <Uart_isr+0xa6>
    }

    /*If interrupt is caused due to Transmit Data Register Empty */
    if (((isrflags & USART_ISR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800110a:	697b      	ldr	r3, [r7, #20]
 800110c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001110:	2b00      	cmp	r3, #0
 8001112:	d028      	beq.n	8001166 <Uart_isr+0xa6>
 8001114:	693b      	ldr	r3, [r7, #16]
 8001116:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800111a:	2b00      	cmp	r3, #0
 800111c:	d023      	beq.n	8001166 <Uart_isr+0xa6>
    {
    	if(tx_buffer.head == tx_buffer.tail)
 800111e:	4b14      	ldr	r3, [pc, #80]	; (8001170 <Uart_isr+0xb0>)
 8001120:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001122:	4b13      	ldr	r3, [pc, #76]	; (8001170 <Uart_isr+0xb0>)
 8001124:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001126:	429a      	cmp	r2, r3
 8001128:	d108      	bne.n	800113c <Uart_isr+0x7c>
    	    {
    	      // Buffer empty, so disable interrupts
    	      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800112a:	687b      	ldr	r3, [r7, #4]
 800112c:	681b      	ldr	r3, [r3, #0]
 800112e:	681a      	ldr	r2, [r3, #0]
 8001130:	687b      	ldr	r3, [r7, #4]
 8001132:	681b      	ldr	r3, [r3, #0]
 8001134:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001138:	601a      	str	r2, [r3, #0]

    	      huart->Instance->ISR;
    	      huart->Instance->RDR = c;

    	    }
    	return;
 800113a:	e013      	b.n	8001164 <Uart_isr+0xa4>
    	      unsigned char c = tx_buffer.buffer[tx_buffer.tail];
 800113c:	4b0c      	ldr	r3, [pc, #48]	; (8001170 <Uart_isr+0xb0>)
 800113e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001140:	4a0b      	ldr	r2, [pc, #44]	; (8001170 <Uart_isr+0xb0>)
 8001142:	5cd3      	ldrb	r3, [r2, r3]
 8001144:	73bb      	strb	r3, [r7, #14]
    	      tx_buffer.tail = (tx_buffer.tail + 1) % UART_BUFFER_SIZE;
 8001146:	4b0a      	ldr	r3, [pc, #40]	; (8001170 <Uart_isr+0xb0>)
 8001148:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800114a:	3301      	adds	r3, #1
 800114c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001150:	4a07      	ldr	r2, [pc, #28]	; (8001170 <Uart_isr+0xb0>)
 8001152:	6453      	str	r3, [r2, #68]	; 0x44
    	      huart->Instance->ISR;
 8001154:	687b      	ldr	r3, [r7, #4]
 8001156:	681b      	ldr	r3, [r3, #0]
 8001158:	69db      	ldr	r3, [r3, #28]
    	      huart->Instance->RDR = c;
 800115a:	687b      	ldr	r3, [r7, #4]
 800115c:	681b      	ldr	r3, [r3, #0]
 800115e:	7bba      	ldrb	r2, [r7, #14]
 8001160:	b292      	uxth	r2, r2
 8001162:	849a      	strh	r2, [r3, #36]	; 0x24
    	return;
 8001164:	bf00      	nop
    }
}
 8001166:	3718      	adds	r7, #24
 8001168:	46bd      	mov	sp, r7
 800116a:	bd80      	pop	{r7, pc}
 800116c:	20000304 	.word	0x20000304
 8001170:	200002bc 	.word	0x200002bc

08001174 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8001174:	b580      	push	{r7, lr}
 8001176:	b08a      	sub	sp, #40	; 0x28
 8001178:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800117a:	f107 0314 	add.w	r3, r7, #20
 800117e:	2200      	movs	r2, #0
 8001180:	601a      	str	r2, [r3, #0]
 8001182:	605a      	str	r2, [r3, #4]
 8001184:	609a      	str	r2, [r3, #8]
 8001186:	60da      	str	r2, [r3, #12]
 8001188:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800118a:	4b2b      	ldr	r3, [pc, #172]	; (8001238 <MX_GPIO_Init+0xc4>)
 800118c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800118e:	4a2a      	ldr	r2, [pc, #168]	; (8001238 <MX_GPIO_Init+0xc4>)
 8001190:	f043 0304 	orr.w	r3, r3, #4
 8001194:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001196:	4b28      	ldr	r3, [pc, #160]	; (8001238 <MX_GPIO_Init+0xc4>)
 8001198:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800119a:	f003 0304 	and.w	r3, r3, #4
 800119e:	613b      	str	r3, [r7, #16]
 80011a0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80011a2:	4b25      	ldr	r3, [pc, #148]	; (8001238 <MX_GPIO_Init+0xc4>)
 80011a4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80011a6:	4a24      	ldr	r2, [pc, #144]	; (8001238 <MX_GPIO_Init+0xc4>)
 80011a8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80011ac:	64d3      	str	r3, [r2, #76]	; 0x4c
 80011ae:	4b22      	ldr	r3, [pc, #136]	; (8001238 <MX_GPIO_Init+0xc4>)
 80011b0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80011b2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80011b6:	60fb      	str	r3, [r7, #12]
 80011b8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80011ba:	4b1f      	ldr	r3, [pc, #124]	; (8001238 <MX_GPIO_Init+0xc4>)
 80011bc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80011be:	4a1e      	ldr	r2, [pc, #120]	; (8001238 <MX_GPIO_Init+0xc4>)
 80011c0:	f043 0301 	orr.w	r3, r3, #1
 80011c4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80011c6:	4b1c      	ldr	r3, [pc, #112]	; (8001238 <MX_GPIO_Init+0xc4>)
 80011c8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80011ca:	f003 0301 	and.w	r3, r3, #1
 80011ce:	60bb      	str	r3, [r7, #8]
 80011d0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80011d2:	4b19      	ldr	r3, [pc, #100]	; (8001238 <MX_GPIO_Init+0xc4>)
 80011d4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80011d6:	4a18      	ldr	r2, [pc, #96]	; (8001238 <MX_GPIO_Init+0xc4>)
 80011d8:	f043 0302 	orr.w	r3, r3, #2
 80011dc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80011de:	4b16      	ldr	r3, [pc, #88]	; (8001238 <MX_GPIO_Init+0xc4>)
 80011e0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80011e2:	f003 0302 	and.w	r3, r3, #2
 80011e6:	607b      	str	r3, [r7, #4]
 80011e8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80011ea:	2200      	movs	r2, #0
 80011ec:	2120      	movs	r1, #32
 80011ee:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80011f2:	f000 fe6f 	bl	8001ed4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 80011f6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80011fa:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80011fc:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8001200:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001202:	2300      	movs	r3, #0
 8001204:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001206:	f107 0314 	add.w	r3, r7, #20
 800120a:	4619      	mov	r1, r3
 800120c:	480b      	ldr	r0, [pc, #44]	; (800123c <MX_GPIO_Init+0xc8>)
 800120e:	f000 fcb7 	bl	8001b80 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8001212:	2320      	movs	r3, #32
 8001214:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001216:	2301      	movs	r3, #1
 8001218:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800121a:	2300      	movs	r3, #0
 800121c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800121e:	2300      	movs	r3, #0
 8001220:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8001222:	f107 0314 	add.w	r3, r7, #20
 8001226:	4619      	mov	r1, r3
 8001228:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800122c:	f000 fca8 	bl	8001b80 <HAL_GPIO_Init>

}
 8001230:	bf00      	nop
 8001232:	3728      	adds	r7, #40	; 0x28
 8001234:	46bd      	mov	sp, r7
 8001236:	bd80      	pop	{r7, pc}
 8001238:	40021000 	.word	0x40021000
 800123c:	48000800 	.word	0x48000800

08001240 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8001240:	b580      	push	{r7, lr}
 8001242:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001244:	4b1b      	ldr	r3, [pc, #108]	; (80012b4 <MX_I2C1_Init+0x74>)
 8001246:	4a1c      	ldr	r2, [pc, #112]	; (80012b8 <MX_I2C1_Init+0x78>)
 8001248:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x10909CEC;
 800124a:	4b1a      	ldr	r3, [pc, #104]	; (80012b4 <MX_I2C1_Init+0x74>)
 800124c:	4a1b      	ldr	r2, [pc, #108]	; (80012bc <MX_I2C1_Init+0x7c>)
 800124e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8001250:	4b18      	ldr	r3, [pc, #96]	; (80012b4 <MX_I2C1_Init+0x74>)
 8001252:	2200      	movs	r2, #0
 8001254:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001256:	4b17      	ldr	r3, [pc, #92]	; (80012b4 <MX_I2C1_Init+0x74>)
 8001258:	2201      	movs	r2, #1
 800125a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800125c:	4b15      	ldr	r3, [pc, #84]	; (80012b4 <MX_I2C1_Init+0x74>)
 800125e:	2200      	movs	r2, #0
 8001260:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8001262:	4b14      	ldr	r3, [pc, #80]	; (80012b4 <MX_I2C1_Init+0x74>)
 8001264:	2200      	movs	r2, #0
 8001266:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001268:	4b12      	ldr	r3, [pc, #72]	; (80012b4 <MX_I2C1_Init+0x74>)
 800126a:	2200      	movs	r2, #0
 800126c:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800126e:	4b11      	ldr	r3, [pc, #68]	; (80012b4 <MX_I2C1_Init+0x74>)
 8001270:	2200      	movs	r2, #0
 8001272:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001274:	4b0f      	ldr	r3, [pc, #60]	; (80012b4 <MX_I2C1_Init+0x74>)
 8001276:	2200      	movs	r2, #0
 8001278:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800127a:	480e      	ldr	r0, [pc, #56]	; (80012b4 <MX_I2C1_Init+0x74>)
 800127c:	f000 fe42 	bl	8001f04 <HAL_I2C_Init>
 8001280:	4603      	mov	r3, r0
 8001282:	2b00      	cmp	r3, #0
 8001284:	d001      	beq.n	800128a <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8001286:	f000 f8e5 	bl	8001454 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800128a:	2100      	movs	r1, #0
 800128c:	4809      	ldr	r0, [pc, #36]	; (80012b4 <MX_I2C1_Init+0x74>)
 800128e:	f000 fec8 	bl	8002022 <HAL_I2CEx_ConfigAnalogFilter>
 8001292:	4603      	mov	r3, r0
 8001294:	2b00      	cmp	r3, #0
 8001296:	d001      	beq.n	800129c <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8001298:	f000 f8dc 	bl	8001454 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 800129c:	2100      	movs	r1, #0
 800129e:	4805      	ldr	r0, [pc, #20]	; (80012b4 <MX_I2C1_Init+0x74>)
 80012a0:	f000 ff0a 	bl	80020b8 <HAL_I2CEx_ConfigDigitalFilter>
 80012a4:	4603      	mov	r3, r0
 80012a6:	2b00      	cmp	r3, #0
 80012a8:	d001      	beq.n	80012ae <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 80012aa:	f000 f8d3 	bl	8001454 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80012ae:	bf00      	nop
 80012b0:	bd80      	pop	{r7, pc}
 80012b2:	bf00      	nop
 80012b4:	2000030c 	.word	0x2000030c
 80012b8:	40005400 	.word	0x40005400
 80012bc:	10909cec 	.word	0x10909cec

080012c0 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 80012c0:	b580      	push	{r7, lr}
 80012c2:	b0ac      	sub	sp, #176	; 0xb0
 80012c4:	af00      	add	r7, sp, #0
 80012c6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012c8:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80012cc:	2200      	movs	r2, #0
 80012ce:	601a      	str	r2, [r3, #0]
 80012d0:	605a      	str	r2, [r3, #4]
 80012d2:	609a      	str	r2, [r3, #8]
 80012d4:	60da      	str	r2, [r3, #12]
 80012d6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80012d8:	f107 0314 	add.w	r3, r7, #20
 80012dc:	2288      	movs	r2, #136	; 0x88
 80012de:	2100      	movs	r1, #0
 80012e0:	4618      	mov	r0, r3
 80012e2:	f003 fae3 	bl	80048ac <memset>
  if(i2cHandle->Instance==I2C1)
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	681b      	ldr	r3, [r3, #0]
 80012ea:	4a21      	ldr	r2, [pc, #132]	; (8001370 <HAL_I2C_MspInit+0xb0>)
 80012ec:	4293      	cmp	r3, r2
 80012ee:	d13a      	bne.n	8001366 <HAL_I2C_MspInit+0xa6>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 80012f0:	2340      	movs	r3, #64	; 0x40
 80012f2:	617b      	str	r3, [r7, #20]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 80012f4:	2300      	movs	r3, #0
 80012f6:	667b      	str	r3, [r7, #100]	; 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80012f8:	f107 0314 	add.w	r3, r7, #20
 80012fc:	4618      	mov	r0, r3
 80012fe:	f001 fd8b 	bl	8002e18 <HAL_RCCEx_PeriphCLKConfig>
 8001302:	4603      	mov	r3, r0
 8001304:	2b00      	cmp	r3, #0
 8001306:	d001      	beq.n	800130c <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 8001308:	f000 f8a4 	bl	8001454 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800130c:	4b19      	ldr	r3, [pc, #100]	; (8001374 <HAL_I2C_MspInit+0xb4>)
 800130e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001310:	4a18      	ldr	r2, [pc, #96]	; (8001374 <HAL_I2C_MspInit+0xb4>)
 8001312:	f043 0302 	orr.w	r3, r3, #2
 8001316:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001318:	4b16      	ldr	r3, [pc, #88]	; (8001374 <HAL_I2C_MspInit+0xb4>)
 800131a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800131c:	f003 0302 	and.w	r3, r3, #2
 8001320:	613b      	str	r3, [r7, #16]
 8001322:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001324:	23c0      	movs	r3, #192	; 0xc0
 8001326:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800132a:	2312      	movs	r3, #18
 800132c:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001330:	2300      	movs	r3, #0
 8001332:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001336:	2303      	movs	r3, #3
 8001338:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800133c:	2304      	movs	r3, #4
 800133e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001342:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001346:	4619      	mov	r1, r3
 8001348:	480b      	ldr	r0, [pc, #44]	; (8001378 <HAL_I2C_MspInit+0xb8>)
 800134a:	f000 fc19 	bl	8001b80 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800134e:	4b09      	ldr	r3, [pc, #36]	; (8001374 <HAL_I2C_MspInit+0xb4>)
 8001350:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001352:	4a08      	ldr	r2, [pc, #32]	; (8001374 <HAL_I2C_MspInit+0xb4>)
 8001354:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001358:	6593      	str	r3, [r2, #88]	; 0x58
 800135a:	4b06      	ldr	r3, [pc, #24]	; (8001374 <HAL_I2C_MspInit+0xb4>)
 800135c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800135e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001362:	60fb      	str	r3, [r7, #12]
 8001364:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8001366:	bf00      	nop
 8001368:	37b0      	adds	r7, #176	; 0xb0
 800136a:	46bd      	mov	sp, r7
 800136c:	bd80      	pop	{r7, pc}
 800136e:	bf00      	nop
 8001370:	40005400 	.word	0x40005400
 8001374:	40021000 	.word	0x40021000
 8001378:	48000400 	.word	0x48000400

0800137c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800137c:	b580      	push	{r7, lr}
 800137e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001380:	f000 f9ce 	bl	8001720 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001384:	f000 f814 	bl	80013b0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001388:	f7ff fef4 	bl	8001174 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 800138c:	f000 f90a 	bl	80015a4 <MX_USART2_UART_Init>
  MX_I2C1_Init();
 8001390:	f7ff ff56 	bl	8001240 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */
  ESP_Init("iPhone", "hafsa314", "192.168.0.102");
 8001394:	4a03      	ldr	r2, [pc, #12]	; (80013a4 <main+0x28>)
 8001396:	4904      	ldr	r1, [pc, #16]	; (80013a8 <main+0x2c>)
 8001398:	4804      	ldr	r0, [pc, #16]	; (80013ac <main+0x30>)
 800139a:	f7ff f91f 	bl	80005dc <ESP_Init>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  Server_Start();
 800139e:	f7ff faf5 	bl	800098c <Server_Start>
 80013a2:	e7fc      	b.n	800139e <main+0x22>
 80013a4:	080058bc 	.word	0x080058bc
 80013a8:	080058cc 	.word	0x080058cc
 80013ac:	080058d8 	.word	0x080058d8

080013b0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80013b0:	b580      	push	{r7, lr}
 80013b2:	b096      	sub	sp, #88	; 0x58
 80013b4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80013b6:	f107 0314 	add.w	r3, r7, #20
 80013ba:	2244      	movs	r2, #68	; 0x44
 80013bc:	2100      	movs	r1, #0
 80013be:	4618      	mov	r0, r3
 80013c0:	f003 fa74 	bl	80048ac <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80013c4:	463b      	mov	r3, r7
 80013c6:	2200      	movs	r2, #0
 80013c8:	601a      	str	r2, [r3, #0]
 80013ca:	605a      	str	r2, [r3, #4]
 80013cc:	609a      	str	r2, [r3, #8]
 80013ce:	60da      	str	r2, [r3, #12]
 80013d0:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 80013d2:	f44f 7000 	mov.w	r0, #512	; 0x200
 80013d6:	f000 fec9 	bl	800216c <HAL_PWREx_ControlVoltageScaling>
 80013da:	4603      	mov	r3, r0
 80013dc:	2b00      	cmp	r3, #0
 80013de:	d001      	beq.n	80013e4 <SystemClock_Config+0x34>
  {
    Error_Handler();
 80013e0:	f000 f838 	bl	8001454 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 80013e4:	2310      	movs	r3, #16
 80013e6:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 80013e8:	2301      	movs	r3, #1
 80013ea:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 80013ec:	2300      	movs	r3, #0
 80013ee:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 80013f0:	2360      	movs	r3, #96	; 0x60
 80013f2:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80013f4:	2302      	movs	r3, #2
 80013f6:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 80013f8:	2301      	movs	r3, #1
 80013fa:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 80013fc:	2301      	movs	r3, #1
 80013fe:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 40;
 8001400:	2328      	movs	r3, #40	; 0x28
 8001402:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8001404:	2307      	movs	r3, #7
 8001406:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8001408:	2302      	movs	r3, #2
 800140a:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800140c:	2302      	movs	r3, #2
 800140e:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001410:	f107 0314 	add.w	r3, r7, #20
 8001414:	4618      	mov	r0, r3
 8001416:	f000 feff 	bl	8002218 <HAL_RCC_OscConfig>
 800141a:	4603      	mov	r3, r0
 800141c:	2b00      	cmp	r3, #0
 800141e:	d001      	beq.n	8001424 <SystemClock_Config+0x74>
  {
    Error_Handler();
 8001420:	f000 f818 	bl	8001454 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001424:	230f      	movs	r3, #15
 8001426:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001428:	2303      	movs	r3, #3
 800142a:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800142c:	2300      	movs	r3, #0
 800142e:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001430:	2300      	movs	r3, #0
 8001432:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001434:	2300      	movs	r3, #0
 8001436:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8001438:	463b      	mov	r3, r7
 800143a:	2104      	movs	r1, #4
 800143c:	4618      	mov	r0, r3
 800143e:	f001 fac7 	bl	80029d0 <HAL_RCC_ClockConfig>
 8001442:	4603      	mov	r3, r0
 8001444:	2b00      	cmp	r3, #0
 8001446:	d001      	beq.n	800144c <SystemClock_Config+0x9c>
  {
    Error_Handler();
 8001448:	f000 f804 	bl	8001454 <Error_Handler>
  }
}
 800144c:	bf00      	nop
 800144e:	3758      	adds	r7, #88	; 0x58
 8001450:	46bd      	mov	sp, r7
 8001452:	bd80      	pop	{r7, pc}

08001454 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001454:	b480      	push	{r7}
 8001456:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001458:	b672      	cpsid	i
}
 800145a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800145c:	e7fe      	b.n	800145c <Error_Handler+0x8>
	...

08001460 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001460:	b480      	push	{r7}
 8001462:	b083      	sub	sp, #12
 8001464:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001466:	4b0f      	ldr	r3, [pc, #60]	; (80014a4 <HAL_MspInit+0x44>)
 8001468:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800146a:	4a0e      	ldr	r2, [pc, #56]	; (80014a4 <HAL_MspInit+0x44>)
 800146c:	f043 0301 	orr.w	r3, r3, #1
 8001470:	6613      	str	r3, [r2, #96]	; 0x60
 8001472:	4b0c      	ldr	r3, [pc, #48]	; (80014a4 <HAL_MspInit+0x44>)
 8001474:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001476:	f003 0301 	and.w	r3, r3, #1
 800147a:	607b      	str	r3, [r7, #4]
 800147c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800147e:	4b09      	ldr	r3, [pc, #36]	; (80014a4 <HAL_MspInit+0x44>)
 8001480:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001482:	4a08      	ldr	r2, [pc, #32]	; (80014a4 <HAL_MspInit+0x44>)
 8001484:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001488:	6593      	str	r3, [r2, #88]	; 0x58
 800148a:	4b06      	ldr	r3, [pc, #24]	; (80014a4 <HAL_MspInit+0x44>)
 800148c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800148e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001492:	603b      	str	r3, [r7, #0]
 8001494:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001496:	bf00      	nop
 8001498:	370c      	adds	r7, #12
 800149a:	46bd      	mov	sp, r7
 800149c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014a0:	4770      	bx	lr
 80014a2:	bf00      	nop
 80014a4:	40021000 	.word	0x40021000

080014a8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80014a8:	b480      	push	{r7}
 80014aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80014ac:	e7fe      	b.n	80014ac <NMI_Handler+0x4>

080014ae <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80014ae:	b480      	push	{r7}
 80014b0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80014b2:	e7fe      	b.n	80014b2 <HardFault_Handler+0x4>

080014b4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80014b4:	b480      	push	{r7}
 80014b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80014b8:	e7fe      	b.n	80014b8 <MemManage_Handler+0x4>

080014ba <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80014ba:	b480      	push	{r7}
 80014bc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80014be:	e7fe      	b.n	80014be <BusFault_Handler+0x4>

080014c0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80014c0:	b480      	push	{r7}
 80014c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80014c4:	e7fe      	b.n	80014c4 <UsageFault_Handler+0x4>

080014c6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80014c6:	b480      	push	{r7}
 80014c8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80014ca:	bf00      	nop
 80014cc:	46bd      	mov	sp, r7
 80014ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014d2:	4770      	bx	lr

080014d4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80014d4:	b480      	push	{r7}
 80014d6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80014d8:	bf00      	nop
 80014da:	46bd      	mov	sp, r7
 80014dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014e0:	4770      	bx	lr

080014e2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80014e2:	b480      	push	{r7}
 80014e4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80014e6:	bf00      	nop
 80014e8:	46bd      	mov	sp, r7
 80014ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ee:	4770      	bx	lr

080014f0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80014f0:	b580      	push	{r7, lr}
 80014f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80014f4:	f000 f970 	bl	80017d8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80014f8:	bf00      	nop
 80014fa:	bd80      	pop	{r7, pc}

080014fc <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 80014fc:	b580      	push	{r7, lr}
 80014fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */
  Uart_isr(&huart2);
 8001500:	4803      	ldr	r0, [pc, #12]	; (8001510 <USART2_IRQHandler+0x14>)
 8001502:	f7ff fddd 	bl	80010c0 <Uart_isr>
  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001506:	4802      	ldr	r0, [pc, #8]	; (8001510 <USART2_IRQHandler+0x14>)
 8001508:	f002 f990 	bl	800382c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 800150c:	bf00      	nop
 800150e:	bd80      	pop	{r7, pc}
 8001510:	20000364 	.word	0x20000364

08001514 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001514:	b580      	push	{r7, lr}
 8001516:	b086      	sub	sp, #24
 8001518:	af00      	add	r7, sp, #0
 800151a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800151c:	4a14      	ldr	r2, [pc, #80]	; (8001570 <_sbrk+0x5c>)
 800151e:	4b15      	ldr	r3, [pc, #84]	; (8001574 <_sbrk+0x60>)
 8001520:	1ad3      	subs	r3, r2, r3
 8001522:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001524:	697b      	ldr	r3, [r7, #20]
 8001526:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001528:	4b13      	ldr	r3, [pc, #76]	; (8001578 <_sbrk+0x64>)
 800152a:	681b      	ldr	r3, [r3, #0]
 800152c:	2b00      	cmp	r3, #0
 800152e:	d102      	bne.n	8001536 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001530:	4b11      	ldr	r3, [pc, #68]	; (8001578 <_sbrk+0x64>)
 8001532:	4a12      	ldr	r2, [pc, #72]	; (800157c <_sbrk+0x68>)
 8001534:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001536:	4b10      	ldr	r3, [pc, #64]	; (8001578 <_sbrk+0x64>)
 8001538:	681a      	ldr	r2, [r3, #0]
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	4413      	add	r3, r2
 800153e:	693a      	ldr	r2, [r7, #16]
 8001540:	429a      	cmp	r2, r3
 8001542:	d207      	bcs.n	8001554 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001544:	f003 f988 	bl	8004858 <__errno>
 8001548:	4603      	mov	r3, r0
 800154a:	220c      	movs	r2, #12
 800154c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800154e:	f04f 33ff 	mov.w	r3, #4294967295
 8001552:	e009      	b.n	8001568 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001554:	4b08      	ldr	r3, [pc, #32]	; (8001578 <_sbrk+0x64>)
 8001556:	681b      	ldr	r3, [r3, #0]
 8001558:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800155a:	4b07      	ldr	r3, [pc, #28]	; (8001578 <_sbrk+0x64>)
 800155c:	681a      	ldr	r2, [r3, #0]
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	4413      	add	r3, r2
 8001562:	4a05      	ldr	r2, [pc, #20]	; (8001578 <_sbrk+0x64>)
 8001564:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001566:	68fb      	ldr	r3, [r7, #12]
}
 8001568:	4618      	mov	r0, r3
 800156a:	3718      	adds	r7, #24
 800156c:	46bd      	mov	sp, r7
 800156e:	bd80      	pop	{r7, pc}
 8001570:	20018000 	.word	0x20018000
 8001574:	00000400 	.word	0x00000400
 8001578:	20000360 	.word	0x20000360
 800157c:	20000400 	.word	0x20000400

08001580 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8001580:	b480      	push	{r7}
 8001582:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8001584:	4b06      	ldr	r3, [pc, #24]	; (80015a0 <SystemInit+0x20>)
 8001586:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800158a:	4a05      	ldr	r2, [pc, #20]	; (80015a0 <SystemInit+0x20>)
 800158c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001590:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8001594:	bf00      	nop
 8001596:	46bd      	mov	sp, r7
 8001598:	f85d 7b04 	ldr.w	r7, [sp], #4
 800159c:	4770      	bx	lr
 800159e:	bf00      	nop
 80015a0:	e000ed00 	.word	0xe000ed00

080015a4 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 80015a4:	b580      	push	{r7, lr}
 80015a6:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80015a8:	4b14      	ldr	r3, [pc, #80]	; (80015fc <MX_USART2_UART_Init+0x58>)
 80015aa:	4a15      	ldr	r2, [pc, #84]	; (8001600 <MX_USART2_UART_Init+0x5c>)
 80015ac:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80015ae:	4b13      	ldr	r3, [pc, #76]	; (80015fc <MX_USART2_UART_Init+0x58>)
 80015b0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80015b4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80015b6:	4b11      	ldr	r3, [pc, #68]	; (80015fc <MX_USART2_UART_Init+0x58>)
 80015b8:	2200      	movs	r2, #0
 80015ba:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80015bc:	4b0f      	ldr	r3, [pc, #60]	; (80015fc <MX_USART2_UART_Init+0x58>)
 80015be:	2200      	movs	r2, #0
 80015c0:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80015c2:	4b0e      	ldr	r3, [pc, #56]	; (80015fc <MX_USART2_UART_Init+0x58>)
 80015c4:	2200      	movs	r2, #0
 80015c6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80015c8:	4b0c      	ldr	r3, [pc, #48]	; (80015fc <MX_USART2_UART_Init+0x58>)
 80015ca:	220c      	movs	r2, #12
 80015cc:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80015ce:	4b0b      	ldr	r3, [pc, #44]	; (80015fc <MX_USART2_UART_Init+0x58>)
 80015d0:	2200      	movs	r2, #0
 80015d2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80015d4:	4b09      	ldr	r3, [pc, #36]	; (80015fc <MX_USART2_UART_Init+0x58>)
 80015d6:	2200      	movs	r2, #0
 80015d8:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80015da:	4b08      	ldr	r3, [pc, #32]	; (80015fc <MX_USART2_UART_Init+0x58>)
 80015dc:	2200      	movs	r2, #0
 80015de:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80015e0:	4b06      	ldr	r3, [pc, #24]	; (80015fc <MX_USART2_UART_Init+0x58>)
 80015e2:	2200      	movs	r2, #0
 80015e4:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80015e6:	4805      	ldr	r0, [pc, #20]	; (80015fc <MX_USART2_UART_Init+0x58>)
 80015e8:	f002 f8d2 	bl	8003790 <HAL_UART_Init>
 80015ec:	4603      	mov	r3, r0
 80015ee:	2b00      	cmp	r3, #0
 80015f0:	d001      	beq.n	80015f6 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 80015f2:	f7ff ff2f 	bl	8001454 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80015f6:	bf00      	nop
 80015f8:	bd80      	pop	{r7, pc}
 80015fa:	bf00      	nop
 80015fc:	20000364 	.word	0x20000364
 8001600:	40004400 	.word	0x40004400

08001604 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001604:	b580      	push	{r7, lr}
 8001606:	b0ac      	sub	sp, #176	; 0xb0
 8001608:	af00      	add	r7, sp, #0
 800160a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800160c:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001610:	2200      	movs	r2, #0
 8001612:	601a      	str	r2, [r3, #0]
 8001614:	605a      	str	r2, [r3, #4]
 8001616:	609a      	str	r2, [r3, #8]
 8001618:	60da      	str	r2, [r3, #12]
 800161a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800161c:	f107 0314 	add.w	r3, r7, #20
 8001620:	2288      	movs	r2, #136	; 0x88
 8001622:	2100      	movs	r1, #0
 8001624:	4618      	mov	r0, r3
 8001626:	f003 f941 	bl	80048ac <memset>
  if(uartHandle->Instance==USART2)
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	681b      	ldr	r3, [r3, #0]
 800162e:	4a25      	ldr	r2, [pc, #148]	; (80016c4 <HAL_UART_MspInit+0xc0>)
 8001630:	4293      	cmp	r3, r2
 8001632:	d143      	bne.n	80016bc <HAL_UART_MspInit+0xb8>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8001634:	2302      	movs	r3, #2
 8001636:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8001638:	2300      	movs	r3, #0
 800163a:	653b      	str	r3, [r7, #80]	; 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800163c:	f107 0314 	add.w	r3, r7, #20
 8001640:	4618      	mov	r0, r3
 8001642:	f001 fbe9 	bl	8002e18 <HAL_RCCEx_PeriphCLKConfig>
 8001646:	4603      	mov	r3, r0
 8001648:	2b00      	cmp	r3, #0
 800164a:	d001      	beq.n	8001650 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 800164c:	f7ff ff02 	bl	8001454 <Error_Handler>
    }

    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001650:	4b1d      	ldr	r3, [pc, #116]	; (80016c8 <HAL_UART_MspInit+0xc4>)
 8001652:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001654:	4a1c      	ldr	r2, [pc, #112]	; (80016c8 <HAL_UART_MspInit+0xc4>)
 8001656:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800165a:	6593      	str	r3, [r2, #88]	; 0x58
 800165c:	4b1a      	ldr	r3, [pc, #104]	; (80016c8 <HAL_UART_MspInit+0xc4>)
 800165e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001660:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001664:	613b      	str	r3, [r7, #16]
 8001666:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001668:	4b17      	ldr	r3, [pc, #92]	; (80016c8 <HAL_UART_MspInit+0xc4>)
 800166a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800166c:	4a16      	ldr	r2, [pc, #88]	; (80016c8 <HAL_UART_MspInit+0xc4>)
 800166e:	f043 0301 	orr.w	r3, r3, #1
 8001672:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001674:	4b14      	ldr	r3, [pc, #80]	; (80016c8 <HAL_UART_MspInit+0xc4>)
 8001676:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001678:	f003 0301 	and.w	r3, r3, #1
 800167c:	60fb      	str	r3, [r7, #12]
 800167e:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8001680:	230c      	movs	r3, #12
 8001682:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001686:	2302      	movs	r3, #2
 8001688:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800168c:	2300      	movs	r3, #0
 800168e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001692:	2303      	movs	r3, #3
 8001694:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001698:	2307      	movs	r3, #7
 800169a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800169e:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80016a2:	4619      	mov	r1, r3
 80016a4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80016a8:	f000 fa6a 	bl	8001b80 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 80016ac:	2200      	movs	r2, #0
 80016ae:	2100      	movs	r1, #0
 80016b0:	2026      	movs	r0, #38	; 0x26
 80016b2:	f000 f9b0 	bl	8001a16 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80016b6:	2026      	movs	r0, #38	; 0x26
 80016b8:	f000 f9c9 	bl	8001a4e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 80016bc:	bf00      	nop
 80016be:	37b0      	adds	r7, #176	; 0xb0
 80016c0:	46bd      	mov	sp, r7
 80016c2:	bd80      	pop	{r7, pc}
 80016c4:	40004400 	.word	0x40004400
 80016c8:	40021000 	.word	0x40021000

080016cc <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 80016cc:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001704 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 80016d0:	f7ff ff56 	bl	8001580 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80016d4:	480c      	ldr	r0, [pc, #48]	; (8001708 <LoopForever+0x6>)
  ldr r1, =_edata
 80016d6:	490d      	ldr	r1, [pc, #52]	; (800170c <LoopForever+0xa>)
  ldr r2, =_sidata
 80016d8:	4a0d      	ldr	r2, [pc, #52]	; (8001710 <LoopForever+0xe>)
  movs r3, #0
 80016da:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80016dc:	e002      	b.n	80016e4 <LoopCopyDataInit>

080016de <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80016de:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80016e0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80016e2:	3304      	adds	r3, #4

080016e4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80016e4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80016e6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80016e8:	d3f9      	bcc.n	80016de <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80016ea:	4a0a      	ldr	r2, [pc, #40]	; (8001714 <LoopForever+0x12>)
  ldr r4, =_ebss
 80016ec:	4c0a      	ldr	r4, [pc, #40]	; (8001718 <LoopForever+0x16>)
  movs r3, #0
 80016ee:	2300      	movs	r3, #0
  b LoopFillZerobss
 80016f0:	e001      	b.n	80016f6 <LoopFillZerobss>

080016f2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80016f2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80016f4:	3204      	adds	r2, #4

080016f6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80016f6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80016f8:	d3fb      	bcc.n	80016f2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80016fa:	f003 f8b3 	bl	8004864 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80016fe:	f7ff fe3d 	bl	800137c <main>

08001702 <LoopForever>:

LoopForever:
    b LoopForever
 8001702:	e7fe      	b.n	8001702 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8001704:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8001708:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800170c:	20000084 	.word	0x20000084
  ldr r2, =_sidata
 8001710:	0800596c 	.word	0x0800596c
  ldr r2, =_sbss
 8001714:	20000084 	.word	0x20000084
  ldr r4, =_ebss
 8001718:	200003fc 	.word	0x200003fc

0800171c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 800171c:	e7fe      	b.n	800171c <ADC1_2_IRQHandler>
	...

08001720 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001720:	b580      	push	{r7, lr}
 8001722:	b082      	sub	sp, #8
 8001724:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001726:	2300      	movs	r3, #0
 8001728:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800172a:	4b0c      	ldr	r3, [pc, #48]	; (800175c <HAL_Init+0x3c>)
 800172c:	681b      	ldr	r3, [r3, #0]
 800172e:	4a0b      	ldr	r2, [pc, #44]	; (800175c <HAL_Init+0x3c>)
 8001730:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001734:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001736:	2003      	movs	r0, #3
 8001738:	f000 f962 	bl	8001a00 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800173c:	2000      	movs	r0, #0
 800173e:	f000 f80f 	bl	8001760 <HAL_InitTick>
 8001742:	4603      	mov	r3, r0
 8001744:	2b00      	cmp	r3, #0
 8001746:	d002      	beq.n	800174e <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8001748:	2301      	movs	r3, #1
 800174a:	71fb      	strb	r3, [r7, #7]
 800174c:	e001      	b.n	8001752 <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800174e:	f7ff fe87 	bl	8001460 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001752:	79fb      	ldrb	r3, [r7, #7]
}
 8001754:	4618      	mov	r0, r3
 8001756:	3708      	adds	r7, #8
 8001758:	46bd      	mov	sp, r7
 800175a:	bd80      	pop	{r7, pc}
 800175c:	40022000 	.word	0x40022000

08001760 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001760:	b580      	push	{r7, lr}
 8001762:	b084      	sub	sp, #16
 8001764:	af00      	add	r7, sp, #0
 8001766:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001768:	2300      	movs	r3, #0
 800176a:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 800176c:	4b17      	ldr	r3, [pc, #92]	; (80017cc <HAL_InitTick+0x6c>)
 800176e:	781b      	ldrb	r3, [r3, #0]
 8001770:	2b00      	cmp	r3, #0
 8001772:	d023      	beq.n	80017bc <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8001774:	4b16      	ldr	r3, [pc, #88]	; (80017d0 <HAL_InitTick+0x70>)
 8001776:	681a      	ldr	r2, [r3, #0]
 8001778:	4b14      	ldr	r3, [pc, #80]	; (80017cc <HAL_InitTick+0x6c>)
 800177a:	781b      	ldrb	r3, [r3, #0]
 800177c:	4619      	mov	r1, r3
 800177e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001782:	fbb3 f3f1 	udiv	r3, r3, r1
 8001786:	fbb2 f3f3 	udiv	r3, r2, r3
 800178a:	4618      	mov	r0, r3
 800178c:	f000 f96d 	bl	8001a6a <HAL_SYSTICK_Config>
 8001790:	4603      	mov	r3, r0
 8001792:	2b00      	cmp	r3, #0
 8001794:	d10f      	bne.n	80017b6 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	2b0f      	cmp	r3, #15
 800179a:	d809      	bhi.n	80017b0 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800179c:	2200      	movs	r2, #0
 800179e:	6879      	ldr	r1, [r7, #4]
 80017a0:	f04f 30ff 	mov.w	r0, #4294967295
 80017a4:	f000 f937 	bl	8001a16 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80017a8:	4a0a      	ldr	r2, [pc, #40]	; (80017d4 <HAL_InitTick+0x74>)
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	6013      	str	r3, [r2, #0]
 80017ae:	e007      	b.n	80017c0 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 80017b0:	2301      	movs	r3, #1
 80017b2:	73fb      	strb	r3, [r7, #15]
 80017b4:	e004      	b.n	80017c0 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 80017b6:	2301      	movs	r3, #1
 80017b8:	73fb      	strb	r3, [r7, #15]
 80017ba:	e001      	b.n	80017c0 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 80017bc:	2301      	movs	r3, #1
 80017be:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80017c0:	7bfb      	ldrb	r3, [r7, #15]
}
 80017c2:	4618      	mov	r0, r3
 80017c4:	3710      	adds	r7, #16
 80017c6:	46bd      	mov	sp, r7
 80017c8:	bd80      	pop	{r7, pc}
 80017ca:	bf00      	nop
 80017cc:	2000001c 	.word	0x2000001c
 80017d0:	20000014 	.word	0x20000014
 80017d4:	20000018 	.word	0x20000018

080017d8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80017d8:	b480      	push	{r7}
 80017da:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80017dc:	4b06      	ldr	r3, [pc, #24]	; (80017f8 <HAL_IncTick+0x20>)
 80017de:	781b      	ldrb	r3, [r3, #0]
 80017e0:	461a      	mov	r2, r3
 80017e2:	4b06      	ldr	r3, [pc, #24]	; (80017fc <HAL_IncTick+0x24>)
 80017e4:	681b      	ldr	r3, [r3, #0]
 80017e6:	4413      	add	r3, r2
 80017e8:	4a04      	ldr	r2, [pc, #16]	; (80017fc <HAL_IncTick+0x24>)
 80017ea:	6013      	str	r3, [r2, #0]
}
 80017ec:	bf00      	nop
 80017ee:	46bd      	mov	sp, r7
 80017f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017f4:	4770      	bx	lr
 80017f6:	bf00      	nop
 80017f8:	2000001c 	.word	0x2000001c
 80017fc:	200003e8 	.word	0x200003e8

08001800 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001800:	b480      	push	{r7}
 8001802:	af00      	add	r7, sp, #0
  return uwTick;
 8001804:	4b03      	ldr	r3, [pc, #12]	; (8001814 <HAL_GetTick+0x14>)
 8001806:	681b      	ldr	r3, [r3, #0]
}
 8001808:	4618      	mov	r0, r3
 800180a:	46bd      	mov	sp, r7
 800180c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001810:	4770      	bx	lr
 8001812:	bf00      	nop
 8001814:	200003e8 	.word	0x200003e8

08001818 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001818:	b580      	push	{r7, lr}
 800181a:	b084      	sub	sp, #16
 800181c:	af00      	add	r7, sp, #0
 800181e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001820:	f7ff ffee 	bl	8001800 <HAL_GetTick>
 8001824:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 800182a:	68fb      	ldr	r3, [r7, #12]
 800182c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001830:	d005      	beq.n	800183e <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8001832:	4b0a      	ldr	r3, [pc, #40]	; (800185c <HAL_Delay+0x44>)
 8001834:	781b      	ldrb	r3, [r3, #0]
 8001836:	461a      	mov	r2, r3
 8001838:	68fb      	ldr	r3, [r7, #12]
 800183a:	4413      	add	r3, r2
 800183c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800183e:	bf00      	nop
 8001840:	f7ff ffde 	bl	8001800 <HAL_GetTick>
 8001844:	4602      	mov	r2, r0
 8001846:	68bb      	ldr	r3, [r7, #8]
 8001848:	1ad3      	subs	r3, r2, r3
 800184a:	68fa      	ldr	r2, [r7, #12]
 800184c:	429a      	cmp	r2, r3
 800184e:	d8f7      	bhi.n	8001840 <HAL_Delay+0x28>
  {
  }
}
 8001850:	bf00      	nop
 8001852:	bf00      	nop
 8001854:	3710      	adds	r7, #16
 8001856:	46bd      	mov	sp, r7
 8001858:	bd80      	pop	{r7, pc}
 800185a:	bf00      	nop
 800185c:	2000001c 	.word	0x2000001c

08001860 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001860:	b480      	push	{r7}
 8001862:	b085      	sub	sp, #20
 8001864:	af00      	add	r7, sp, #0
 8001866:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	f003 0307 	and.w	r3, r3, #7
 800186e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001870:	4b0c      	ldr	r3, [pc, #48]	; (80018a4 <__NVIC_SetPriorityGrouping+0x44>)
 8001872:	68db      	ldr	r3, [r3, #12]
 8001874:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001876:	68ba      	ldr	r2, [r7, #8]
 8001878:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800187c:	4013      	ands	r3, r2
 800187e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001880:	68fb      	ldr	r3, [r7, #12]
 8001882:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001884:	68bb      	ldr	r3, [r7, #8]
 8001886:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001888:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800188c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001890:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001892:	4a04      	ldr	r2, [pc, #16]	; (80018a4 <__NVIC_SetPriorityGrouping+0x44>)
 8001894:	68bb      	ldr	r3, [r7, #8]
 8001896:	60d3      	str	r3, [r2, #12]
}
 8001898:	bf00      	nop
 800189a:	3714      	adds	r7, #20
 800189c:	46bd      	mov	sp, r7
 800189e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018a2:	4770      	bx	lr
 80018a4:	e000ed00 	.word	0xe000ed00

080018a8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80018a8:	b480      	push	{r7}
 80018aa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80018ac:	4b04      	ldr	r3, [pc, #16]	; (80018c0 <__NVIC_GetPriorityGrouping+0x18>)
 80018ae:	68db      	ldr	r3, [r3, #12]
 80018b0:	0a1b      	lsrs	r3, r3, #8
 80018b2:	f003 0307 	and.w	r3, r3, #7
}
 80018b6:	4618      	mov	r0, r3
 80018b8:	46bd      	mov	sp, r7
 80018ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018be:	4770      	bx	lr
 80018c0:	e000ed00 	.word	0xe000ed00

080018c4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80018c4:	b480      	push	{r7}
 80018c6:	b083      	sub	sp, #12
 80018c8:	af00      	add	r7, sp, #0
 80018ca:	4603      	mov	r3, r0
 80018cc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80018ce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018d2:	2b00      	cmp	r3, #0
 80018d4:	db0b      	blt.n	80018ee <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80018d6:	79fb      	ldrb	r3, [r7, #7]
 80018d8:	f003 021f 	and.w	r2, r3, #31
 80018dc:	4907      	ldr	r1, [pc, #28]	; (80018fc <__NVIC_EnableIRQ+0x38>)
 80018de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018e2:	095b      	lsrs	r3, r3, #5
 80018e4:	2001      	movs	r0, #1
 80018e6:	fa00 f202 	lsl.w	r2, r0, r2
 80018ea:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80018ee:	bf00      	nop
 80018f0:	370c      	adds	r7, #12
 80018f2:	46bd      	mov	sp, r7
 80018f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018f8:	4770      	bx	lr
 80018fa:	bf00      	nop
 80018fc:	e000e100 	.word	0xe000e100

08001900 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001900:	b480      	push	{r7}
 8001902:	b083      	sub	sp, #12
 8001904:	af00      	add	r7, sp, #0
 8001906:	4603      	mov	r3, r0
 8001908:	6039      	str	r1, [r7, #0]
 800190a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800190c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001910:	2b00      	cmp	r3, #0
 8001912:	db0a      	blt.n	800192a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001914:	683b      	ldr	r3, [r7, #0]
 8001916:	b2da      	uxtb	r2, r3
 8001918:	490c      	ldr	r1, [pc, #48]	; (800194c <__NVIC_SetPriority+0x4c>)
 800191a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800191e:	0112      	lsls	r2, r2, #4
 8001920:	b2d2      	uxtb	r2, r2
 8001922:	440b      	add	r3, r1
 8001924:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001928:	e00a      	b.n	8001940 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800192a:	683b      	ldr	r3, [r7, #0]
 800192c:	b2da      	uxtb	r2, r3
 800192e:	4908      	ldr	r1, [pc, #32]	; (8001950 <__NVIC_SetPriority+0x50>)
 8001930:	79fb      	ldrb	r3, [r7, #7]
 8001932:	f003 030f 	and.w	r3, r3, #15
 8001936:	3b04      	subs	r3, #4
 8001938:	0112      	lsls	r2, r2, #4
 800193a:	b2d2      	uxtb	r2, r2
 800193c:	440b      	add	r3, r1
 800193e:	761a      	strb	r2, [r3, #24]
}
 8001940:	bf00      	nop
 8001942:	370c      	adds	r7, #12
 8001944:	46bd      	mov	sp, r7
 8001946:	f85d 7b04 	ldr.w	r7, [sp], #4
 800194a:	4770      	bx	lr
 800194c:	e000e100 	.word	0xe000e100
 8001950:	e000ed00 	.word	0xe000ed00

08001954 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001954:	b480      	push	{r7}
 8001956:	b089      	sub	sp, #36	; 0x24
 8001958:	af00      	add	r7, sp, #0
 800195a:	60f8      	str	r0, [r7, #12]
 800195c:	60b9      	str	r1, [r7, #8]
 800195e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001960:	68fb      	ldr	r3, [r7, #12]
 8001962:	f003 0307 	and.w	r3, r3, #7
 8001966:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001968:	69fb      	ldr	r3, [r7, #28]
 800196a:	f1c3 0307 	rsb	r3, r3, #7
 800196e:	2b04      	cmp	r3, #4
 8001970:	bf28      	it	cs
 8001972:	2304      	movcs	r3, #4
 8001974:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001976:	69fb      	ldr	r3, [r7, #28]
 8001978:	3304      	adds	r3, #4
 800197a:	2b06      	cmp	r3, #6
 800197c:	d902      	bls.n	8001984 <NVIC_EncodePriority+0x30>
 800197e:	69fb      	ldr	r3, [r7, #28]
 8001980:	3b03      	subs	r3, #3
 8001982:	e000      	b.n	8001986 <NVIC_EncodePriority+0x32>
 8001984:	2300      	movs	r3, #0
 8001986:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001988:	f04f 32ff 	mov.w	r2, #4294967295
 800198c:	69bb      	ldr	r3, [r7, #24]
 800198e:	fa02 f303 	lsl.w	r3, r2, r3
 8001992:	43da      	mvns	r2, r3
 8001994:	68bb      	ldr	r3, [r7, #8]
 8001996:	401a      	ands	r2, r3
 8001998:	697b      	ldr	r3, [r7, #20]
 800199a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800199c:	f04f 31ff 	mov.w	r1, #4294967295
 80019a0:	697b      	ldr	r3, [r7, #20]
 80019a2:	fa01 f303 	lsl.w	r3, r1, r3
 80019a6:	43d9      	mvns	r1, r3
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80019ac:	4313      	orrs	r3, r2
         );
}
 80019ae:	4618      	mov	r0, r3
 80019b0:	3724      	adds	r7, #36	; 0x24
 80019b2:	46bd      	mov	sp, r7
 80019b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019b8:	4770      	bx	lr
	...

080019bc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80019bc:	b580      	push	{r7, lr}
 80019be:	b082      	sub	sp, #8
 80019c0:	af00      	add	r7, sp, #0
 80019c2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	3b01      	subs	r3, #1
 80019c8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80019cc:	d301      	bcc.n	80019d2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80019ce:	2301      	movs	r3, #1
 80019d0:	e00f      	b.n	80019f2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80019d2:	4a0a      	ldr	r2, [pc, #40]	; (80019fc <SysTick_Config+0x40>)
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	3b01      	subs	r3, #1
 80019d8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80019da:	210f      	movs	r1, #15
 80019dc:	f04f 30ff 	mov.w	r0, #4294967295
 80019e0:	f7ff ff8e 	bl	8001900 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80019e4:	4b05      	ldr	r3, [pc, #20]	; (80019fc <SysTick_Config+0x40>)
 80019e6:	2200      	movs	r2, #0
 80019e8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80019ea:	4b04      	ldr	r3, [pc, #16]	; (80019fc <SysTick_Config+0x40>)
 80019ec:	2207      	movs	r2, #7
 80019ee:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80019f0:	2300      	movs	r3, #0
}
 80019f2:	4618      	mov	r0, r3
 80019f4:	3708      	adds	r7, #8
 80019f6:	46bd      	mov	sp, r7
 80019f8:	bd80      	pop	{r7, pc}
 80019fa:	bf00      	nop
 80019fc:	e000e010 	.word	0xe000e010

08001a00 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001a00:	b580      	push	{r7, lr}
 8001a02:	b082      	sub	sp, #8
 8001a04:	af00      	add	r7, sp, #0
 8001a06:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001a08:	6878      	ldr	r0, [r7, #4]
 8001a0a:	f7ff ff29 	bl	8001860 <__NVIC_SetPriorityGrouping>
}
 8001a0e:	bf00      	nop
 8001a10:	3708      	adds	r7, #8
 8001a12:	46bd      	mov	sp, r7
 8001a14:	bd80      	pop	{r7, pc}

08001a16 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001a16:	b580      	push	{r7, lr}
 8001a18:	b086      	sub	sp, #24
 8001a1a:	af00      	add	r7, sp, #0
 8001a1c:	4603      	mov	r3, r0
 8001a1e:	60b9      	str	r1, [r7, #8]
 8001a20:	607a      	str	r2, [r7, #4]
 8001a22:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001a24:	2300      	movs	r3, #0
 8001a26:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001a28:	f7ff ff3e 	bl	80018a8 <__NVIC_GetPriorityGrouping>
 8001a2c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001a2e:	687a      	ldr	r2, [r7, #4]
 8001a30:	68b9      	ldr	r1, [r7, #8]
 8001a32:	6978      	ldr	r0, [r7, #20]
 8001a34:	f7ff ff8e 	bl	8001954 <NVIC_EncodePriority>
 8001a38:	4602      	mov	r2, r0
 8001a3a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001a3e:	4611      	mov	r1, r2
 8001a40:	4618      	mov	r0, r3
 8001a42:	f7ff ff5d 	bl	8001900 <__NVIC_SetPriority>
}
 8001a46:	bf00      	nop
 8001a48:	3718      	adds	r7, #24
 8001a4a:	46bd      	mov	sp, r7
 8001a4c:	bd80      	pop	{r7, pc}

08001a4e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001a4e:	b580      	push	{r7, lr}
 8001a50:	b082      	sub	sp, #8
 8001a52:	af00      	add	r7, sp, #0
 8001a54:	4603      	mov	r3, r0
 8001a56:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001a58:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a5c:	4618      	mov	r0, r3
 8001a5e:	f7ff ff31 	bl	80018c4 <__NVIC_EnableIRQ>
}
 8001a62:	bf00      	nop
 8001a64:	3708      	adds	r7, #8
 8001a66:	46bd      	mov	sp, r7
 8001a68:	bd80      	pop	{r7, pc}

08001a6a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001a6a:	b580      	push	{r7, lr}
 8001a6c:	b082      	sub	sp, #8
 8001a6e:	af00      	add	r7, sp, #0
 8001a70:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001a72:	6878      	ldr	r0, [r7, #4]
 8001a74:	f7ff ffa2 	bl	80019bc <SysTick_Config>
 8001a78:	4603      	mov	r3, r0
}
 8001a7a:	4618      	mov	r0, r3
 8001a7c:	3708      	adds	r7, #8
 8001a7e:	46bd      	mov	sp, r7
 8001a80:	bd80      	pop	{r7, pc}

08001a82 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001a82:	b480      	push	{r7}
 8001a84:	b085      	sub	sp, #20
 8001a86:	af00      	add	r7, sp, #0
 8001a88:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001a8a:	2300      	movs	r3, #0
 8001a8c:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8001a94:	b2db      	uxtb	r3, r3
 8001a96:	2b02      	cmp	r3, #2
 8001a98:	d008      	beq.n	8001aac <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	2204      	movs	r2, #4
 8001a9e:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	2200      	movs	r2, #0
 8001aa4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001aa8:	2301      	movs	r3, #1
 8001aaa:	e022      	b.n	8001af2 <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	681b      	ldr	r3, [r3, #0]
 8001ab0:	681a      	ldr	r2, [r3, #0]
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	681b      	ldr	r3, [r3, #0]
 8001ab6:	f022 020e 	bic.w	r2, r2, #14
 8001aba:	601a      	str	r2, [r3, #0]
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	681b      	ldr	r3, [r3, #0]
 8001ac0:	681a      	ldr	r2, [r3, #0]
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	681b      	ldr	r3, [r3, #0]
 8001ac6:	f022 0201 	bic.w	r2, r2, #1
 8001aca:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ad0:	f003 021c 	and.w	r2, r3, #28
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ad8:	2101      	movs	r1, #1
 8001ada:	fa01 f202 	lsl.w	r2, r1, r2
 8001ade:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	2201      	movs	r2, #1
 8001ae4:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	2200      	movs	r2, #0
 8001aec:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return status;
 8001af0:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 8001af2:	4618      	mov	r0, r3
 8001af4:	3714      	adds	r7, #20
 8001af6:	46bd      	mov	sp, r7
 8001af8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001afc:	4770      	bx	lr

08001afe <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001afe:	b580      	push	{r7, lr}
 8001b00:	b084      	sub	sp, #16
 8001b02:	af00      	add	r7, sp, #0
 8001b04:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001b06:	2300      	movs	r3, #0
 8001b08:	73fb      	strb	r3, [r7, #15]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8001b10:	b2db      	uxtb	r3, r3
 8001b12:	2b02      	cmp	r3, #2
 8001b14:	d005      	beq.n	8001b22 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	2204      	movs	r2, #4
 8001b1a:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8001b1c:	2301      	movs	r3, #1
 8001b1e:	73fb      	strb	r3, [r7, #15]
 8001b20:	e029      	b.n	8001b76 <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	681b      	ldr	r3, [r3, #0]
 8001b26:	681a      	ldr	r2, [r3, #0]
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	681b      	ldr	r3, [r3, #0]
 8001b2c:	f022 020e 	bic.w	r2, r2, #14
 8001b30:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	681b      	ldr	r3, [r3, #0]
 8001b36:	681a      	ldr	r2, [r3, #0]
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	681b      	ldr	r3, [r3, #0]
 8001b3c:	f022 0201 	bic.w	r2, r2, #1
 8001b40:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b46:	f003 021c 	and.w	r2, r3, #28
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b4e:	2101      	movs	r1, #1
 8001b50:	fa01 f202 	lsl.w	r2, r1, r2
 8001b54:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	2201      	movs	r2, #1
 8001b5a:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	2200      	movs	r2, #0
 8001b62:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001b6a:	2b00      	cmp	r3, #0
 8001b6c:	d003      	beq.n	8001b76 <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001b72:	6878      	ldr	r0, [r7, #4]
 8001b74:	4798      	blx	r3
    }
  }
  return status;
 8001b76:	7bfb      	ldrb	r3, [r7, #15]
}
 8001b78:	4618      	mov	r0, r3
 8001b7a:	3710      	adds	r7, #16
 8001b7c:	46bd      	mov	sp, r7
 8001b7e:	bd80      	pop	{r7, pc}

08001b80 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001b80:	b480      	push	{r7}
 8001b82:	b087      	sub	sp, #28
 8001b84:	af00      	add	r7, sp, #0
 8001b86:	6078      	str	r0, [r7, #4]
 8001b88:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001b8a:	2300      	movs	r3, #0
 8001b8c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001b8e:	e17f      	b.n	8001e90 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001b90:	683b      	ldr	r3, [r7, #0]
 8001b92:	681a      	ldr	r2, [r3, #0]
 8001b94:	2101      	movs	r1, #1
 8001b96:	697b      	ldr	r3, [r7, #20]
 8001b98:	fa01 f303 	lsl.w	r3, r1, r3
 8001b9c:	4013      	ands	r3, r2
 8001b9e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001ba0:	68fb      	ldr	r3, [r7, #12]
 8001ba2:	2b00      	cmp	r3, #0
 8001ba4:	f000 8171 	beq.w	8001e8a <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001ba8:	683b      	ldr	r3, [r7, #0]
 8001baa:	685b      	ldr	r3, [r3, #4]
 8001bac:	f003 0303 	and.w	r3, r3, #3
 8001bb0:	2b01      	cmp	r3, #1
 8001bb2:	d005      	beq.n	8001bc0 <HAL_GPIO_Init+0x40>
 8001bb4:	683b      	ldr	r3, [r7, #0]
 8001bb6:	685b      	ldr	r3, [r3, #4]
 8001bb8:	f003 0303 	and.w	r3, r3, #3
 8001bbc:	2b02      	cmp	r3, #2
 8001bbe:	d130      	bne.n	8001c22 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	689b      	ldr	r3, [r3, #8]
 8001bc4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001bc6:	697b      	ldr	r3, [r7, #20]
 8001bc8:	005b      	lsls	r3, r3, #1
 8001bca:	2203      	movs	r2, #3
 8001bcc:	fa02 f303 	lsl.w	r3, r2, r3
 8001bd0:	43db      	mvns	r3, r3
 8001bd2:	693a      	ldr	r2, [r7, #16]
 8001bd4:	4013      	ands	r3, r2
 8001bd6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001bd8:	683b      	ldr	r3, [r7, #0]
 8001bda:	68da      	ldr	r2, [r3, #12]
 8001bdc:	697b      	ldr	r3, [r7, #20]
 8001bde:	005b      	lsls	r3, r3, #1
 8001be0:	fa02 f303 	lsl.w	r3, r2, r3
 8001be4:	693a      	ldr	r2, [r7, #16]
 8001be6:	4313      	orrs	r3, r2
 8001be8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	693a      	ldr	r2, [r7, #16]
 8001bee:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	685b      	ldr	r3, [r3, #4]
 8001bf4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001bf6:	2201      	movs	r2, #1
 8001bf8:	697b      	ldr	r3, [r7, #20]
 8001bfa:	fa02 f303 	lsl.w	r3, r2, r3
 8001bfe:	43db      	mvns	r3, r3
 8001c00:	693a      	ldr	r2, [r7, #16]
 8001c02:	4013      	ands	r3, r2
 8001c04:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001c06:	683b      	ldr	r3, [r7, #0]
 8001c08:	685b      	ldr	r3, [r3, #4]
 8001c0a:	091b      	lsrs	r3, r3, #4
 8001c0c:	f003 0201 	and.w	r2, r3, #1
 8001c10:	697b      	ldr	r3, [r7, #20]
 8001c12:	fa02 f303 	lsl.w	r3, r2, r3
 8001c16:	693a      	ldr	r2, [r7, #16]
 8001c18:	4313      	orrs	r3, r2
 8001c1a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	693a      	ldr	r2, [r7, #16]
 8001c20:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8001c22:	683b      	ldr	r3, [r7, #0]
 8001c24:	685b      	ldr	r3, [r3, #4]
 8001c26:	f003 0303 	and.w	r3, r3, #3
 8001c2a:	2b03      	cmp	r3, #3
 8001c2c:	d118      	bne.n	8001c60 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c32:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8001c34:	2201      	movs	r2, #1
 8001c36:	697b      	ldr	r3, [r7, #20]
 8001c38:	fa02 f303 	lsl.w	r3, r2, r3
 8001c3c:	43db      	mvns	r3, r3
 8001c3e:	693a      	ldr	r2, [r7, #16]
 8001c40:	4013      	ands	r3, r2
 8001c42:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 8001c44:	683b      	ldr	r3, [r7, #0]
 8001c46:	685b      	ldr	r3, [r3, #4]
 8001c48:	08db      	lsrs	r3, r3, #3
 8001c4a:	f003 0201 	and.w	r2, r3, #1
 8001c4e:	697b      	ldr	r3, [r7, #20]
 8001c50:	fa02 f303 	lsl.w	r3, r2, r3
 8001c54:	693a      	ldr	r2, [r7, #16]
 8001c56:	4313      	orrs	r3, r2
 8001c58:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	693a      	ldr	r2, [r7, #16]
 8001c5e:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001c60:	683b      	ldr	r3, [r7, #0]
 8001c62:	685b      	ldr	r3, [r3, #4]
 8001c64:	f003 0303 	and.w	r3, r3, #3
 8001c68:	2b03      	cmp	r3, #3
 8001c6a:	d017      	beq.n	8001c9c <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	68db      	ldr	r3, [r3, #12]
 8001c70:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001c72:	697b      	ldr	r3, [r7, #20]
 8001c74:	005b      	lsls	r3, r3, #1
 8001c76:	2203      	movs	r2, #3
 8001c78:	fa02 f303 	lsl.w	r3, r2, r3
 8001c7c:	43db      	mvns	r3, r3
 8001c7e:	693a      	ldr	r2, [r7, #16]
 8001c80:	4013      	ands	r3, r2
 8001c82:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001c84:	683b      	ldr	r3, [r7, #0]
 8001c86:	689a      	ldr	r2, [r3, #8]
 8001c88:	697b      	ldr	r3, [r7, #20]
 8001c8a:	005b      	lsls	r3, r3, #1
 8001c8c:	fa02 f303 	lsl.w	r3, r2, r3
 8001c90:	693a      	ldr	r2, [r7, #16]
 8001c92:	4313      	orrs	r3, r2
 8001c94:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	693a      	ldr	r2, [r7, #16]
 8001c9a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001c9c:	683b      	ldr	r3, [r7, #0]
 8001c9e:	685b      	ldr	r3, [r3, #4]
 8001ca0:	f003 0303 	and.w	r3, r3, #3
 8001ca4:	2b02      	cmp	r3, #2
 8001ca6:	d123      	bne.n	8001cf0 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001ca8:	697b      	ldr	r3, [r7, #20]
 8001caa:	08da      	lsrs	r2, r3, #3
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	3208      	adds	r2, #8
 8001cb0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001cb4:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001cb6:	697b      	ldr	r3, [r7, #20]
 8001cb8:	f003 0307 	and.w	r3, r3, #7
 8001cbc:	009b      	lsls	r3, r3, #2
 8001cbe:	220f      	movs	r2, #15
 8001cc0:	fa02 f303 	lsl.w	r3, r2, r3
 8001cc4:	43db      	mvns	r3, r3
 8001cc6:	693a      	ldr	r2, [r7, #16]
 8001cc8:	4013      	ands	r3, r2
 8001cca:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001ccc:	683b      	ldr	r3, [r7, #0]
 8001cce:	691a      	ldr	r2, [r3, #16]
 8001cd0:	697b      	ldr	r3, [r7, #20]
 8001cd2:	f003 0307 	and.w	r3, r3, #7
 8001cd6:	009b      	lsls	r3, r3, #2
 8001cd8:	fa02 f303 	lsl.w	r3, r2, r3
 8001cdc:	693a      	ldr	r2, [r7, #16]
 8001cde:	4313      	orrs	r3, r2
 8001ce0:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001ce2:	697b      	ldr	r3, [r7, #20]
 8001ce4:	08da      	lsrs	r2, r3, #3
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	3208      	adds	r2, #8
 8001cea:	6939      	ldr	r1, [r7, #16]
 8001cec:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	681b      	ldr	r3, [r3, #0]
 8001cf4:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001cf6:	697b      	ldr	r3, [r7, #20]
 8001cf8:	005b      	lsls	r3, r3, #1
 8001cfa:	2203      	movs	r2, #3
 8001cfc:	fa02 f303 	lsl.w	r3, r2, r3
 8001d00:	43db      	mvns	r3, r3
 8001d02:	693a      	ldr	r2, [r7, #16]
 8001d04:	4013      	ands	r3, r2
 8001d06:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001d08:	683b      	ldr	r3, [r7, #0]
 8001d0a:	685b      	ldr	r3, [r3, #4]
 8001d0c:	f003 0203 	and.w	r2, r3, #3
 8001d10:	697b      	ldr	r3, [r7, #20]
 8001d12:	005b      	lsls	r3, r3, #1
 8001d14:	fa02 f303 	lsl.w	r3, r2, r3
 8001d18:	693a      	ldr	r2, [r7, #16]
 8001d1a:	4313      	orrs	r3, r2
 8001d1c:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	693a      	ldr	r2, [r7, #16]
 8001d22:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001d24:	683b      	ldr	r3, [r7, #0]
 8001d26:	685b      	ldr	r3, [r3, #4]
 8001d28:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001d2c:	2b00      	cmp	r3, #0
 8001d2e:	f000 80ac 	beq.w	8001e8a <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001d32:	4b5f      	ldr	r3, [pc, #380]	; (8001eb0 <HAL_GPIO_Init+0x330>)
 8001d34:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001d36:	4a5e      	ldr	r2, [pc, #376]	; (8001eb0 <HAL_GPIO_Init+0x330>)
 8001d38:	f043 0301 	orr.w	r3, r3, #1
 8001d3c:	6613      	str	r3, [r2, #96]	; 0x60
 8001d3e:	4b5c      	ldr	r3, [pc, #368]	; (8001eb0 <HAL_GPIO_Init+0x330>)
 8001d40:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001d42:	f003 0301 	and.w	r3, r3, #1
 8001d46:	60bb      	str	r3, [r7, #8]
 8001d48:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001d4a:	4a5a      	ldr	r2, [pc, #360]	; (8001eb4 <HAL_GPIO_Init+0x334>)
 8001d4c:	697b      	ldr	r3, [r7, #20]
 8001d4e:	089b      	lsrs	r3, r3, #2
 8001d50:	3302      	adds	r3, #2
 8001d52:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001d56:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001d58:	697b      	ldr	r3, [r7, #20]
 8001d5a:	f003 0303 	and.w	r3, r3, #3
 8001d5e:	009b      	lsls	r3, r3, #2
 8001d60:	220f      	movs	r2, #15
 8001d62:	fa02 f303 	lsl.w	r3, r2, r3
 8001d66:	43db      	mvns	r3, r3
 8001d68:	693a      	ldr	r2, [r7, #16]
 8001d6a:	4013      	ands	r3, r2
 8001d6c:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001d74:	d025      	beq.n	8001dc2 <HAL_GPIO_Init+0x242>
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	4a4f      	ldr	r2, [pc, #316]	; (8001eb8 <HAL_GPIO_Init+0x338>)
 8001d7a:	4293      	cmp	r3, r2
 8001d7c:	d01f      	beq.n	8001dbe <HAL_GPIO_Init+0x23e>
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	4a4e      	ldr	r2, [pc, #312]	; (8001ebc <HAL_GPIO_Init+0x33c>)
 8001d82:	4293      	cmp	r3, r2
 8001d84:	d019      	beq.n	8001dba <HAL_GPIO_Init+0x23a>
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	4a4d      	ldr	r2, [pc, #308]	; (8001ec0 <HAL_GPIO_Init+0x340>)
 8001d8a:	4293      	cmp	r3, r2
 8001d8c:	d013      	beq.n	8001db6 <HAL_GPIO_Init+0x236>
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	4a4c      	ldr	r2, [pc, #304]	; (8001ec4 <HAL_GPIO_Init+0x344>)
 8001d92:	4293      	cmp	r3, r2
 8001d94:	d00d      	beq.n	8001db2 <HAL_GPIO_Init+0x232>
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	4a4b      	ldr	r2, [pc, #300]	; (8001ec8 <HAL_GPIO_Init+0x348>)
 8001d9a:	4293      	cmp	r3, r2
 8001d9c:	d007      	beq.n	8001dae <HAL_GPIO_Init+0x22e>
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	4a4a      	ldr	r2, [pc, #296]	; (8001ecc <HAL_GPIO_Init+0x34c>)
 8001da2:	4293      	cmp	r3, r2
 8001da4:	d101      	bne.n	8001daa <HAL_GPIO_Init+0x22a>
 8001da6:	2306      	movs	r3, #6
 8001da8:	e00c      	b.n	8001dc4 <HAL_GPIO_Init+0x244>
 8001daa:	2307      	movs	r3, #7
 8001dac:	e00a      	b.n	8001dc4 <HAL_GPIO_Init+0x244>
 8001dae:	2305      	movs	r3, #5
 8001db0:	e008      	b.n	8001dc4 <HAL_GPIO_Init+0x244>
 8001db2:	2304      	movs	r3, #4
 8001db4:	e006      	b.n	8001dc4 <HAL_GPIO_Init+0x244>
 8001db6:	2303      	movs	r3, #3
 8001db8:	e004      	b.n	8001dc4 <HAL_GPIO_Init+0x244>
 8001dba:	2302      	movs	r3, #2
 8001dbc:	e002      	b.n	8001dc4 <HAL_GPIO_Init+0x244>
 8001dbe:	2301      	movs	r3, #1
 8001dc0:	e000      	b.n	8001dc4 <HAL_GPIO_Init+0x244>
 8001dc2:	2300      	movs	r3, #0
 8001dc4:	697a      	ldr	r2, [r7, #20]
 8001dc6:	f002 0203 	and.w	r2, r2, #3
 8001dca:	0092      	lsls	r2, r2, #2
 8001dcc:	4093      	lsls	r3, r2
 8001dce:	693a      	ldr	r2, [r7, #16]
 8001dd0:	4313      	orrs	r3, r2
 8001dd2:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001dd4:	4937      	ldr	r1, [pc, #220]	; (8001eb4 <HAL_GPIO_Init+0x334>)
 8001dd6:	697b      	ldr	r3, [r7, #20]
 8001dd8:	089b      	lsrs	r3, r3, #2
 8001dda:	3302      	adds	r3, #2
 8001ddc:	693a      	ldr	r2, [r7, #16]
 8001dde:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001de2:	4b3b      	ldr	r3, [pc, #236]	; (8001ed0 <HAL_GPIO_Init+0x350>)
 8001de4:	689b      	ldr	r3, [r3, #8]
 8001de6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001de8:	68fb      	ldr	r3, [r7, #12]
 8001dea:	43db      	mvns	r3, r3
 8001dec:	693a      	ldr	r2, [r7, #16]
 8001dee:	4013      	ands	r3, r2
 8001df0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001df2:	683b      	ldr	r3, [r7, #0]
 8001df4:	685b      	ldr	r3, [r3, #4]
 8001df6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001dfa:	2b00      	cmp	r3, #0
 8001dfc:	d003      	beq.n	8001e06 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8001dfe:	693a      	ldr	r2, [r7, #16]
 8001e00:	68fb      	ldr	r3, [r7, #12]
 8001e02:	4313      	orrs	r3, r2
 8001e04:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001e06:	4a32      	ldr	r2, [pc, #200]	; (8001ed0 <HAL_GPIO_Init+0x350>)
 8001e08:	693b      	ldr	r3, [r7, #16]
 8001e0a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001e0c:	4b30      	ldr	r3, [pc, #192]	; (8001ed0 <HAL_GPIO_Init+0x350>)
 8001e0e:	68db      	ldr	r3, [r3, #12]
 8001e10:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001e12:	68fb      	ldr	r3, [r7, #12]
 8001e14:	43db      	mvns	r3, r3
 8001e16:	693a      	ldr	r2, [r7, #16]
 8001e18:	4013      	ands	r3, r2
 8001e1a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001e1c:	683b      	ldr	r3, [r7, #0]
 8001e1e:	685b      	ldr	r3, [r3, #4]
 8001e20:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001e24:	2b00      	cmp	r3, #0
 8001e26:	d003      	beq.n	8001e30 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8001e28:	693a      	ldr	r2, [r7, #16]
 8001e2a:	68fb      	ldr	r3, [r7, #12]
 8001e2c:	4313      	orrs	r3, r2
 8001e2e:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001e30:	4a27      	ldr	r2, [pc, #156]	; (8001ed0 <HAL_GPIO_Init+0x350>)
 8001e32:	693b      	ldr	r3, [r7, #16]
 8001e34:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8001e36:	4b26      	ldr	r3, [pc, #152]	; (8001ed0 <HAL_GPIO_Init+0x350>)
 8001e38:	685b      	ldr	r3, [r3, #4]
 8001e3a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001e3c:	68fb      	ldr	r3, [r7, #12]
 8001e3e:	43db      	mvns	r3, r3
 8001e40:	693a      	ldr	r2, [r7, #16]
 8001e42:	4013      	ands	r3, r2
 8001e44:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001e46:	683b      	ldr	r3, [r7, #0]
 8001e48:	685b      	ldr	r3, [r3, #4]
 8001e4a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e4e:	2b00      	cmp	r3, #0
 8001e50:	d003      	beq.n	8001e5a <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8001e52:	693a      	ldr	r2, [r7, #16]
 8001e54:	68fb      	ldr	r3, [r7, #12]
 8001e56:	4313      	orrs	r3, r2
 8001e58:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001e5a:	4a1d      	ldr	r2, [pc, #116]	; (8001ed0 <HAL_GPIO_Init+0x350>)
 8001e5c:	693b      	ldr	r3, [r7, #16]
 8001e5e:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8001e60:	4b1b      	ldr	r3, [pc, #108]	; (8001ed0 <HAL_GPIO_Init+0x350>)
 8001e62:	681b      	ldr	r3, [r3, #0]
 8001e64:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001e66:	68fb      	ldr	r3, [r7, #12]
 8001e68:	43db      	mvns	r3, r3
 8001e6a:	693a      	ldr	r2, [r7, #16]
 8001e6c:	4013      	ands	r3, r2
 8001e6e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001e70:	683b      	ldr	r3, [r7, #0]
 8001e72:	685b      	ldr	r3, [r3, #4]
 8001e74:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001e78:	2b00      	cmp	r3, #0
 8001e7a:	d003      	beq.n	8001e84 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8001e7c:	693a      	ldr	r2, [r7, #16]
 8001e7e:	68fb      	ldr	r3, [r7, #12]
 8001e80:	4313      	orrs	r3, r2
 8001e82:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001e84:	4a12      	ldr	r2, [pc, #72]	; (8001ed0 <HAL_GPIO_Init+0x350>)
 8001e86:	693b      	ldr	r3, [r7, #16]
 8001e88:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001e8a:	697b      	ldr	r3, [r7, #20]
 8001e8c:	3301      	adds	r3, #1
 8001e8e:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001e90:	683b      	ldr	r3, [r7, #0]
 8001e92:	681a      	ldr	r2, [r3, #0]
 8001e94:	697b      	ldr	r3, [r7, #20]
 8001e96:	fa22 f303 	lsr.w	r3, r2, r3
 8001e9a:	2b00      	cmp	r3, #0
 8001e9c:	f47f ae78 	bne.w	8001b90 <HAL_GPIO_Init+0x10>
  }
}
 8001ea0:	bf00      	nop
 8001ea2:	bf00      	nop
 8001ea4:	371c      	adds	r7, #28
 8001ea6:	46bd      	mov	sp, r7
 8001ea8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eac:	4770      	bx	lr
 8001eae:	bf00      	nop
 8001eb0:	40021000 	.word	0x40021000
 8001eb4:	40010000 	.word	0x40010000
 8001eb8:	48000400 	.word	0x48000400
 8001ebc:	48000800 	.word	0x48000800
 8001ec0:	48000c00 	.word	0x48000c00
 8001ec4:	48001000 	.word	0x48001000
 8001ec8:	48001400 	.word	0x48001400
 8001ecc:	48001800 	.word	0x48001800
 8001ed0:	40010400 	.word	0x40010400

08001ed4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001ed4:	b480      	push	{r7}
 8001ed6:	b083      	sub	sp, #12
 8001ed8:	af00      	add	r7, sp, #0
 8001eda:	6078      	str	r0, [r7, #4]
 8001edc:	460b      	mov	r3, r1
 8001ede:	807b      	strh	r3, [r7, #2]
 8001ee0:	4613      	mov	r3, r2
 8001ee2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001ee4:	787b      	ldrb	r3, [r7, #1]
 8001ee6:	2b00      	cmp	r3, #0
 8001ee8:	d003      	beq.n	8001ef2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001eea:	887a      	ldrh	r2, [r7, #2]
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001ef0:	e002      	b.n	8001ef8 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001ef2:	887a      	ldrh	r2, [r7, #2]
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001ef8:	bf00      	nop
 8001efa:	370c      	adds	r7, #12
 8001efc:	46bd      	mov	sp, r7
 8001efe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f02:	4770      	bx	lr

08001f04 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001f04:	b580      	push	{r7, lr}
 8001f06:	b082      	sub	sp, #8
 8001f08:	af00      	add	r7, sp, #0
 8001f0a:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	2b00      	cmp	r3, #0
 8001f10:	d101      	bne.n	8001f16 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001f12:	2301      	movs	r3, #1
 8001f14:	e081      	b.n	800201a <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001f1c:	b2db      	uxtb	r3, r3
 8001f1e:	2b00      	cmp	r3, #0
 8001f20:	d106      	bne.n	8001f30 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	2200      	movs	r2, #0
 8001f26:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8001f2a:	6878      	ldr	r0, [r7, #4]
 8001f2c:	f7ff f9c8 	bl	80012c0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	2224      	movs	r2, #36	; 0x24
 8001f34:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	681b      	ldr	r3, [r3, #0]
 8001f3c:	681a      	ldr	r2, [r3, #0]
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	681b      	ldr	r3, [r3, #0]
 8001f42:	f022 0201 	bic.w	r2, r2, #1
 8001f46:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	685a      	ldr	r2, [r3, #4]
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001f54:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	681b      	ldr	r3, [r3, #0]
 8001f5a:	689a      	ldr	r2, [r3, #8]
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	681b      	ldr	r3, [r3, #0]
 8001f60:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001f64:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	68db      	ldr	r3, [r3, #12]
 8001f6a:	2b01      	cmp	r3, #1
 8001f6c:	d107      	bne.n	8001f7e <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	689a      	ldr	r2, [r3, #8]
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	681b      	ldr	r3, [r3, #0]
 8001f76:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001f7a:	609a      	str	r2, [r3, #8]
 8001f7c:	e006      	b.n	8001f8c <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	689a      	ldr	r2, [r3, #8]
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	681b      	ldr	r3, [r3, #0]
 8001f86:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8001f8a:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	68db      	ldr	r3, [r3, #12]
 8001f90:	2b02      	cmp	r3, #2
 8001f92:	d104      	bne.n	8001f9e <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	681b      	ldr	r3, [r3, #0]
 8001f98:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001f9c:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	681b      	ldr	r3, [r3, #0]
 8001fa2:	685b      	ldr	r3, [r3, #4]
 8001fa4:	687a      	ldr	r2, [r7, #4]
 8001fa6:	6812      	ldr	r2, [r2, #0]
 8001fa8:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001fac:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001fb0:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	681b      	ldr	r3, [r3, #0]
 8001fb6:	68da      	ldr	r2, [r3, #12]
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001fc0:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	691a      	ldr	r2, [r3, #16]
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	695b      	ldr	r3, [r3, #20]
 8001fca:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	699b      	ldr	r3, [r3, #24]
 8001fd2:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	681b      	ldr	r3, [r3, #0]
 8001fd8:	430a      	orrs	r2, r1
 8001fda:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	69d9      	ldr	r1, [r3, #28]
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	6a1a      	ldr	r2, [r3, #32]
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	681b      	ldr	r3, [r3, #0]
 8001fe8:	430a      	orrs	r2, r1
 8001fea:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	681b      	ldr	r3, [r3, #0]
 8001ff0:	681a      	ldr	r2, [r3, #0]
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	681b      	ldr	r3, [r3, #0]
 8001ff6:	f042 0201 	orr.w	r2, r2, #1
 8001ffa:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	2200      	movs	r2, #0
 8002000:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	2220      	movs	r2, #32
 8002006:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	2200      	movs	r2, #0
 800200e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	2200      	movs	r2, #0
 8002014:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8002018:	2300      	movs	r3, #0
}
 800201a:	4618      	mov	r0, r3
 800201c:	3708      	adds	r7, #8
 800201e:	46bd      	mov	sp, r7
 8002020:	bd80      	pop	{r7, pc}

08002022 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8002022:	b480      	push	{r7}
 8002024:	b083      	sub	sp, #12
 8002026:	af00      	add	r7, sp, #0
 8002028:	6078      	str	r0, [r7, #4]
 800202a:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002032:	b2db      	uxtb	r3, r3
 8002034:	2b20      	cmp	r3, #32
 8002036:	d138      	bne.n	80020aa <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800203e:	2b01      	cmp	r3, #1
 8002040:	d101      	bne.n	8002046 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8002042:	2302      	movs	r3, #2
 8002044:	e032      	b.n	80020ac <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	2201      	movs	r2, #1
 800204a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	2224      	movs	r2, #36	; 0x24
 8002052:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	681b      	ldr	r3, [r3, #0]
 800205a:	681a      	ldr	r2, [r3, #0]
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	681b      	ldr	r3, [r3, #0]
 8002060:	f022 0201 	bic.w	r2, r2, #1
 8002064:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	681b      	ldr	r3, [r3, #0]
 800206a:	681a      	ldr	r2, [r3, #0]
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	681b      	ldr	r3, [r3, #0]
 8002070:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8002074:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	681b      	ldr	r3, [r3, #0]
 800207a:	6819      	ldr	r1, [r3, #0]
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	683a      	ldr	r2, [r7, #0]
 8002082:	430a      	orrs	r2, r1
 8002084:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	681b      	ldr	r3, [r3, #0]
 800208a:	681a      	ldr	r2, [r3, #0]
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	f042 0201 	orr.w	r2, r2, #1
 8002094:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	2220      	movs	r2, #32
 800209a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	2200      	movs	r2, #0
 80020a2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80020a6:	2300      	movs	r3, #0
 80020a8:	e000      	b.n	80020ac <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80020aa:	2302      	movs	r3, #2
  }
}
 80020ac:	4618      	mov	r0, r3
 80020ae:	370c      	adds	r7, #12
 80020b0:	46bd      	mov	sp, r7
 80020b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020b6:	4770      	bx	lr

080020b8 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80020b8:	b480      	push	{r7}
 80020ba:	b085      	sub	sp, #20
 80020bc:	af00      	add	r7, sp, #0
 80020be:	6078      	str	r0, [r7, #4]
 80020c0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80020c8:	b2db      	uxtb	r3, r3
 80020ca:	2b20      	cmp	r3, #32
 80020cc:	d139      	bne.n	8002142 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80020d4:	2b01      	cmp	r3, #1
 80020d6:	d101      	bne.n	80020dc <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80020d8:	2302      	movs	r3, #2
 80020da:	e033      	b.n	8002144 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	2201      	movs	r2, #1
 80020e0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	2224      	movs	r2, #36	; 0x24
 80020e8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	681b      	ldr	r3, [r3, #0]
 80020f0:	681a      	ldr	r2, [r3, #0]
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	f022 0201 	bic.w	r2, r2, #1
 80020fa:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	681b      	ldr	r3, [r3, #0]
 8002102:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8002104:	68fb      	ldr	r3, [r7, #12]
 8002106:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800210a:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800210c:	683b      	ldr	r3, [r7, #0]
 800210e:	021b      	lsls	r3, r3, #8
 8002110:	68fa      	ldr	r2, [r7, #12]
 8002112:	4313      	orrs	r3, r2
 8002114:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	68fa      	ldr	r2, [r7, #12]
 800211c:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	681a      	ldr	r2, [r3, #0]
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	681b      	ldr	r3, [r3, #0]
 8002128:	f042 0201 	orr.w	r2, r2, #1
 800212c:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	2220      	movs	r2, #32
 8002132:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	2200      	movs	r2, #0
 800213a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800213e:	2300      	movs	r3, #0
 8002140:	e000      	b.n	8002144 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8002142:	2302      	movs	r3, #2
  }
}
 8002144:	4618      	mov	r0, r3
 8002146:	3714      	adds	r7, #20
 8002148:	46bd      	mov	sp, r7
 800214a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800214e:	4770      	bx	lr

08002150 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8002150:	b480      	push	{r7}
 8002152:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8002154:	4b04      	ldr	r3, [pc, #16]	; (8002168 <HAL_PWREx_GetVoltageRange+0x18>)
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 800215c:	4618      	mov	r0, r3
 800215e:	46bd      	mov	sp, r7
 8002160:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002164:	4770      	bx	lr
 8002166:	bf00      	nop
 8002168:	40007000 	.word	0x40007000

0800216c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 800216c:	b480      	push	{r7}
 800216e:	b085      	sub	sp, #20
 8002170:	af00      	add	r7, sp, #0
 8002172:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800217a:	d130      	bne.n	80021de <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 800217c:	4b23      	ldr	r3, [pc, #140]	; (800220c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002184:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002188:	d038      	beq.n	80021fc <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800218a:	4b20      	ldr	r3, [pc, #128]	; (800220c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002192:	4a1e      	ldr	r2, [pc, #120]	; (800220c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002194:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002198:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800219a:	4b1d      	ldr	r3, [pc, #116]	; (8002210 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	2232      	movs	r2, #50	; 0x32
 80021a0:	fb02 f303 	mul.w	r3, r2, r3
 80021a4:	4a1b      	ldr	r2, [pc, #108]	; (8002214 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 80021a6:	fba2 2303 	umull	r2, r3, r2, r3
 80021aa:	0c9b      	lsrs	r3, r3, #18
 80021ac:	3301      	adds	r3, #1
 80021ae:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80021b0:	e002      	b.n	80021b8 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 80021b2:	68fb      	ldr	r3, [r7, #12]
 80021b4:	3b01      	subs	r3, #1
 80021b6:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80021b8:	4b14      	ldr	r3, [pc, #80]	; (800220c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80021ba:	695b      	ldr	r3, [r3, #20]
 80021bc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80021c0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80021c4:	d102      	bne.n	80021cc <HAL_PWREx_ControlVoltageScaling+0x60>
 80021c6:	68fb      	ldr	r3, [r7, #12]
 80021c8:	2b00      	cmp	r3, #0
 80021ca:	d1f2      	bne.n	80021b2 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80021cc:	4b0f      	ldr	r3, [pc, #60]	; (800220c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80021ce:	695b      	ldr	r3, [r3, #20]
 80021d0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80021d4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80021d8:	d110      	bne.n	80021fc <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 80021da:	2303      	movs	r3, #3
 80021dc:	e00f      	b.n	80021fe <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 80021de:	4b0b      	ldr	r3, [pc, #44]	; (800220c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80021e0:	681b      	ldr	r3, [r3, #0]
 80021e2:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80021e6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80021ea:	d007      	beq.n	80021fc <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80021ec:	4b07      	ldr	r3, [pc, #28]	; (800220c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80021f4:	4a05      	ldr	r2, [pc, #20]	; (800220c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80021f6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80021fa:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 80021fc:	2300      	movs	r3, #0
}
 80021fe:	4618      	mov	r0, r3
 8002200:	3714      	adds	r7, #20
 8002202:	46bd      	mov	sp, r7
 8002204:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002208:	4770      	bx	lr
 800220a:	bf00      	nop
 800220c:	40007000 	.word	0x40007000
 8002210:	20000014 	.word	0x20000014
 8002214:	431bde83 	.word	0x431bde83

08002218 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002218:	b580      	push	{r7, lr}
 800221a:	b088      	sub	sp, #32
 800221c:	af00      	add	r7, sp, #0
 800221e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	2b00      	cmp	r3, #0
 8002224:	d101      	bne.n	800222a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002226:	2301      	movs	r3, #1
 8002228:	e3ca      	b.n	80029c0 <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800222a:	4b97      	ldr	r3, [pc, #604]	; (8002488 <HAL_RCC_OscConfig+0x270>)
 800222c:	689b      	ldr	r3, [r3, #8]
 800222e:	f003 030c 	and.w	r3, r3, #12
 8002232:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002234:	4b94      	ldr	r3, [pc, #592]	; (8002488 <HAL_RCC_OscConfig+0x270>)
 8002236:	68db      	ldr	r3, [r3, #12]
 8002238:	f003 0303 	and.w	r3, r3, #3
 800223c:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	681b      	ldr	r3, [r3, #0]
 8002242:	f003 0310 	and.w	r3, r3, #16
 8002246:	2b00      	cmp	r3, #0
 8002248:	f000 80e4 	beq.w	8002414 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800224c:	69bb      	ldr	r3, [r7, #24]
 800224e:	2b00      	cmp	r3, #0
 8002250:	d007      	beq.n	8002262 <HAL_RCC_OscConfig+0x4a>
 8002252:	69bb      	ldr	r3, [r7, #24]
 8002254:	2b0c      	cmp	r3, #12
 8002256:	f040 808b 	bne.w	8002370 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 800225a:	697b      	ldr	r3, [r7, #20]
 800225c:	2b01      	cmp	r3, #1
 800225e:	f040 8087 	bne.w	8002370 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002262:	4b89      	ldr	r3, [pc, #548]	; (8002488 <HAL_RCC_OscConfig+0x270>)
 8002264:	681b      	ldr	r3, [r3, #0]
 8002266:	f003 0302 	and.w	r3, r3, #2
 800226a:	2b00      	cmp	r3, #0
 800226c:	d005      	beq.n	800227a <HAL_RCC_OscConfig+0x62>
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	699b      	ldr	r3, [r3, #24]
 8002272:	2b00      	cmp	r3, #0
 8002274:	d101      	bne.n	800227a <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8002276:	2301      	movs	r3, #1
 8002278:	e3a2      	b.n	80029c0 <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	6a1a      	ldr	r2, [r3, #32]
 800227e:	4b82      	ldr	r3, [pc, #520]	; (8002488 <HAL_RCC_OscConfig+0x270>)
 8002280:	681b      	ldr	r3, [r3, #0]
 8002282:	f003 0308 	and.w	r3, r3, #8
 8002286:	2b00      	cmp	r3, #0
 8002288:	d004      	beq.n	8002294 <HAL_RCC_OscConfig+0x7c>
 800228a:	4b7f      	ldr	r3, [pc, #508]	; (8002488 <HAL_RCC_OscConfig+0x270>)
 800228c:	681b      	ldr	r3, [r3, #0]
 800228e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002292:	e005      	b.n	80022a0 <HAL_RCC_OscConfig+0x88>
 8002294:	4b7c      	ldr	r3, [pc, #496]	; (8002488 <HAL_RCC_OscConfig+0x270>)
 8002296:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800229a:	091b      	lsrs	r3, r3, #4
 800229c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80022a0:	4293      	cmp	r3, r2
 80022a2:	d223      	bcs.n	80022ec <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	6a1b      	ldr	r3, [r3, #32]
 80022a8:	4618      	mov	r0, r3
 80022aa:	f000 fd55 	bl	8002d58 <RCC_SetFlashLatencyFromMSIRange>
 80022ae:	4603      	mov	r3, r0
 80022b0:	2b00      	cmp	r3, #0
 80022b2:	d001      	beq.n	80022b8 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 80022b4:	2301      	movs	r3, #1
 80022b6:	e383      	b.n	80029c0 <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80022b8:	4b73      	ldr	r3, [pc, #460]	; (8002488 <HAL_RCC_OscConfig+0x270>)
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	4a72      	ldr	r2, [pc, #456]	; (8002488 <HAL_RCC_OscConfig+0x270>)
 80022be:	f043 0308 	orr.w	r3, r3, #8
 80022c2:	6013      	str	r3, [r2, #0]
 80022c4:	4b70      	ldr	r3, [pc, #448]	; (8002488 <HAL_RCC_OscConfig+0x270>)
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	6a1b      	ldr	r3, [r3, #32]
 80022d0:	496d      	ldr	r1, [pc, #436]	; (8002488 <HAL_RCC_OscConfig+0x270>)
 80022d2:	4313      	orrs	r3, r2
 80022d4:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80022d6:	4b6c      	ldr	r3, [pc, #432]	; (8002488 <HAL_RCC_OscConfig+0x270>)
 80022d8:	685b      	ldr	r3, [r3, #4]
 80022da:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	69db      	ldr	r3, [r3, #28]
 80022e2:	021b      	lsls	r3, r3, #8
 80022e4:	4968      	ldr	r1, [pc, #416]	; (8002488 <HAL_RCC_OscConfig+0x270>)
 80022e6:	4313      	orrs	r3, r2
 80022e8:	604b      	str	r3, [r1, #4]
 80022ea:	e025      	b.n	8002338 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80022ec:	4b66      	ldr	r3, [pc, #408]	; (8002488 <HAL_RCC_OscConfig+0x270>)
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	4a65      	ldr	r2, [pc, #404]	; (8002488 <HAL_RCC_OscConfig+0x270>)
 80022f2:	f043 0308 	orr.w	r3, r3, #8
 80022f6:	6013      	str	r3, [r2, #0]
 80022f8:	4b63      	ldr	r3, [pc, #396]	; (8002488 <HAL_RCC_OscConfig+0x270>)
 80022fa:	681b      	ldr	r3, [r3, #0]
 80022fc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	6a1b      	ldr	r3, [r3, #32]
 8002304:	4960      	ldr	r1, [pc, #384]	; (8002488 <HAL_RCC_OscConfig+0x270>)
 8002306:	4313      	orrs	r3, r2
 8002308:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800230a:	4b5f      	ldr	r3, [pc, #380]	; (8002488 <HAL_RCC_OscConfig+0x270>)
 800230c:	685b      	ldr	r3, [r3, #4]
 800230e:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	69db      	ldr	r3, [r3, #28]
 8002316:	021b      	lsls	r3, r3, #8
 8002318:	495b      	ldr	r1, [pc, #364]	; (8002488 <HAL_RCC_OscConfig+0x270>)
 800231a:	4313      	orrs	r3, r2
 800231c:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 800231e:	69bb      	ldr	r3, [r7, #24]
 8002320:	2b00      	cmp	r3, #0
 8002322:	d109      	bne.n	8002338 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	6a1b      	ldr	r3, [r3, #32]
 8002328:	4618      	mov	r0, r3
 800232a:	f000 fd15 	bl	8002d58 <RCC_SetFlashLatencyFromMSIRange>
 800232e:	4603      	mov	r3, r0
 8002330:	2b00      	cmp	r3, #0
 8002332:	d001      	beq.n	8002338 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8002334:	2301      	movs	r3, #1
 8002336:	e343      	b.n	80029c0 <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002338:	f000 fc4a 	bl	8002bd0 <HAL_RCC_GetSysClockFreq>
 800233c:	4602      	mov	r2, r0
 800233e:	4b52      	ldr	r3, [pc, #328]	; (8002488 <HAL_RCC_OscConfig+0x270>)
 8002340:	689b      	ldr	r3, [r3, #8]
 8002342:	091b      	lsrs	r3, r3, #4
 8002344:	f003 030f 	and.w	r3, r3, #15
 8002348:	4950      	ldr	r1, [pc, #320]	; (800248c <HAL_RCC_OscConfig+0x274>)
 800234a:	5ccb      	ldrb	r3, [r1, r3]
 800234c:	f003 031f 	and.w	r3, r3, #31
 8002350:	fa22 f303 	lsr.w	r3, r2, r3
 8002354:	4a4e      	ldr	r2, [pc, #312]	; (8002490 <HAL_RCC_OscConfig+0x278>)
 8002356:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8002358:	4b4e      	ldr	r3, [pc, #312]	; (8002494 <HAL_RCC_OscConfig+0x27c>)
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	4618      	mov	r0, r3
 800235e:	f7ff f9ff 	bl	8001760 <HAL_InitTick>
 8002362:	4603      	mov	r3, r0
 8002364:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8002366:	7bfb      	ldrb	r3, [r7, #15]
 8002368:	2b00      	cmp	r3, #0
 800236a:	d052      	beq.n	8002412 <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 800236c:	7bfb      	ldrb	r3, [r7, #15]
 800236e:	e327      	b.n	80029c0 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	699b      	ldr	r3, [r3, #24]
 8002374:	2b00      	cmp	r3, #0
 8002376:	d032      	beq.n	80023de <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8002378:	4b43      	ldr	r3, [pc, #268]	; (8002488 <HAL_RCC_OscConfig+0x270>)
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	4a42      	ldr	r2, [pc, #264]	; (8002488 <HAL_RCC_OscConfig+0x270>)
 800237e:	f043 0301 	orr.w	r3, r3, #1
 8002382:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002384:	f7ff fa3c 	bl	8001800 <HAL_GetTick>
 8002388:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800238a:	e008      	b.n	800239e <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800238c:	f7ff fa38 	bl	8001800 <HAL_GetTick>
 8002390:	4602      	mov	r2, r0
 8002392:	693b      	ldr	r3, [r7, #16]
 8002394:	1ad3      	subs	r3, r2, r3
 8002396:	2b02      	cmp	r3, #2
 8002398:	d901      	bls.n	800239e <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 800239a:	2303      	movs	r3, #3
 800239c:	e310      	b.n	80029c0 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800239e:	4b3a      	ldr	r3, [pc, #232]	; (8002488 <HAL_RCC_OscConfig+0x270>)
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	f003 0302 	and.w	r3, r3, #2
 80023a6:	2b00      	cmp	r3, #0
 80023a8:	d0f0      	beq.n	800238c <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80023aa:	4b37      	ldr	r3, [pc, #220]	; (8002488 <HAL_RCC_OscConfig+0x270>)
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	4a36      	ldr	r2, [pc, #216]	; (8002488 <HAL_RCC_OscConfig+0x270>)
 80023b0:	f043 0308 	orr.w	r3, r3, #8
 80023b4:	6013      	str	r3, [r2, #0]
 80023b6:	4b34      	ldr	r3, [pc, #208]	; (8002488 <HAL_RCC_OscConfig+0x270>)
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	6a1b      	ldr	r3, [r3, #32]
 80023c2:	4931      	ldr	r1, [pc, #196]	; (8002488 <HAL_RCC_OscConfig+0x270>)
 80023c4:	4313      	orrs	r3, r2
 80023c6:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80023c8:	4b2f      	ldr	r3, [pc, #188]	; (8002488 <HAL_RCC_OscConfig+0x270>)
 80023ca:	685b      	ldr	r3, [r3, #4]
 80023cc:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	69db      	ldr	r3, [r3, #28]
 80023d4:	021b      	lsls	r3, r3, #8
 80023d6:	492c      	ldr	r1, [pc, #176]	; (8002488 <HAL_RCC_OscConfig+0x270>)
 80023d8:	4313      	orrs	r3, r2
 80023da:	604b      	str	r3, [r1, #4]
 80023dc:	e01a      	b.n	8002414 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80023de:	4b2a      	ldr	r3, [pc, #168]	; (8002488 <HAL_RCC_OscConfig+0x270>)
 80023e0:	681b      	ldr	r3, [r3, #0]
 80023e2:	4a29      	ldr	r2, [pc, #164]	; (8002488 <HAL_RCC_OscConfig+0x270>)
 80023e4:	f023 0301 	bic.w	r3, r3, #1
 80023e8:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80023ea:	f7ff fa09 	bl	8001800 <HAL_GetTick>
 80023ee:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80023f0:	e008      	b.n	8002404 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80023f2:	f7ff fa05 	bl	8001800 <HAL_GetTick>
 80023f6:	4602      	mov	r2, r0
 80023f8:	693b      	ldr	r3, [r7, #16]
 80023fa:	1ad3      	subs	r3, r2, r3
 80023fc:	2b02      	cmp	r3, #2
 80023fe:	d901      	bls.n	8002404 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8002400:	2303      	movs	r3, #3
 8002402:	e2dd      	b.n	80029c0 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002404:	4b20      	ldr	r3, [pc, #128]	; (8002488 <HAL_RCC_OscConfig+0x270>)
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	f003 0302 	and.w	r3, r3, #2
 800240c:	2b00      	cmp	r3, #0
 800240e:	d1f0      	bne.n	80023f2 <HAL_RCC_OscConfig+0x1da>
 8002410:	e000      	b.n	8002414 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002412:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	f003 0301 	and.w	r3, r3, #1
 800241c:	2b00      	cmp	r3, #0
 800241e:	d074      	beq.n	800250a <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8002420:	69bb      	ldr	r3, [r7, #24]
 8002422:	2b08      	cmp	r3, #8
 8002424:	d005      	beq.n	8002432 <HAL_RCC_OscConfig+0x21a>
 8002426:	69bb      	ldr	r3, [r7, #24]
 8002428:	2b0c      	cmp	r3, #12
 800242a:	d10e      	bne.n	800244a <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 800242c:	697b      	ldr	r3, [r7, #20]
 800242e:	2b03      	cmp	r3, #3
 8002430:	d10b      	bne.n	800244a <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002432:	4b15      	ldr	r3, [pc, #84]	; (8002488 <HAL_RCC_OscConfig+0x270>)
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800243a:	2b00      	cmp	r3, #0
 800243c:	d064      	beq.n	8002508 <HAL_RCC_OscConfig+0x2f0>
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	685b      	ldr	r3, [r3, #4]
 8002442:	2b00      	cmp	r3, #0
 8002444:	d160      	bne.n	8002508 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8002446:	2301      	movs	r3, #1
 8002448:	e2ba      	b.n	80029c0 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	685b      	ldr	r3, [r3, #4]
 800244e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002452:	d106      	bne.n	8002462 <HAL_RCC_OscConfig+0x24a>
 8002454:	4b0c      	ldr	r3, [pc, #48]	; (8002488 <HAL_RCC_OscConfig+0x270>)
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	4a0b      	ldr	r2, [pc, #44]	; (8002488 <HAL_RCC_OscConfig+0x270>)
 800245a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800245e:	6013      	str	r3, [r2, #0]
 8002460:	e026      	b.n	80024b0 <HAL_RCC_OscConfig+0x298>
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	685b      	ldr	r3, [r3, #4]
 8002466:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800246a:	d115      	bne.n	8002498 <HAL_RCC_OscConfig+0x280>
 800246c:	4b06      	ldr	r3, [pc, #24]	; (8002488 <HAL_RCC_OscConfig+0x270>)
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	4a05      	ldr	r2, [pc, #20]	; (8002488 <HAL_RCC_OscConfig+0x270>)
 8002472:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002476:	6013      	str	r3, [r2, #0]
 8002478:	4b03      	ldr	r3, [pc, #12]	; (8002488 <HAL_RCC_OscConfig+0x270>)
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	4a02      	ldr	r2, [pc, #8]	; (8002488 <HAL_RCC_OscConfig+0x270>)
 800247e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002482:	6013      	str	r3, [r2, #0]
 8002484:	e014      	b.n	80024b0 <HAL_RCC_OscConfig+0x298>
 8002486:	bf00      	nop
 8002488:	40021000 	.word	0x40021000
 800248c:	080058e0 	.word	0x080058e0
 8002490:	20000014 	.word	0x20000014
 8002494:	20000018 	.word	0x20000018
 8002498:	4ba0      	ldr	r3, [pc, #640]	; (800271c <HAL_RCC_OscConfig+0x504>)
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	4a9f      	ldr	r2, [pc, #636]	; (800271c <HAL_RCC_OscConfig+0x504>)
 800249e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80024a2:	6013      	str	r3, [r2, #0]
 80024a4:	4b9d      	ldr	r3, [pc, #628]	; (800271c <HAL_RCC_OscConfig+0x504>)
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	4a9c      	ldr	r2, [pc, #624]	; (800271c <HAL_RCC_OscConfig+0x504>)
 80024aa:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80024ae:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	685b      	ldr	r3, [r3, #4]
 80024b4:	2b00      	cmp	r3, #0
 80024b6:	d013      	beq.n	80024e0 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80024b8:	f7ff f9a2 	bl	8001800 <HAL_GetTick>
 80024bc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80024be:	e008      	b.n	80024d2 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80024c0:	f7ff f99e 	bl	8001800 <HAL_GetTick>
 80024c4:	4602      	mov	r2, r0
 80024c6:	693b      	ldr	r3, [r7, #16]
 80024c8:	1ad3      	subs	r3, r2, r3
 80024ca:	2b64      	cmp	r3, #100	; 0x64
 80024cc:	d901      	bls.n	80024d2 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 80024ce:	2303      	movs	r3, #3
 80024d0:	e276      	b.n	80029c0 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80024d2:	4b92      	ldr	r3, [pc, #584]	; (800271c <HAL_RCC_OscConfig+0x504>)
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80024da:	2b00      	cmp	r3, #0
 80024dc:	d0f0      	beq.n	80024c0 <HAL_RCC_OscConfig+0x2a8>
 80024de:	e014      	b.n	800250a <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80024e0:	f7ff f98e 	bl	8001800 <HAL_GetTick>
 80024e4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80024e6:	e008      	b.n	80024fa <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80024e8:	f7ff f98a 	bl	8001800 <HAL_GetTick>
 80024ec:	4602      	mov	r2, r0
 80024ee:	693b      	ldr	r3, [r7, #16]
 80024f0:	1ad3      	subs	r3, r2, r3
 80024f2:	2b64      	cmp	r3, #100	; 0x64
 80024f4:	d901      	bls.n	80024fa <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 80024f6:	2303      	movs	r3, #3
 80024f8:	e262      	b.n	80029c0 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80024fa:	4b88      	ldr	r3, [pc, #544]	; (800271c <HAL_RCC_OscConfig+0x504>)
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002502:	2b00      	cmp	r3, #0
 8002504:	d1f0      	bne.n	80024e8 <HAL_RCC_OscConfig+0x2d0>
 8002506:	e000      	b.n	800250a <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002508:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	681b      	ldr	r3, [r3, #0]
 800250e:	f003 0302 	and.w	r3, r3, #2
 8002512:	2b00      	cmp	r3, #0
 8002514:	d060      	beq.n	80025d8 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8002516:	69bb      	ldr	r3, [r7, #24]
 8002518:	2b04      	cmp	r3, #4
 800251a:	d005      	beq.n	8002528 <HAL_RCC_OscConfig+0x310>
 800251c:	69bb      	ldr	r3, [r7, #24]
 800251e:	2b0c      	cmp	r3, #12
 8002520:	d119      	bne.n	8002556 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8002522:	697b      	ldr	r3, [r7, #20]
 8002524:	2b02      	cmp	r3, #2
 8002526:	d116      	bne.n	8002556 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002528:	4b7c      	ldr	r3, [pc, #496]	; (800271c <HAL_RCC_OscConfig+0x504>)
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002530:	2b00      	cmp	r3, #0
 8002532:	d005      	beq.n	8002540 <HAL_RCC_OscConfig+0x328>
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	68db      	ldr	r3, [r3, #12]
 8002538:	2b00      	cmp	r3, #0
 800253a:	d101      	bne.n	8002540 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 800253c:	2301      	movs	r3, #1
 800253e:	e23f      	b.n	80029c0 <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002540:	4b76      	ldr	r3, [pc, #472]	; (800271c <HAL_RCC_OscConfig+0x504>)
 8002542:	685b      	ldr	r3, [r3, #4]
 8002544:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	691b      	ldr	r3, [r3, #16]
 800254c:	061b      	lsls	r3, r3, #24
 800254e:	4973      	ldr	r1, [pc, #460]	; (800271c <HAL_RCC_OscConfig+0x504>)
 8002550:	4313      	orrs	r3, r2
 8002552:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002554:	e040      	b.n	80025d8 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	68db      	ldr	r3, [r3, #12]
 800255a:	2b00      	cmp	r3, #0
 800255c:	d023      	beq.n	80025a6 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800255e:	4b6f      	ldr	r3, [pc, #444]	; (800271c <HAL_RCC_OscConfig+0x504>)
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	4a6e      	ldr	r2, [pc, #440]	; (800271c <HAL_RCC_OscConfig+0x504>)
 8002564:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002568:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800256a:	f7ff f949 	bl	8001800 <HAL_GetTick>
 800256e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002570:	e008      	b.n	8002584 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002572:	f7ff f945 	bl	8001800 <HAL_GetTick>
 8002576:	4602      	mov	r2, r0
 8002578:	693b      	ldr	r3, [r7, #16]
 800257a:	1ad3      	subs	r3, r2, r3
 800257c:	2b02      	cmp	r3, #2
 800257e:	d901      	bls.n	8002584 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8002580:	2303      	movs	r3, #3
 8002582:	e21d      	b.n	80029c0 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002584:	4b65      	ldr	r3, [pc, #404]	; (800271c <HAL_RCC_OscConfig+0x504>)
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800258c:	2b00      	cmp	r3, #0
 800258e:	d0f0      	beq.n	8002572 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002590:	4b62      	ldr	r3, [pc, #392]	; (800271c <HAL_RCC_OscConfig+0x504>)
 8002592:	685b      	ldr	r3, [r3, #4]
 8002594:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	691b      	ldr	r3, [r3, #16]
 800259c:	061b      	lsls	r3, r3, #24
 800259e:	495f      	ldr	r1, [pc, #380]	; (800271c <HAL_RCC_OscConfig+0x504>)
 80025a0:	4313      	orrs	r3, r2
 80025a2:	604b      	str	r3, [r1, #4]
 80025a4:	e018      	b.n	80025d8 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80025a6:	4b5d      	ldr	r3, [pc, #372]	; (800271c <HAL_RCC_OscConfig+0x504>)
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	4a5c      	ldr	r2, [pc, #368]	; (800271c <HAL_RCC_OscConfig+0x504>)
 80025ac:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80025b0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80025b2:	f7ff f925 	bl	8001800 <HAL_GetTick>
 80025b6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80025b8:	e008      	b.n	80025cc <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80025ba:	f7ff f921 	bl	8001800 <HAL_GetTick>
 80025be:	4602      	mov	r2, r0
 80025c0:	693b      	ldr	r3, [r7, #16]
 80025c2:	1ad3      	subs	r3, r2, r3
 80025c4:	2b02      	cmp	r3, #2
 80025c6:	d901      	bls.n	80025cc <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 80025c8:	2303      	movs	r3, #3
 80025ca:	e1f9      	b.n	80029c0 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80025cc:	4b53      	ldr	r3, [pc, #332]	; (800271c <HAL_RCC_OscConfig+0x504>)
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80025d4:	2b00      	cmp	r3, #0
 80025d6:	d1f0      	bne.n	80025ba <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	f003 0308 	and.w	r3, r3, #8
 80025e0:	2b00      	cmp	r3, #0
 80025e2:	d03c      	beq.n	800265e <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	695b      	ldr	r3, [r3, #20]
 80025e8:	2b00      	cmp	r3, #0
 80025ea:	d01c      	beq.n	8002626 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80025ec:	4b4b      	ldr	r3, [pc, #300]	; (800271c <HAL_RCC_OscConfig+0x504>)
 80025ee:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80025f2:	4a4a      	ldr	r2, [pc, #296]	; (800271c <HAL_RCC_OscConfig+0x504>)
 80025f4:	f043 0301 	orr.w	r3, r3, #1
 80025f8:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80025fc:	f7ff f900 	bl	8001800 <HAL_GetTick>
 8002600:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002602:	e008      	b.n	8002616 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002604:	f7ff f8fc 	bl	8001800 <HAL_GetTick>
 8002608:	4602      	mov	r2, r0
 800260a:	693b      	ldr	r3, [r7, #16]
 800260c:	1ad3      	subs	r3, r2, r3
 800260e:	2b02      	cmp	r3, #2
 8002610:	d901      	bls.n	8002616 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8002612:	2303      	movs	r3, #3
 8002614:	e1d4      	b.n	80029c0 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002616:	4b41      	ldr	r3, [pc, #260]	; (800271c <HAL_RCC_OscConfig+0x504>)
 8002618:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800261c:	f003 0302 	and.w	r3, r3, #2
 8002620:	2b00      	cmp	r3, #0
 8002622:	d0ef      	beq.n	8002604 <HAL_RCC_OscConfig+0x3ec>
 8002624:	e01b      	b.n	800265e <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002626:	4b3d      	ldr	r3, [pc, #244]	; (800271c <HAL_RCC_OscConfig+0x504>)
 8002628:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800262c:	4a3b      	ldr	r2, [pc, #236]	; (800271c <HAL_RCC_OscConfig+0x504>)
 800262e:	f023 0301 	bic.w	r3, r3, #1
 8002632:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002636:	f7ff f8e3 	bl	8001800 <HAL_GetTick>
 800263a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800263c:	e008      	b.n	8002650 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800263e:	f7ff f8df 	bl	8001800 <HAL_GetTick>
 8002642:	4602      	mov	r2, r0
 8002644:	693b      	ldr	r3, [r7, #16]
 8002646:	1ad3      	subs	r3, r2, r3
 8002648:	2b02      	cmp	r3, #2
 800264a:	d901      	bls.n	8002650 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 800264c:	2303      	movs	r3, #3
 800264e:	e1b7      	b.n	80029c0 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002650:	4b32      	ldr	r3, [pc, #200]	; (800271c <HAL_RCC_OscConfig+0x504>)
 8002652:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002656:	f003 0302 	and.w	r3, r3, #2
 800265a:	2b00      	cmp	r3, #0
 800265c:	d1ef      	bne.n	800263e <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	f003 0304 	and.w	r3, r3, #4
 8002666:	2b00      	cmp	r3, #0
 8002668:	f000 80a6 	beq.w	80027b8 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 800266c:	2300      	movs	r3, #0
 800266e:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8002670:	4b2a      	ldr	r3, [pc, #168]	; (800271c <HAL_RCC_OscConfig+0x504>)
 8002672:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002674:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002678:	2b00      	cmp	r3, #0
 800267a:	d10d      	bne.n	8002698 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800267c:	4b27      	ldr	r3, [pc, #156]	; (800271c <HAL_RCC_OscConfig+0x504>)
 800267e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002680:	4a26      	ldr	r2, [pc, #152]	; (800271c <HAL_RCC_OscConfig+0x504>)
 8002682:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002686:	6593      	str	r3, [r2, #88]	; 0x58
 8002688:	4b24      	ldr	r3, [pc, #144]	; (800271c <HAL_RCC_OscConfig+0x504>)
 800268a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800268c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002690:	60bb      	str	r3, [r7, #8]
 8002692:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002694:	2301      	movs	r3, #1
 8002696:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002698:	4b21      	ldr	r3, [pc, #132]	; (8002720 <HAL_RCC_OscConfig+0x508>)
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80026a0:	2b00      	cmp	r3, #0
 80026a2:	d118      	bne.n	80026d6 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80026a4:	4b1e      	ldr	r3, [pc, #120]	; (8002720 <HAL_RCC_OscConfig+0x508>)
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	4a1d      	ldr	r2, [pc, #116]	; (8002720 <HAL_RCC_OscConfig+0x508>)
 80026aa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80026ae:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80026b0:	f7ff f8a6 	bl	8001800 <HAL_GetTick>
 80026b4:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80026b6:	e008      	b.n	80026ca <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80026b8:	f7ff f8a2 	bl	8001800 <HAL_GetTick>
 80026bc:	4602      	mov	r2, r0
 80026be:	693b      	ldr	r3, [r7, #16]
 80026c0:	1ad3      	subs	r3, r2, r3
 80026c2:	2b02      	cmp	r3, #2
 80026c4:	d901      	bls.n	80026ca <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 80026c6:	2303      	movs	r3, #3
 80026c8:	e17a      	b.n	80029c0 <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80026ca:	4b15      	ldr	r3, [pc, #84]	; (8002720 <HAL_RCC_OscConfig+0x508>)
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80026d2:	2b00      	cmp	r3, #0
 80026d4:	d0f0      	beq.n	80026b8 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	689b      	ldr	r3, [r3, #8]
 80026da:	2b01      	cmp	r3, #1
 80026dc:	d108      	bne.n	80026f0 <HAL_RCC_OscConfig+0x4d8>
 80026de:	4b0f      	ldr	r3, [pc, #60]	; (800271c <HAL_RCC_OscConfig+0x504>)
 80026e0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80026e4:	4a0d      	ldr	r2, [pc, #52]	; (800271c <HAL_RCC_OscConfig+0x504>)
 80026e6:	f043 0301 	orr.w	r3, r3, #1
 80026ea:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80026ee:	e029      	b.n	8002744 <HAL_RCC_OscConfig+0x52c>
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	689b      	ldr	r3, [r3, #8]
 80026f4:	2b05      	cmp	r3, #5
 80026f6:	d115      	bne.n	8002724 <HAL_RCC_OscConfig+0x50c>
 80026f8:	4b08      	ldr	r3, [pc, #32]	; (800271c <HAL_RCC_OscConfig+0x504>)
 80026fa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80026fe:	4a07      	ldr	r2, [pc, #28]	; (800271c <HAL_RCC_OscConfig+0x504>)
 8002700:	f043 0304 	orr.w	r3, r3, #4
 8002704:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002708:	4b04      	ldr	r3, [pc, #16]	; (800271c <HAL_RCC_OscConfig+0x504>)
 800270a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800270e:	4a03      	ldr	r2, [pc, #12]	; (800271c <HAL_RCC_OscConfig+0x504>)
 8002710:	f043 0301 	orr.w	r3, r3, #1
 8002714:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002718:	e014      	b.n	8002744 <HAL_RCC_OscConfig+0x52c>
 800271a:	bf00      	nop
 800271c:	40021000 	.word	0x40021000
 8002720:	40007000 	.word	0x40007000
 8002724:	4b9c      	ldr	r3, [pc, #624]	; (8002998 <HAL_RCC_OscConfig+0x780>)
 8002726:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800272a:	4a9b      	ldr	r2, [pc, #620]	; (8002998 <HAL_RCC_OscConfig+0x780>)
 800272c:	f023 0301 	bic.w	r3, r3, #1
 8002730:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002734:	4b98      	ldr	r3, [pc, #608]	; (8002998 <HAL_RCC_OscConfig+0x780>)
 8002736:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800273a:	4a97      	ldr	r2, [pc, #604]	; (8002998 <HAL_RCC_OscConfig+0x780>)
 800273c:	f023 0304 	bic.w	r3, r3, #4
 8002740:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	689b      	ldr	r3, [r3, #8]
 8002748:	2b00      	cmp	r3, #0
 800274a:	d016      	beq.n	800277a <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800274c:	f7ff f858 	bl	8001800 <HAL_GetTick>
 8002750:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002752:	e00a      	b.n	800276a <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002754:	f7ff f854 	bl	8001800 <HAL_GetTick>
 8002758:	4602      	mov	r2, r0
 800275a:	693b      	ldr	r3, [r7, #16]
 800275c:	1ad3      	subs	r3, r2, r3
 800275e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002762:	4293      	cmp	r3, r2
 8002764:	d901      	bls.n	800276a <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8002766:	2303      	movs	r3, #3
 8002768:	e12a      	b.n	80029c0 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800276a:	4b8b      	ldr	r3, [pc, #556]	; (8002998 <HAL_RCC_OscConfig+0x780>)
 800276c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002770:	f003 0302 	and.w	r3, r3, #2
 8002774:	2b00      	cmp	r3, #0
 8002776:	d0ed      	beq.n	8002754 <HAL_RCC_OscConfig+0x53c>
 8002778:	e015      	b.n	80027a6 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800277a:	f7ff f841 	bl	8001800 <HAL_GetTick>
 800277e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002780:	e00a      	b.n	8002798 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002782:	f7ff f83d 	bl	8001800 <HAL_GetTick>
 8002786:	4602      	mov	r2, r0
 8002788:	693b      	ldr	r3, [r7, #16]
 800278a:	1ad3      	subs	r3, r2, r3
 800278c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002790:	4293      	cmp	r3, r2
 8002792:	d901      	bls.n	8002798 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8002794:	2303      	movs	r3, #3
 8002796:	e113      	b.n	80029c0 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002798:	4b7f      	ldr	r3, [pc, #508]	; (8002998 <HAL_RCC_OscConfig+0x780>)
 800279a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800279e:	f003 0302 	and.w	r3, r3, #2
 80027a2:	2b00      	cmp	r3, #0
 80027a4:	d1ed      	bne.n	8002782 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80027a6:	7ffb      	ldrb	r3, [r7, #31]
 80027a8:	2b01      	cmp	r3, #1
 80027aa:	d105      	bne.n	80027b8 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80027ac:	4b7a      	ldr	r3, [pc, #488]	; (8002998 <HAL_RCC_OscConfig+0x780>)
 80027ae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80027b0:	4a79      	ldr	r2, [pc, #484]	; (8002998 <HAL_RCC_OscConfig+0x780>)
 80027b2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80027b6:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80027bc:	2b00      	cmp	r3, #0
 80027be:	f000 80fe 	beq.w	80029be <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80027c6:	2b02      	cmp	r3, #2
 80027c8:	f040 80d0 	bne.w	800296c <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 80027cc:	4b72      	ldr	r3, [pc, #456]	; (8002998 <HAL_RCC_OscConfig+0x780>)
 80027ce:	68db      	ldr	r3, [r3, #12]
 80027d0:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80027d2:	697b      	ldr	r3, [r7, #20]
 80027d4:	f003 0203 	and.w	r2, r3, #3
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80027dc:	429a      	cmp	r2, r3
 80027de:	d130      	bne.n	8002842 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80027e0:	697b      	ldr	r3, [r7, #20]
 80027e2:	f003 0270 	and.w	r2, r3, #112	; 0x70
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027ea:	3b01      	subs	r3, #1
 80027ec:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80027ee:	429a      	cmp	r2, r3
 80027f0:	d127      	bne.n	8002842 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80027f2:	697b      	ldr	r3, [r7, #20]
 80027f4:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80027fc:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80027fe:	429a      	cmp	r2, r3
 8002800:	d11f      	bne.n	8002842 <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8002802:	697b      	ldr	r3, [r7, #20]
 8002804:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002808:	687a      	ldr	r2, [r7, #4]
 800280a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800280c:	2a07      	cmp	r2, #7
 800280e:	bf14      	ite	ne
 8002810:	2201      	movne	r2, #1
 8002812:	2200      	moveq	r2, #0
 8002814:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002816:	4293      	cmp	r3, r2
 8002818:	d113      	bne.n	8002842 <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800281a:	697b      	ldr	r3, [r7, #20]
 800281c:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002824:	085b      	lsrs	r3, r3, #1
 8002826:	3b01      	subs	r3, #1
 8002828:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 800282a:	429a      	cmp	r2, r3
 800282c:	d109      	bne.n	8002842 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800282e:	697b      	ldr	r3, [r7, #20]
 8002830:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002838:	085b      	lsrs	r3, r3, #1
 800283a:	3b01      	subs	r3, #1
 800283c:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800283e:	429a      	cmp	r2, r3
 8002840:	d06e      	beq.n	8002920 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002842:	69bb      	ldr	r3, [r7, #24]
 8002844:	2b0c      	cmp	r3, #12
 8002846:	d069      	beq.n	800291c <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8002848:	4b53      	ldr	r3, [pc, #332]	; (8002998 <HAL_RCC_OscConfig+0x780>)
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002850:	2b00      	cmp	r3, #0
 8002852:	d105      	bne.n	8002860 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8002854:	4b50      	ldr	r3, [pc, #320]	; (8002998 <HAL_RCC_OscConfig+0x780>)
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800285c:	2b00      	cmp	r3, #0
 800285e:	d001      	beq.n	8002864 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8002860:	2301      	movs	r3, #1
 8002862:	e0ad      	b.n	80029c0 <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8002864:	4b4c      	ldr	r3, [pc, #304]	; (8002998 <HAL_RCC_OscConfig+0x780>)
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	4a4b      	ldr	r2, [pc, #300]	; (8002998 <HAL_RCC_OscConfig+0x780>)
 800286a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800286e:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002870:	f7fe ffc6 	bl	8001800 <HAL_GetTick>
 8002874:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002876:	e008      	b.n	800288a <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002878:	f7fe ffc2 	bl	8001800 <HAL_GetTick>
 800287c:	4602      	mov	r2, r0
 800287e:	693b      	ldr	r3, [r7, #16]
 8002880:	1ad3      	subs	r3, r2, r3
 8002882:	2b02      	cmp	r3, #2
 8002884:	d901      	bls.n	800288a <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8002886:	2303      	movs	r3, #3
 8002888:	e09a      	b.n	80029c0 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800288a:	4b43      	ldr	r3, [pc, #268]	; (8002998 <HAL_RCC_OscConfig+0x780>)
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002892:	2b00      	cmp	r3, #0
 8002894:	d1f0      	bne.n	8002878 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002896:	4b40      	ldr	r3, [pc, #256]	; (8002998 <HAL_RCC_OscConfig+0x780>)
 8002898:	68da      	ldr	r2, [r3, #12]
 800289a:	4b40      	ldr	r3, [pc, #256]	; (800299c <HAL_RCC_OscConfig+0x784>)
 800289c:	4013      	ands	r3, r2
 800289e:	687a      	ldr	r2, [r7, #4]
 80028a0:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 80028a2:	687a      	ldr	r2, [r7, #4]
 80028a4:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80028a6:	3a01      	subs	r2, #1
 80028a8:	0112      	lsls	r2, r2, #4
 80028aa:	4311      	orrs	r1, r2
 80028ac:	687a      	ldr	r2, [r7, #4]
 80028ae:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80028b0:	0212      	lsls	r2, r2, #8
 80028b2:	4311      	orrs	r1, r2
 80028b4:	687a      	ldr	r2, [r7, #4]
 80028b6:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80028b8:	0852      	lsrs	r2, r2, #1
 80028ba:	3a01      	subs	r2, #1
 80028bc:	0552      	lsls	r2, r2, #21
 80028be:	4311      	orrs	r1, r2
 80028c0:	687a      	ldr	r2, [r7, #4]
 80028c2:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80028c4:	0852      	lsrs	r2, r2, #1
 80028c6:	3a01      	subs	r2, #1
 80028c8:	0652      	lsls	r2, r2, #25
 80028ca:	4311      	orrs	r1, r2
 80028cc:	687a      	ldr	r2, [r7, #4]
 80028ce:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80028d0:	0912      	lsrs	r2, r2, #4
 80028d2:	0452      	lsls	r2, r2, #17
 80028d4:	430a      	orrs	r2, r1
 80028d6:	4930      	ldr	r1, [pc, #192]	; (8002998 <HAL_RCC_OscConfig+0x780>)
 80028d8:	4313      	orrs	r3, r2
 80028da:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 80028dc:	4b2e      	ldr	r3, [pc, #184]	; (8002998 <HAL_RCC_OscConfig+0x780>)
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	4a2d      	ldr	r2, [pc, #180]	; (8002998 <HAL_RCC_OscConfig+0x780>)
 80028e2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80028e6:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80028e8:	4b2b      	ldr	r3, [pc, #172]	; (8002998 <HAL_RCC_OscConfig+0x780>)
 80028ea:	68db      	ldr	r3, [r3, #12]
 80028ec:	4a2a      	ldr	r2, [pc, #168]	; (8002998 <HAL_RCC_OscConfig+0x780>)
 80028ee:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80028f2:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80028f4:	f7fe ff84 	bl	8001800 <HAL_GetTick>
 80028f8:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80028fa:	e008      	b.n	800290e <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80028fc:	f7fe ff80 	bl	8001800 <HAL_GetTick>
 8002900:	4602      	mov	r2, r0
 8002902:	693b      	ldr	r3, [r7, #16]
 8002904:	1ad3      	subs	r3, r2, r3
 8002906:	2b02      	cmp	r3, #2
 8002908:	d901      	bls.n	800290e <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 800290a:	2303      	movs	r3, #3
 800290c:	e058      	b.n	80029c0 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800290e:	4b22      	ldr	r3, [pc, #136]	; (8002998 <HAL_RCC_OscConfig+0x780>)
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002916:	2b00      	cmp	r3, #0
 8002918:	d0f0      	beq.n	80028fc <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800291a:	e050      	b.n	80029be <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 800291c:	2301      	movs	r3, #1
 800291e:	e04f      	b.n	80029c0 <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002920:	4b1d      	ldr	r3, [pc, #116]	; (8002998 <HAL_RCC_OscConfig+0x780>)
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002928:	2b00      	cmp	r3, #0
 800292a:	d148      	bne.n	80029be <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 800292c:	4b1a      	ldr	r3, [pc, #104]	; (8002998 <HAL_RCC_OscConfig+0x780>)
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	4a19      	ldr	r2, [pc, #100]	; (8002998 <HAL_RCC_OscConfig+0x780>)
 8002932:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002936:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002938:	4b17      	ldr	r3, [pc, #92]	; (8002998 <HAL_RCC_OscConfig+0x780>)
 800293a:	68db      	ldr	r3, [r3, #12]
 800293c:	4a16      	ldr	r2, [pc, #88]	; (8002998 <HAL_RCC_OscConfig+0x780>)
 800293e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002942:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002944:	f7fe ff5c 	bl	8001800 <HAL_GetTick>
 8002948:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800294a:	e008      	b.n	800295e <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800294c:	f7fe ff58 	bl	8001800 <HAL_GetTick>
 8002950:	4602      	mov	r2, r0
 8002952:	693b      	ldr	r3, [r7, #16]
 8002954:	1ad3      	subs	r3, r2, r3
 8002956:	2b02      	cmp	r3, #2
 8002958:	d901      	bls.n	800295e <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 800295a:	2303      	movs	r3, #3
 800295c:	e030      	b.n	80029c0 <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800295e:	4b0e      	ldr	r3, [pc, #56]	; (8002998 <HAL_RCC_OscConfig+0x780>)
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002966:	2b00      	cmp	r3, #0
 8002968:	d0f0      	beq.n	800294c <HAL_RCC_OscConfig+0x734>
 800296a:	e028      	b.n	80029be <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 800296c:	69bb      	ldr	r3, [r7, #24]
 800296e:	2b0c      	cmp	r3, #12
 8002970:	d023      	beq.n	80029ba <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002972:	4b09      	ldr	r3, [pc, #36]	; (8002998 <HAL_RCC_OscConfig+0x780>)
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	4a08      	ldr	r2, [pc, #32]	; (8002998 <HAL_RCC_OscConfig+0x780>)
 8002978:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800297c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800297e:	f7fe ff3f 	bl	8001800 <HAL_GetTick>
 8002982:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002984:	e00c      	b.n	80029a0 <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002986:	f7fe ff3b 	bl	8001800 <HAL_GetTick>
 800298a:	4602      	mov	r2, r0
 800298c:	693b      	ldr	r3, [r7, #16]
 800298e:	1ad3      	subs	r3, r2, r3
 8002990:	2b02      	cmp	r3, #2
 8002992:	d905      	bls.n	80029a0 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 8002994:	2303      	movs	r3, #3
 8002996:	e013      	b.n	80029c0 <HAL_RCC_OscConfig+0x7a8>
 8002998:	40021000 	.word	0x40021000
 800299c:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80029a0:	4b09      	ldr	r3, [pc, #36]	; (80029c8 <HAL_RCC_OscConfig+0x7b0>)
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80029a8:	2b00      	cmp	r3, #0
 80029aa:	d1ec      	bne.n	8002986 <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 80029ac:	4b06      	ldr	r3, [pc, #24]	; (80029c8 <HAL_RCC_OscConfig+0x7b0>)
 80029ae:	68da      	ldr	r2, [r3, #12]
 80029b0:	4905      	ldr	r1, [pc, #20]	; (80029c8 <HAL_RCC_OscConfig+0x7b0>)
 80029b2:	4b06      	ldr	r3, [pc, #24]	; (80029cc <HAL_RCC_OscConfig+0x7b4>)
 80029b4:	4013      	ands	r3, r2
 80029b6:	60cb      	str	r3, [r1, #12]
 80029b8:	e001      	b.n	80029be <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 80029ba:	2301      	movs	r3, #1
 80029bc:	e000      	b.n	80029c0 <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 80029be:	2300      	movs	r3, #0
}
 80029c0:	4618      	mov	r0, r3
 80029c2:	3720      	adds	r7, #32
 80029c4:	46bd      	mov	sp, r7
 80029c6:	bd80      	pop	{r7, pc}
 80029c8:	40021000 	.word	0x40021000
 80029cc:	feeefffc 	.word	0xfeeefffc

080029d0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80029d0:	b580      	push	{r7, lr}
 80029d2:	b084      	sub	sp, #16
 80029d4:	af00      	add	r7, sp, #0
 80029d6:	6078      	str	r0, [r7, #4]
 80029d8:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	2b00      	cmp	r3, #0
 80029de:	d101      	bne.n	80029e4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80029e0:	2301      	movs	r3, #1
 80029e2:	e0e7      	b.n	8002bb4 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80029e4:	4b75      	ldr	r3, [pc, #468]	; (8002bbc <HAL_RCC_ClockConfig+0x1ec>)
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	f003 0307 	and.w	r3, r3, #7
 80029ec:	683a      	ldr	r2, [r7, #0]
 80029ee:	429a      	cmp	r2, r3
 80029f0:	d910      	bls.n	8002a14 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80029f2:	4b72      	ldr	r3, [pc, #456]	; (8002bbc <HAL_RCC_ClockConfig+0x1ec>)
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	f023 0207 	bic.w	r2, r3, #7
 80029fa:	4970      	ldr	r1, [pc, #448]	; (8002bbc <HAL_RCC_ClockConfig+0x1ec>)
 80029fc:	683b      	ldr	r3, [r7, #0]
 80029fe:	4313      	orrs	r3, r2
 8002a00:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002a02:	4b6e      	ldr	r3, [pc, #440]	; (8002bbc <HAL_RCC_ClockConfig+0x1ec>)
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	f003 0307 	and.w	r3, r3, #7
 8002a0a:	683a      	ldr	r2, [r7, #0]
 8002a0c:	429a      	cmp	r2, r3
 8002a0e:	d001      	beq.n	8002a14 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8002a10:	2301      	movs	r3, #1
 8002a12:	e0cf      	b.n	8002bb4 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	f003 0302 	and.w	r3, r3, #2
 8002a1c:	2b00      	cmp	r3, #0
 8002a1e:	d010      	beq.n	8002a42 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	689a      	ldr	r2, [r3, #8]
 8002a24:	4b66      	ldr	r3, [pc, #408]	; (8002bc0 <HAL_RCC_ClockConfig+0x1f0>)
 8002a26:	689b      	ldr	r3, [r3, #8]
 8002a28:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002a2c:	429a      	cmp	r2, r3
 8002a2e:	d908      	bls.n	8002a42 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002a30:	4b63      	ldr	r3, [pc, #396]	; (8002bc0 <HAL_RCC_ClockConfig+0x1f0>)
 8002a32:	689b      	ldr	r3, [r3, #8]
 8002a34:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	689b      	ldr	r3, [r3, #8]
 8002a3c:	4960      	ldr	r1, [pc, #384]	; (8002bc0 <HAL_RCC_ClockConfig+0x1f0>)
 8002a3e:	4313      	orrs	r3, r2
 8002a40:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	f003 0301 	and.w	r3, r3, #1
 8002a4a:	2b00      	cmp	r3, #0
 8002a4c:	d04c      	beq.n	8002ae8 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	685b      	ldr	r3, [r3, #4]
 8002a52:	2b03      	cmp	r3, #3
 8002a54:	d107      	bne.n	8002a66 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002a56:	4b5a      	ldr	r3, [pc, #360]	; (8002bc0 <HAL_RCC_ClockConfig+0x1f0>)
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002a5e:	2b00      	cmp	r3, #0
 8002a60:	d121      	bne.n	8002aa6 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8002a62:	2301      	movs	r3, #1
 8002a64:	e0a6      	b.n	8002bb4 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	685b      	ldr	r3, [r3, #4]
 8002a6a:	2b02      	cmp	r3, #2
 8002a6c:	d107      	bne.n	8002a7e <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002a6e:	4b54      	ldr	r3, [pc, #336]	; (8002bc0 <HAL_RCC_ClockConfig+0x1f0>)
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a76:	2b00      	cmp	r3, #0
 8002a78:	d115      	bne.n	8002aa6 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8002a7a:	2301      	movs	r3, #1
 8002a7c:	e09a      	b.n	8002bb4 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	685b      	ldr	r3, [r3, #4]
 8002a82:	2b00      	cmp	r3, #0
 8002a84:	d107      	bne.n	8002a96 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002a86:	4b4e      	ldr	r3, [pc, #312]	; (8002bc0 <HAL_RCC_ClockConfig+0x1f0>)
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	f003 0302 	and.w	r3, r3, #2
 8002a8e:	2b00      	cmp	r3, #0
 8002a90:	d109      	bne.n	8002aa6 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8002a92:	2301      	movs	r3, #1
 8002a94:	e08e      	b.n	8002bb4 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002a96:	4b4a      	ldr	r3, [pc, #296]	; (8002bc0 <HAL_RCC_ClockConfig+0x1f0>)
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002a9e:	2b00      	cmp	r3, #0
 8002aa0:	d101      	bne.n	8002aa6 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8002aa2:	2301      	movs	r3, #1
 8002aa4:	e086      	b.n	8002bb4 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002aa6:	4b46      	ldr	r3, [pc, #280]	; (8002bc0 <HAL_RCC_ClockConfig+0x1f0>)
 8002aa8:	689b      	ldr	r3, [r3, #8]
 8002aaa:	f023 0203 	bic.w	r2, r3, #3
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	685b      	ldr	r3, [r3, #4]
 8002ab2:	4943      	ldr	r1, [pc, #268]	; (8002bc0 <HAL_RCC_ClockConfig+0x1f0>)
 8002ab4:	4313      	orrs	r3, r2
 8002ab6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002ab8:	f7fe fea2 	bl	8001800 <HAL_GetTick>
 8002abc:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002abe:	e00a      	b.n	8002ad6 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002ac0:	f7fe fe9e 	bl	8001800 <HAL_GetTick>
 8002ac4:	4602      	mov	r2, r0
 8002ac6:	68fb      	ldr	r3, [r7, #12]
 8002ac8:	1ad3      	subs	r3, r2, r3
 8002aca:	f241 3288 	movw	r2, #5000	; 0x1388
 8002ace:	4293      	cmp	r3, r2
 8002ad0:	d901      	bls.n	8002ad6 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8002ad2:	2303      	movs	r3, #3
 8002ad4:	e06e      	b.n	8002bb4 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002ad6:	4b3a      	ldr	r3, [pc, #232]	; (8002bc0 <HAL_RCC_ClockConfig+0x1f0>)
 8002ad8:	689b      	ldr	r3, [r3, #8]
 8002ada:	f003 020c 	and.w	r2, r3, #12
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	685b      	ldr	r3, [r3, #4]
 8002ae2:	009b      	lsls	r3, r3, #2
 8002ae4:	429a      	cmp	r2, r3
 8002ae6:	d1eb      	bne.n	8002ac0 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	f003 0302 	and.w	r3, r3, #2
 8002af0:	2b00      	cmp	r3, #0
 8002af2:	d010      	beq.n	8002b16 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	689a      	ldr	r2, [r3, #8]
 8002af8:	4b31      	ldr	r3, [pc, #196]	; (8002bc0 <HAL_RCC_ClockConfig+0x1f0>)
 8002afa:	689b      	ldr	r3, [r3, #8]
 8002afc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002b00:	429a      	cmp	r2, r3
 8002b02:	d208      	bcs.n	8002b16 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002b04:	4b2e      	ldr	r3, [pc, #184]	; (8002bc0 <HAL_RCC_ClockConfig+0x1f0>)
 8002b06:	689b      	ldr	r3, [r3, #8]
 8002b08:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	689b      	ldr	r3, [r3, #8]
 8002b10:	492b      	ldr	r1, [pc, #172]	; (8002bc0 <HAL_RCC_ClockConfig+0x1f0>)
 8002b12:	4313      	orrs	r3, r2
 8002b14:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002b16:	4b29      	ldr	r3, [pc, #164]	; (8002bbc <HAL_RCC_ClockConfig+0x1ec>)
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	f003 0307 	and.w	r3, r3, #7
 8002b1e:	683a      	ldr	r2, [r7, #0]
 8002b20:	429a      	cmp	r2, r3
 8002b22:	d210      	bcs.n	8002b46 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002b24:	4b25      	ldr	r3, [pc, #148]	; (8002bbc <HAL_RCC_ClockConfig+0x1ec>)
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	f023 0207 	bic.w	r2, r3, #7
 8002b2c:	4923      	ldr	r1, [pc, #140]	; (8002bbc <HAL_RCC_ClockConfig+0x1ec>)
 8002b2e:	683b      	ldr	r3, [r7, #0]
 8002b30:	4313      	orrs	r3, r2
 8002b32:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002b34:	4b21      	ldr	r3, [pc, #132]	; (8002bbc <HAL_RCC_ClockConfig+0x1ec>)
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	f003 0307 	and.w	r3, r3, #7
 8002b3c:	683a      	ldr	r2, [r7, #0]
 8002b3e:	429a      	cmp	r2, r3
 8002b40:	d001      	beq.n	8002b46 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8002b42:	2301      	movs	r3, #1
 8002b44:	e036      	b.n	8002bb4 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	f003 0304 	and.w	r3, r3, #4
 8002b4e:	2b00      	cmp	r3, #0
 8002b50:	d008      	beq.n	8002b64 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002b52:	4b1b      	ldr	r3, [pc, #108]	; (8002bc0 <HAL_RCC_ClockConfig+0x1f0>)
 8002b54:	689b      	ldr	r3, [r3, #8]
 8002b56:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	68db      	ldr	r3, [r3, #12]
 8002b5e:	4918      	ldr	r1, [pc, #96]	; (8002bc0 <HAL_RCC_ClockConfig+0x1f0>)
 8002b60:	4313      	orrs	r3, r2
 8002b62:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	f003 0308 	and.w	r3, r3, #8
 8002b6c:	2b00      	cmp	r3, #0
 8002b6e:	d009      	beq.n	8002b84 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002b70:	4b13      	ldr	r3, [pc, #76]	; (8002bc0 <HAL_RCC_ClockConfig+0x1f0>)
 8002b72:	689b      	ldr	r3, [r3, #8]
 8002b74:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	691b      	ldr	r3, [r3, #16]
 8002b7c:	00db      	lsls	r3, r3, #3
 8002b7e:	4910      	ldr	r1, [pc, #64]	; (8002bc0 <HAL_RCC_ClockConfig+0x1f0>)
 8002b80:	4313      	orrs	r3, r2
 8002b82:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002b84:	f000 f824 	bl	8002bd0 <HAL_RCC_GetSysClockFreq>
 8002b88:	4602      	mov	r2, r0
 8002b8a:	4b0d      	ldr	r3, [pc, #52]	; (8002bc0 <HAL_RCC_ClockConfig+0x1f0>)
 8002b8c:	689b      	ldr	r3, [r3, #8]
 8002b8e:	091b      	lsrs	r3, r3, #4
 8002b90:	f003 030f 	and.w	r3, r3, #15
 8002b94:	490b      	ldr	r1, [pc, #44]	; (8002bc4 <HAL_RCC_ClockConfig+0x1f4>)
 8002b96:	5ccb      	ldrb	r3, [r1, r3]
 8002b98:	f003 031f 	and.w	r3, r3, #31
 8002b9c:	fa22 f303 	lsr.w	r3, r2, r3
 8002ba0:	4a09      	ldr	r2, [pc, #36]	; (8002bc8 <HAL_RCC_ClockConfig+0x1f8>)
 8002ba2:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8002ba4:	4b09      	ldr	r3, [pc, #36]	; (8002bcc <HAL_RCC_ClockConfig+0x1fc>)
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	4618      	mov	r0, r3
 8002baa:	f7fe fdd9 	bl	8001760 <HAL_InitTick>
 8002bae:	4603      	mov	r3, r0
 8002bb0:	72fb      	strb	r3, [r7, #11]

  return status;
 8002bb2:	7afb      	ldrb	r3, [r7, #11]
}
 8002bb4:	4618      	mov	r0, r3
 8002bb6:	3710      	adds	r7, #16
 8002bb8:	46bd      	mov	sp, r7
 8002bba:	bd80      	pop	{r7, pc}
 8002bbc:	40022000 	.word	0x40022000
 8002bc0:	40021000 	.word	0x40021000
 8002bc4:	080058e0 	.word	0x080058e0
 8002bc8:	20000014 	.word	0x20000014
 8002bcc:	20000018 	.word	0x20000018

08002bd0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002bd0:	b480      	push	{r7}
 8002bd2:	b089      	sub	sp, #36	; 0x24
 8002bd4:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8002bd6:	2300      	movs	r3, #0
 8002bd8:	61fb      	str	r3, [r7, #28]
 8002bda:	2300      	movs	r3, #0
 8002bdc:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002bde:	4b3e      	ldr	r3, [pc, #248]	; (8002cd8 <HAL_RCC_GetSysClockFreq+0x108>)
 8002be0:	689b      	ldr	r3, [r3, #8]
 8002be2:	f003 030c 	and.w	r3, r3, #12
 8002be6:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002be8:	4b3b      	ldr	r3, [pc, #236]	; (8002cd8 <HAL_RCC_GetSysClockFreq+0x108>)
 8002bea:	68db      	ldr	r3, [r3, #12]
 8002bec:	f003 0303 	and.w	r3, r3, #3
 8002bf0:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002bf2:	693b      	ldr	r3, [r7, #16]
 8002bf4:	2b00      	cmp	r3, #0
 8002bf6:	d005      	beq.n	8002c04 <HAL_RCC_GetSysClockFreq+0x34>
 8002bf8:	693b      	ldr	r3, [r7, #16]
 8002bfa:	2b0c      	cmp	r3, #12
 8002bfc:	d121      	bne.n	8002c42 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8002bfe:	68fb      	ldr	r3, [r7, #12]
 8002c00:	2b01      	cmp	r3, #1
 8002c02:	d11e      	bne.n	8002c42 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8002c04:	4b34      	ldr	r3, [pc, #208]	; (8002cd8 <HAL_RCC_GetSysClockFreq+0x108>)
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	f003 0308 	and.w	r3, r3, #8
 8002c0c:	2b00      	cmp	r3, #0
 8002c0e:	d107      	bne.n	8002c20 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8002c10:	4b31      	ldr	r3, [pc, #196]	; (8002cd8 <HAL_RCC_GetSysClockFreq+0x108>)
 8002c12:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002c16:	0a1b      	lsrs	r3, r3, #8
 8002c18:	f003 030f 	and.w	r3, r3, #15
 8002c1c:	61fb      	str	r3, [r7, #28]
 8002c1e:	e005      	b.n	8002c2c <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8002c20:	4b2d      	ldr	r3, [pc, #180]	; (8002cd8 <HAL_RCC_GetSysClockFreq+0x108>)
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	091b      	lsrs	r3, r3, #4
 8002c26:	f003 030f 	and.w	r3, r3, #15
 8002c2a:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8002c2c:	4a2b      	ldr	r2, [pc, #172]	; (8002cdc <HAL_RCC_GetSysClockFreq+0x10c>)
 8002c2e:	69fb      	ldr	r3, [r7, #28]
 8002c30:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002c34:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002c36:	693b      	ldr	r3, [r7, #16]
 8002c38:	2b00      	cmp	r3, #0
 8002c3a:	d10d      	bne.n	8002c58 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8002c3c:	69fb      	ldr	r3, [r7, #28]
 8002c3e:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002c40:	e00a      	b.n	8002c58 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8002c42:	693b      	ldr	r3, [r7, #16]
 8002c44:	2b04      	cmp	r3, #4
 8002c46:	d102      	bne.n	8002c4e <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8002c48:	4b25      	ldr	r3, [pc, #148]	; (8002ce0 <HAL_RCC_GetSysClockFreq+0x110>)
 8002c4a:	61bb      	str	r3, [r7, #24]
 8002c4c:	e004      	b.n	8002c58 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8002c4e:	693b      	ldr	r3, [r7, #16]
 8002c50:	2b08      	cmp	r3, #8
 8002c52:	d101      	bne.n	8002c58 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002c54:	4b23      	ldr	r3, [pc, #140]	; (8002ce4 <HAL_RCC_GetSysClockFreq+0x114>)
 8002c56:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8002c58:	693b      	ldr	r3, [r7, #16]
 8002c5a:	2b0c      	cmp	r3, #12
 8002c5c:	d134      	bne.n	8002cc8 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002c5e:	4b1e      	ldr	r3, [pc, #120]	; (8002cd8 <HAL_RCC_GetSysClockFreq+0x108>)
 8002c60:	68db      	ldr	r3, [r3, #12]
 8002c62:	f003 0303 	and.w	r3, r3, #3
 8002c66:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8002c68:	68bb      	ldr	r3, [r7, #8]
 8002c6a:	2b02      	cmp	r3, #2
 8002c6c:	d003      	beq.n	8002c76 <HAL_RCC_GetSysClockFreq+0xa6>
 8002c6e:	68bb      	ldr	r3, [r7, #8]
 8002c70:	2b03      	cmp	r3, #3
 8002c72:	d003      	beq.n	8002c7c <HAL_RCC_GetSysClockFreq+0xac>
 8002c74:	e005      	b.n	8002c82 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8002c76:	4b1a      	ldr	r3, [pc, #104]	; (8002ce0 <HAL_RCC_GetSysClockFreq+0x110>)
 8002c78:	617b      	str	r3, [r7, #20]
      break;
 8002c7a:	e005      	b.n	8002c88 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8002c7c:	4b19      	ldr	r3, [pc, #100]	; (8002ce4 <HAL_RCC_GetSysClockFreq+0x114>)
 8002c7e:	617b      	str	r3, [r7, #20]
      break;
 8002c80:	e002      	b.n	8002c88 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8002c82:	69fb      	ldr	r3, [r7, #28]
 8002c84:	617b      	str	r3, [r7, #20]
      break;
 8002c86:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002c88:	4b13      	ldr	r3, [pc, #76]	; (8002cd8 <HAL_RCC_GetSysClockFreq+0x108>)
 8002c8a:	68db      	ldr	r3, [r3, #12]
 8002c8c:	091b      	lsrs	r3, r3, #4
 8002c8e:	f003 0307 	and.w	r3, r3, #7
 8002c92:	3301      	adds	r3, #1
 8002c94:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8002c96:	4b10      	ldr	r3, [pc, #64]	; (8002cd8 <HAL_RCC_GetSysClockFreq+0x108>)
 8002c98:	68db      	ldr	r3, [r3, #12]
 8002c9a:	0a1b      	lsrs	r3, r3, #8
 8002c9c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002ca0:	697a      	ldr	r2, [r7, #20]
 8002ca2:	fb03 f202 	mul.w	r2, r3, r2
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	fbb2 f3f3 	udiv	r3, r2, r3
 8002cac:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002cae:	4b0a      	ldr	r3, [pc, #40]	; (8002cd8 <HAL_RCC_GetSysClockFreq+0x108>)
 8002cb0:	68db      	ldr	r3, [r3, #12]
 8002cb2:	0e5b      	lsrs	r3, r3, #25
 8002cb4:	f003 0303 	and.w	r3, r3, #3
 8002cb8:	3301      	adds	r3, #1
 8002cba:	005b      	lsls	r3, r3, #1
 8002cbc:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8002cbe:	697a      	ldr	r2, [r7, #20]
 8002cc0:	683b      	ldr	r3, [r7, #0]
 8002cc2:	fbb2 f3f3 	udiv	r3, r2, r3
 8002cc6:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8002cc8:	69bb      	ldr	r3, [r7, #24]
}
 8002cca:	4618      	mov	r0, r3
 8002ccc:	3724      	adds	r7, #36	; 0x24
 8002cce:	46bd      	mov	sp, r7
 8002cd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cd4:	4770      	bx	lr
 8002cd6:	bf00      	nop
 8002cd8:	40021000 	.word	0x40021000
 8002cdc:	080058f8 	.word	0x080058f8
 8002ce0:	00f42400 	.word	0x00f42400
 8002ce4:	007a1200 	.word	0x007a1200

08002ce8 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002ce8:	b480      	push	{r7}
 8002cea:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002cec:	4b03      	ldr	r3, [pc, #12]	; (8002cfc <HAL_RCC_GetHCLKFreq+0x14>)
 8002cee:	681b      	ldr	r3, [r3, #0]
}
 8002cf0:	4618      	mov	r0, r3
 8002cf2:	46bd      	mov	sp, r7
 8002cf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cf8:	4770      	bx	lr
 8002cfa:	bf00      	nop
 8002cfc:	20000014 	.word	0x20000014

08002d00 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002d00:	b580      	push	{r7, lr}
 8002d02:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8002d04:	f7ff fff0 	bl	8002ce8 <HAL_RCC_GetHCLKFreq>
 8002d08:	4602      	mov	r2, r0
 8002d0a:	4b06      	ldr	r3, [pc, #24]	; (8002d24 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002d0c:	689b      	ldr	r3, [r3, #8]
 8002d0e:	0a1b      	lsrs	r3, r3, #8
 8002d10:	f003 0307 	and.w	r3, r3, #7
 8002d14:	4904      	ldr	r1, [pc, #16]	; (8002d28 <HAL_RCC_GetPCLK1Freq+0x28>)
 8002d16:	5ccb      	ldrb	r3, [r1, r3]
 8002d18:	f003 031f 	and.w	r3, r3, #31
 8002d1c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002d20:	4618      	mov	r0, r3
 8002d22:	bd80      	pop	{r7, pc}
 8002d24:	40021000 	.word	0x40021000
 8002d28:	080058f0 	.word	0x080058f0

08002d2c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002d2c:	b580      	push	{r7, lr}
 8002d2e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8002d30:	f7ff ffda 	bl	8002ce8 <HAL_RCC_GetHCLKFreq>
 8002d34:	4602      	mov	r2, r0
 8002d36:	4b06      	ldr	r3, [pc, #24]	; (8002d50 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002d38:	689b      	ldr	r3, [r3, #8]
 8002d3a:	0adb      	lsrs	r3, r3, #11
 8002d3c:	f003 0307 	and.w	r3, r3, #7
 8002d40:	4904      	ldr	r1, [pc, #16]	; (8002d54 <HAL_RCC_GetPCLK2Freq+0x28>)
 8002d42:	5ccb      	ldrb	r3, [r1, r3]
 8002d44:	f003 031f 	and.w	r3, r3, #31
 8002d48:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002d4c:	4618      	mov	r0, r3
 8002d4e:	bd80      	pop	{r7, pc}
 8002d50:	40021000 	.word	0x40021000
 8002d54:	080058f0 	.word	0x080058f0

08002d58 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8002d58:	b580      	push	{r7, lr}
 8002d5a:	b086      	sub	sp, #24
 8002d5c:	af00      	add	r7, sp, #0
 8002d5e:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8002d60:	2300      	movs	r3, #0
 8002d62:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8002d64:	4b2a      	ldr	r3, [pc, #168]	; (8002e10 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002d66:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002d68:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002d6c:	2b00      	cmp	r3, #0
 8002d6e:	d003      	beq.n	8002d78 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8002d70:	f7ff f9ee 	bl	8002150 <HAL_PWREx_GetVoltageRange>
 8002d74:	6178      	str	r0, [r7, #20]
 8002d76:	e014      	b.n	8002da2 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8002d78:	4b25      	ldr	r3, [pc, #148]	; (8002e10 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002d7a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002d7c:	4a24      	ldr	r2, [pc, #144]	; (8002e10 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002d7e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002d82:	6593      	str	r3, [r2, #88]	; 0x58
 8002d84:	4b22      	ldr	r3, [pc, #136]	; (8002e10 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002d86:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002d88:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002d8c:	60fb      	str	r3, [r7, #12]
 8002d8e:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8002d90:	f7ff f9de 	bl	8002150 <HAL_PWREx_GetVoltageRange>
 8002d94:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8002d96:	4b1e      	ldr	r3, [pc, #120]	; (8002e10 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002d98:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002d9a:	4a1d      	ldr	r2, [pc, #116]	; (8002e10 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002d9c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002da0:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002da2:	697b      	ldr	r3, [r7, #20]
 8002da4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002da8:	d10b      	bne.n	8002dc2 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	2b80      	cmp	r3, #128	; 0x80
 8002dae:	d919      	bls.n	8002de4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	2ba0      	cmp	r3, #160	; 0xa0
 8002db4:	d902      	bls.n	8002dbc <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002db6:	2302      	movs	r3, #2
 8002db8:	613b      	str	r3, [r7, #16]
 8002dba:	e013      	b.n	8002de4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002dbc:	2301      	movs	r3, #1
 8002dbe:	613b      	str	r3, [r7, #16]
 8002dc0:	e010      	b.n	8002de4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	2b80      	cmp	r3, #128	; 0x80
 8002dc6:	d902      	bls.n	8002dce <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8002dc8:	2303      	movs	r3, #3
 8002dca:	613b      	str	r3, [r7, #16]
 8002dcc:	e00a      	b.n	8002de4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	2b80      	cmp	r3, #128	; 0x80
 8002dd2:	d102      	bne.n	8002dda <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002dd4:	2302      	movs	r3, #2
 8002dd6:	613b      	str	r3, [r7, #16]
 8002dd8:	e004      	b.n	8002de4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	2b70      	cmp	r3, #112	; 0x70
 8002dde:	d101      	bne.n	8002de4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002de0:	2301      	movs	r3, #1
 8002de2:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8002de4:	4b0b      	ldr	r3, [pc, #44]	; (8002e14 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	f023 0207 	bic.w	r2, r3, #7
 8002dec:	4909      	ldr	r1, [pc, #36]	; (8002e14 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002dee:	693b      	ldr	r3, [r7, #16]
 8002df0:	4313      	orrs	r3, r2
 8002df2:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8002df4:	4b07      	ldr	r3, [pc, #28]	; (8002e14 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	f003 0307 	and.w	r3, r3, #7
 8002dfc:	693a      	ldr	r2, [r7, #16]
 8002dfe:	429a      	cmp	r2, r3
 8002e00:	d001      	beq.n	8002e06 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8002e02:	2301      	movs	r3, #1
 8002e04:	e000      	b.n	8002e08 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8002e06:	2300      	movs	r3, #0
}
 8002e08:	4618      	mov	r0, r3
 8002e0a:	3718      	adds	r7, #24
 8002e0c:	46bd      	mov	sp, r7
 8002e0e:	bd80      	pop	{r7, pc}
 8002e10:	40021000 	.word	0x40021000
 8002e14:	40022000 	.word	0x40022000

08002e18 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002e18:	b580      	push	{r7, lr}
 8002e1a:	b086      	sub	sp, #24
 8002e1c:	af00      	add	r7, sp, #0
 8002e1e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8002e20:	2300      	movs	r3, #0
 8002e22:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002e24:	2300      	movs	r3, #0
 8002e26:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002e30:	2b00      	cmp	r3, #0
 8002e32:	d041      	beq.n	8002eb8 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002e38:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8002e3c:	d02a      	beq.n	8002e94 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8002e3e:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8002e42:	d824      	bhi.n	8002e8e <HAL_RCCEx_PeriphCLKConfig+0x76>
 8002e44:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8002e48:	d008      	beq.n	8002e5c <HAL_RCCEx_PeriphCLKConfig+0x44>
 8002e4a:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8002e4e:	d81e      	bhi.n	8002e8e <HAL_RCCEx_PeriphCLKConfig+0x76>
 8002e50:	2b00      	cmp	r3, #0
 8002e52:	d00a      	beq.n	8002e6a <HAL_RCCEx_PeriphCLKConfig+0x52>
 8002e54:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002e58:	d010      	beq.n	8002e7c <HAL_RCCEx_PeriphCLKConfig+0x64>
 8002e5a:	e018      	b.n	8002e8e <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8002e5c:	4b86      	ldr	r3, [pc, #536]	; (8003078 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002e5e:	68db      	ldr	r3, [r3, #12]
 8002e60:	4a85      	ldr	r2, [pc, #532]	; (8003078 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002e62:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002e66:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002e68:	e015      	b.n	8002e96 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	3304      	adds	r3, #4
 8002e6e:	2100      	movs	r1, #0
 8002e70:	4618      	mov	r0, r3
 8002e72:	f000 fabb 	bl	80033ec <RCCEx_PLLSAI1_Config>
 8002e76:	4603      	mov	r3, r0
 8002e78:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002e7a:	e00c      	b.n	8002e96 <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	3320      	adds	r3, #32
 8002e80:	2100      	movs	r1, #0
 8002e82:	4618      	mov	r0, r3
 8002e84:	f000 fba6 	bl	80035d4 <RCCEx_PLLSAI2_Config>
 8002e88:	4603      	mov	r3, r0
 8002e8a:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002e8c:	e003      	b.n	8002e96 <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002e8e:	2301      	movs	r3, #1
 8002e90:	74fb      	strb	r3, [r7, #19]
      break;
 8002e92:	e000      	b.n	8002e96 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8002e94:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002e96:	7cfb      	ldrb	r3, [r7, #19]
 8002e98:	2b00      	cmp	r3, #0
 8002e9a:	d10b      	bne.n	8002eb4 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002e9c:	4b76      	ldr	r3, [pc, #472]	; (8003078 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002e9e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002ea2:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002eaa:	4973      	ldr	r1, [pc, #460]	; (8003078 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002eac:	4313      	orrs	r3, r2
 8002eae:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8002eb2:	e001      	b.n	8002eb8 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002eb4:	7cfb      	ldrb	r3, [r7, #19]
 8002eb6:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002ec0:	2b00      	cmp	r3, #0
 8002ec2:	d041      	beq.n	8002f48 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002ec8:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8002ecc:	d02a      	beq.n	8002f24 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 8002ece:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8002ed2:	d824      	bhi.n	8002f1e <HAL_RCCEx_PeriphCLKConfig+0x106>
 8002ed4:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002ed8:	d008      	beq.n	8002eec <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8002eda:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002ede:	d81e      	bhi.n	8002f1e <HAL_RCCEx_PeriphCLKConfig+0x106>
 8002ee0:	2b00      	cmp	r3, #0
 8002ee2:	d00a      	beq.n	8002efa <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8002ee4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002ee8:	d010      	beq.n	8002f0c <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8002eea:	e018      	b.n	8002f1e <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8002eec:	4b62      	ldr	r3, [pc, #392]	; (8003078 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002eee:	68db      	ldr	r3, [r3, #12]
 8002ef0:	4a61      	ldr	r2, [pc, #388]	; (8003078 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002ef2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002ef6:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002ef8:	e015      	b.n	8002f26 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	3304      	adds	r3, #4
 8002efe:	2100      	movs	r1, #0
 8002f00:	4618      	mov	r0, r3
 8002f02:	f000 fa73 	bl	80033ec <RCCEx_PLLSAI1_Config>
 8002f06:	4603      	mov	r3, r0
 8002f08:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002f0a:	e00c      	b.n	8002f26 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	3320      	adds	r3, #32
 8002f10:	2100      	movs	r1, #0
 8002f12:	4618      	mov	r0, r3
 8002f14:	f000 fb5e 	bl	80035d4 <RCCEx_PLLSAI2_Config>
 8002f18:	4603      	mov	r3, r0
 8002f1a:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002f1c:	e003      	b.n	8002f26 <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002f1e:	2301      	movs	r3, #1
 8002f20:	74fb      	strb	r3, [r7, #19]
      break;
 8002f22:	e000      	b.n	8002f26 <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8002f24:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002f26:	7cfb      	ldrb	r3, [r7, #19]
 8002f28:	2b00      	cmp	r3, #0
 8002f2a:	d10b      	bne.n	8002f44 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8002f2c:	4b52      	ldr	r3, [pc, #328]	; (8003078 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002f2e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002f32:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002f3a:	494f      	ldr	r1, [pc, #316]	; (8003078 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002f3c:	4313      	orrs	r3, r2
 8002f3e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8002f42:	e001      	b.n	8002f48 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002f44:	7cfb      	ldrb	r3, [r7, #19]
 8002f46:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002f50:	2b00      	cmp	r3, #0
 8002f52:	f000 80a0 	beq.w	8003096 <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002f56:	2300      	movs	r3, #0
 8002f58:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8002f5a:	4b47      	ldr	r3, [pc, #284]	; (8003078 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002f5c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002f5e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002f62:	2b00      	cmp	r3, #0
 8002f64:	d101      	bne.n	8002f6a <HAL_RCCEx_PeriphCLKConfig+0x152>
 8002f66:	2301      	movs	r3, #1
 8002f68:	e000      	b.n	8002f6c <HAL_RCCEx_PeriphCLKConfig+0x154>
 8002f6a:	2300      	movs	r3, #0
 8002f6c:	2b00      	cmp	r3, #0
 8002f6e:	d00d      	beq.n	8002f8c <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002f70:	4b41      	ldr	r3, [pc, #260]	; (8003078 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002f72:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002f74:	4a40      	ldr	r2, [pc, #256]	; (8003078 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002f76:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002f7a:	6593      	str	r3, [r2, #88]	; 0x58
 8002f7c:	4b3e      	ldr	r3, [pc, #248]	; (8003078 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002f7e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002f80:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002f84:	60bb      	str	r3, [r7, #8]
 8002f86:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002f88:	2301      	movs	r3, #1
 8002f8a:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002f8c:	4b3b      	ldr	r3, [pc, #236]	; (800307c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	4a3a      	ldr	r2, [pc, #232]	; (800307c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8002f92:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002f96:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002f98:	f7fe fc32 	bl	8001800 <HAL_GetTick>
 8002f9c:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002f9e:	e009      	b.n	8002fb4 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002fa0:	f7fe fc2e 	bl	8001800 <HAL_GetTick>
 8002fa4:	4602      	mov	r2, r0
 8002fa6:	68fb      	ldr	r3, [r7, #12]
 8002fa8:	1ad3      	subs	r3, r2, r3
 8002faa:	2b02      	cmp	r3, #2
 8002fac:	d902      	bls.n	8002fb4 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 8002fae:	2303      	movs	r3, #3
 8002fb0:	74fb      	strb	r3, [r7, #19]
        break;
 8002fb2:	e005      	b.n	8002fc0 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002fb4:	4b31      	ldr	r3, [pc, #196]	; (800307c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002fbc:	2b00      	cmp	r3, #0
 8002fbe:	d0ef      	beq.n	8002fa0 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8002fc0:	7cfb      	ldrb	r3, [r7, #19]
 8002fc2:	2b00      	cmp	r3, #0
 8002fc4:	d15c      	bne.n	8003080 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8002fc6:	4b2c      	ldr	r3, [pc, #176]	; (8003078 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002fc8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002fcc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002fd0:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8002fd2:	697b      	ldr	r3, [r7, #20]
 8002fd4:	2b00      	cmp	r3, #0
 8002fd6:	d01f      	beq.n	8003018 <HAL_RCCEx_PeriphCLKConfig+0x200>
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002fde:	697a      	ldr	r2, [r7, #20]
 8002fe0:	429a      	cmp	r2, r3
 8002fe2:	d019      	beq.n	8003018 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8002fe4:	4b24      	ldr	r3, [pc, #144]	; (8003078 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002fe6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002fea:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002fee:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002ff0:	4b21      	ldr	r3, [pc, #132]	; (8003078 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002ff2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002ff6:	4a20      	ldr	r2, [pc, #128]	; (8003078 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002ff8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002ffc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003000:	4b1d      	ldr	r3, [pc, #116]	; (8003078 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003002:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003006:	4a1c      	ldr	r2, [pc, #112]	; (8003078 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003008:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800300c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8003010:	4a19      	ldr	r2, [pc, #100]	; (8003078 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003012:	697b      	ldr	r3, [r7, #20]
 8003014:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8003018:	697b      	ldr	r3, [r7, #20]
 800301a:	f003 0301 	and.w	r3, r3, #1
 800301e:	2b00      	cmp	r3, #0
 8003020:	d016      	beq.n	8003050 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003022:	f7fe fbed 	bl	8001800 <HAL_GetTick>
 8003026:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003028:	e00b      	b.n	8003042 <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800302a:	f7fe fbe9 	bl	8001800 <HAL_GetTick>
 800302e:	4602      	mov	r2, r0
 8003030:	68fb      	ldr	r3, [r7, #12]
 8003032:	1ad3      	subs	r3, r2, r3
 8003034:	f241 3288 	movw	r2, #5000	; 0x1388
 8003038:	4293      	cmp	r3, r2
 800303a:	d902      	bls.n	8003042 <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 800303c:	2303      	movs	r3, #3
 800303e:	74fb      	strb	r3, [r7, #19]
            break;
 8003040:	e006      	b.n	8003050 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003042:	4b0d      	ldr	r3, [pc, #52]	; (8003078 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003044:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003048:	f003 0302 	and.w	r3, r3, #2
 800304c:	2b00      	cmp	r3, #0
 800304e:	d0ec      	beq.n	800302a <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8003050:	7cfb      	ldrb	r3, [r7, #19]
 8003052:	2b00      	cmp	r3, #0
 8003054:	d10c      	bne.n	8003070 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003056:	4b08      	ldr	r3, [pc, #32]	; (8003078 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003058:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800305c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003066:	4904      	ldr	r1, [pc, #16]	; (8003078 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003068:	4313      	orrs	r3, r2
 800306a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 800306e:	e009      	b.n	8003084 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003070:	7cfb      	ldrb	r3, [r7, #19]
 8003072:	74bb      	strb	r3, [r7, #18]
 8003074:	e006      	b.n	8003084 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 8003076:	bf00      	nop
 8003078:	40021000 	.word	0x40021000
 800307c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003080:	7cfb      	ldrb	r3, [r7, #19]
 8003082:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003084:	7c7b      	ldrb	r3, [r7, #17]
 8003086:	2b01      	cmp	r3, #1
 8003088:	d105      	bne.n	8003096 <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800308a:	4b9e      	ldr	r3, [pc, #632]	; (8003304 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800308c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800308e:	4a9d      	ldr	r2, [pc, #628]	; (8003304 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003090:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003094:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	f003 0301 	and.w	r3, r3, #1
 800309e:	2b00      	cmp	r3, #0
 80030a0:	d00a      	beq.n	80030b8 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80030a2:	4b98      	ldr	r3, [pc, #608]	; (8003304 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80030a4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80030a8:	f023 0203 	bic.w	r2, r3, #3
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80030b0:	4994      	ldr	r1, [pc, #592]	; (8003304 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80030b2:	4313      	orrs	r3, r2
 80030b4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	f003 0302 	and.w	r3, r3, #2
 80030c0:	2b00      	cmp	r3, #0
 80030c2:	d00a      	beq.n	80030da <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80030c4:	4b8f      	ldr	r3, [pc, #572]	; (8003304 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80030c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80030ca:	f023 020c 	bic.w	r2, r3, #12
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80030d2:	498c      	ldr	r1, [pc, #560]	; (8003304 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80030d4:	4313      	orrs	r3, r2
 80030d6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	f003 0304 	and.w	r3, r3, #4
 80030e2:	2b00      	cmp	r3, #0
 80030e4:	d00a      	beq.n	80030fc <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80030e6:	4b87      	ldr	r3, [pc, #540]	; (8003304 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80030e8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80030ec:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030f4:	4983      	ldr	r1, [pc, #524]	; (8003304 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80030f6:	4313      	orrs	r3, r2
 80030f8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	f003 0308 	and.w	r3, r3, #8
 8003104:	2b00      	cmp	r3, #0
 8003106:	d00a      	beq.n	800311e <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003108:	4b7e      	ldr	r3, [pc, #504]	; (8003304 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800310a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800310e:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003116:	497b      	ldr	r1, [pc, #492]	; (8003304 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003118:	4313      	orrs	r3, r2
 800311a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	f003 0310 	and.w	r3, r3, #16
 8003126:	2b00      	cmp	r3, #0
 8003128:	d00a      	beq.n	8003140 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800312a:	4b76      	ldr	r3, [pc, #472]	; (8003304 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800312c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003130:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003138:	4972      	ldr	r1, [pc, #456]	; (8003304 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800313a:	4313      	orrs	r3, r2
 800313c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	f003 0320 	and.w	r3, r3, #32
 8003148:	2b00      	cmp	r3, #0
 800314a:	d00a      	beq.n	8003162 <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800314c:	4b6d      	ldr	r3, [pc, #436]	; (8003304 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800314e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003152:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800315a:	496a      	ldr	r1, [pc, #424]	; (8003304 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800315c:	4313      	orrs	r3, r2
 800315e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800316a:	2b00      	cmp	r3, #0
 800316c:	d00a      	beq.n	8003184 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800316e:	4b65      	ldr	r3, [pc, #404]	; (8003304 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003170:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003174:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800317c:	4961      	ldr	r1, [pc, #388]	; (8003304 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800317e:	4313      	orrs	r3, r2
 8003180:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800318c:	2b00      	cmp	r3, #0
 800318e:	d00a      	beq.n	80031a6 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8003190:	4b5c      	ldr	r3, [pc, #368]	; (8003304 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003192:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003196:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800319e:	4959      	ldr	r1, [pc, #356]	; (8003304 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80031a0:	4313      	orrs	r3, r2
 80031a2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80031ae:	2b00      	cmp	r3, #0
 80031b0:	d00a      	beq.n	80031c8 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80031b2:	4b54      	ldr	r3, [pc, #336]	; (8003304 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80031b4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80031b8:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80031c0:	4950      	ldr	r1, [pc, #320]	; (8003304 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80031c2:	4313      	orrs	r3, r2
 80031c4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80031d0:	2b00      	cmp	r3, #0
 80031d2:	d00a      	beq.n	80031ea <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80031d4:	4b4b      	ldr	r3, [pc, #300]	; (8003304 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80031d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80031da:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80031e2:	4948      	ldr	r1, [pc, #288]	; (8003304 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80031e4:	4313      	orrs	r3, r2
 80031e6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80031f2:	2b00      	cmp	r3, #0
 80031f4:	d00a      	beq.n	800320c <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80031f6:	4b43      	ldr	r3, [pc, #268]	; (8003304 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80031f8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80031fc:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003204:	493f      	ldr	r1, [pc, #252]	; (8003304 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003206:	4313      	orrs	r3, r2
 8003208:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003214:	2b00      	cmp	r3, #0
 8003216:	d028      	beq.n	800326a <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003218:	4b3a      	ldr	r3, [pc, #232]	; (8003304 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800321a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800321e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003226:	4937      	ldr	r1, [pc, #220]	; (8003304 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003228:	4313      	orrs	r3, r2
 800322a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003232:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003236:	d106      	bne.n	8003246 <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003238:	4b32      	ldr	r3, [pc, #200]	; (8003304 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800323a:	68db      	ldr	r3, [r3, #12]
 800323c:	4a31      	ldr	r2, [pc, #196]	; (8003304 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800323e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003242:	60d3      	str	r3, [r2, #12]
 8003244:	e011      	b.n	800326a <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800324a:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800324e:	d10c      	bne.n	800326a <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	3304      	adds	r3, #4
 8003254:	2101      	movs	r1, #1
 8003256:	4618      	mov	r0, r3
 8003258:	f000 f8c8 	bl	80033ec <RCCEx_PLLSAI1_Config>
 800325c:	4603      	mov	r3, r0
 800325e:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8003260:	7cfb      	ldrb	r3, [r7, #19]
 8003262:	2b00      	cmp	r3, #0
 8003264:	d001      	beq.n	800326a <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 8003266:	7cfb      	ldrb	r3, [r7, #19]
 8003268:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003272:	2b00      	cmp	r3, #0
 8003274:	d028      	beq.n	80032c8 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8003276:	4b23      	ldr	r3, [pc, #140]	; (8003304 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003278:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800327c:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003284:	491f      	ldr	r1, [pc, #124]	; (8003304 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003286:	4313      	orrs	r3, r2
 8003288:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003290:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003294:	d106      	bne.n	80032a4 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003296:	4b1b      	ldr	r3, [pc, #108]	; (8003304 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003298:	68db      	ldr	r3, [r3, #12]
 800329a:	4a1a      	ldr	r2, [pc, #104]	; (8003304 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800329c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80032a0:	60d3      	str	r3, [r2, #12]
 80032a2:	e011      	b.n	80032c8 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80032a8:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80032ac:	d10c      	bne.n	80032c8 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	3304      	adds	r3, #4
 80032b2:	2101      	movs	r1, #1
 80032b4:	4618      	mov	r0, r3
 80032b6:	f000 f899 	bl	80033ec <RCCEx_PLLSAI1_Config>
 80032ba:	4603      	mov	r3, r0
 80032bc:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80032be:	7cfb      	ldrb	r3, [r7, #19]
 80032c0:	2b00      	cmp	r3, #0
 80032c2:	d001      	beq.n	80032c8 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 80032c4:	7cfb      	ldrb	r3, [r7, #19]
 80032c6:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80032d0:	2b00      	cmp	r3, #0
 80032d2:	d02b      	beq.n	800332c <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80032d4:	4b0b      	ldr	r3, [pc, #44]	; (8003304 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80032d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80032da:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80032e2:	4908      	ldr	r1, [pc, #32]	; (8003304 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80032e4:	4313      	orrs	r3, r2
 80032e6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80032ee:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80032f2:	d109      	bne.n	8003308 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80032f4:	4b03      	ldr	r3, [pc, #12]	; (8003304 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80032f6:	68db      	ldr	r3, [r3, #12]
 80032f8:	4a02      	ldr	r2, [pc, #8]	; (8003304 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80032fa:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80032fe:	60d3      	str	r3, [r2, #12]
 8003300:	e014      	b.n	800332c <HAL_RCCEx_PeriphCLKConfig+0x514>
 8003302:	bf00      	nop
 8003304:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800330c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003310:	d10c      	bne.n	800332c <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	3304      	adds	r3, #4
 8003316:	2101      	movs	r1, #1
 8003318:	4618      	mov	r0, r3
 800331a:	f000 f867 	bl	80033ec <RCCEx_PLLSAI1_Config>
 800331e:	4603      	mov	r3, r0
 8003320:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003322:	7cfb      	ldrb	r3, [r7, #19]
 8003324:	2b00      	cmp	r3, #0
 8003326:	d001      	beq.n	800332c <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 8003328:	7cfb      	ldrb	r3, [r7, #19]
 800332a:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003334:	2b00      	cmp	r3, #0
 8003336:	d02f      	beq.n	8003398 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003338:	4b2b      	ldr	r3, [pc, #172]	; (80033e8 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800333a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800333e:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003346:	4928      	ldr	r1, [pc, #160]	; (80033e8 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003348:	4313      	orrs	r3, r2
 800334a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003352:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003356:	d10d      	bne.n	8003374 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	3304      	adds	r3, #4
 800335c:	2102      	movs	r1, #2
 800335e:	4618      	mov	r0, r3
 8003360:	f000 f844 	bl	80033ec <RCCEx_PLLSAI1_Config>
 8003364:	4603      	mov	r3, r0
 8003366:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003368:	7cfb      	ldrb	r3, [r7, #19]
 800336a:	2b00      	cmp	r3, #0
 800336c:	d014      	beq.n	8003398 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 800336e:	7cfb      	ldrb	r3, [r7, #19]
 8003370:	74bb      	strb	r3, [r7, #18]
 8003372:	e011      	b.n	8003398 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003378:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800337c:	d10c      	bne.n	8003398 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	3320      	adds	r3, #32
 8003382:	2102      	movs	r1, #2
 8003384:	4618      	mov	r0, r3
 8003386:	f000 f925 	bl	80035d4 <RCCEx_PLLSAI2_Config>
 800338a:	4603      	mov	r3, r0
 800338c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800338e:	7cfb      	ldrb	r3, [r7, #19]
 8003390:	2b00      	cmp	r3, #0
 8003392:	d001      	beq.n	8003398 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8003394:	7cfb      	ldrb	r3, [r7, #19]
 8003396:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80033a0:	2b00      	cmp	r3, #0
 80033a2:	d00a      	beq.n	80033ba <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80033a4:	4b10      	ldr	r3, [pc, #64]	; (80033e8 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80033a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80033aa:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80033b2:	490d      	ldr	r1, [pc, #52]	; (80033e8 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80033b4:	4313      	orrs	r3, r2
 80033b6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80033c2:	2b00      	cmp	r3, #0
 80033c4:	d00b      	beq.n	80033de <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80033c6:	4b08      	ldr	r3, [pc, #32]	; (80033e8 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80033c8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80033cc:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80033d6:	4904      	ldr	r1, [pc, #16]	; (80033e8 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80033d8:	4313      	orrs	r3, r2
 80033da:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 80033de:	7cbb      	ldrb	r3, [r7, #18]
}
 80033e0:	4618      	mov	r0, r3
 80033e2:	3718      	adds	r7, #24
 80033e4:	46bd      	mov	sp, r7
 80033e6:	bd80      	pop	{r7, pc}
 80033e8:	40021000 	.word	0x40021000

080033ec <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 80033ec:	b580      	push	{r7, lr}
 80033ee:	b084      	sub	sp, #16
 80033f0:	af00      	add	r7, sp, #0
 80033f2:	6078      	str	r0, [r7, #4]
 80033f4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80033f6:	2300      	movs	r3, #0
 80033f8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80033fa:	4b75      	ldr	r3, [pc, #468]	; (80035d0 <RCCEx_PLLSAI1_Config+0x1e4>)
 80033fc:	68db      	ldr	r3, [r3, #12]
 80033fe:	f003 0303 	and.w	r3, r3, #3
 8003402:	2b00      	cmp	r3, #0
 8003404:	d018      	beq.n	8003438 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8003406:	4b72      	ldr	r3, [pc, #456]	; (80035d0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003408:	68db      	ldr	r3, [r3, #12]
 800340a:	f003 0203 	and.w	r2, r3, #3
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	681b      	ldr	r3, [r3, #0]
 8003412:	429a      	cmp	r2, r3
 8003414:	d10d      	bne.n	8003432 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	681b      	ldr	r3, [r3, #0]
       ||
 800341a:	2b00      	cmp	r3, #0
 800341c:	d009      	beq.n	8003432 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 800341e:	4b6c      	ldr	r3, [pc, #432]	; (80035d0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003420:	68db      	ldr	r3, [r3, #12]
 8003422:	091b      	lsrs	r3, r3, #4
 8003424:	f003 0307 	and.w	r3, r3, #7
 8003428:	1c5a      	adds	r2, r3, #1
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	685b      	ldr	r3, [r3, #4]
       ||
 800342e:	429a      	cmp	r2, r3
 8003430:	d047      	beq.n	80034c2 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8003432:	2301      	movs	r3, #1
 8003434:	73fb      	strb	r3, [r7, #15]
 8003436:	e044      	b.n	80034c2 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	2b03      	cmp	r3, #3
 800343e:	d018      	beq.n	8003472 <RCCEx_PLLSAI1_Config+0x86>
 8003440:	2b03      	cmp	r3, #3
 8003442:	d825      	bhi.n	8003490 <RCCEx_PLLSAI1_Config+0xa4>
 8003444:	2b01      	cmp	r3, #1
 8003446:	d002      	beq.n	800344e <RCCEx_PLLSAI1_Config+0x62>
 8003448:	2b02      	cmp	r3, #2
 800344a:	d009      	beq.n	8003460 <RCCEx_PLLSAI1_Config+0x74>
 800344c:	e020      	b.n	8003490 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800344e:	4b60      	ldr	r3, [pc, #384]	; (80035d0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	f003 0302 	and.w	r3, r3, #2
 8003456:	2b00      	cmp	r3, #0
 8003458:	d11d      	bne.n	8003496 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 800345a:	2301      	movs	r3, #1
 800345c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800345e:	e01a      	b.n	8003496 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8003460:	4b5b      	ldr	r3, [pc, #364]	; (80035d0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003468:	2b00      	cmp	r3, #0
 800346a:	d116      	bne.n	800349a <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 800346c:	2301      	movs	r3, #1
 800346e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003470:	e013      	b.n	800349a <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8003472:	4b57      	ldr	r3, [pc, #348]	; (80035d0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800347a:	2b00      	cmp	r3, #0
 800347c:	d10f      	bne.n	800349e <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800347e:	4b54      	ldr	r3, [pc, #336]	; (80035d0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003486:	2b00      	cmp	r3, #0
 8003488:	d109      	bne.n	800349e <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 800348a:	2301      	movs	r3, #1
 800348c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800348e:	e006      	b.n	800349e <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8003490:	2301      	movs	r3, #1
 8003492:	73fb      	strb	r3, [r7, #15]
      break;
 8003494:	e004      	b.n	80034a0 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8003496:	bf00      	nop
 8003498:	e002      	b.n	80034a0 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800349a:	bf00      	nop
 800349c:	e000      	b.n	80034a0 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800349e:	bf00      	nop
    }

    if(status == HAL_OK)
 80034a0:	7bfb      	ldrb	r3, [r7, #15]
 80034a2:	2b00      	cmp	r3, #0
 80034a4:	d10d      	bne.n	80034c2 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80034a6:	4b4a      	ldr	r3, [pc, #296]	; (80035d0 <RCCEx_PLLSAI1_Config+0x1e4>)
 80034a8:	68db      	ldr	r3, [r3, #12]
 80034aa:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	6819      	ldr	r1, [r3, #0]
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	685b      	ldr	r3, [r3, #4]
 80034b6:	3b01      	subs	r3, #1
 80034b8:	011b      	lsls	r3, r3, #4
 80034ba:	430b      	orrs	r3, r1
 80034bc:	4944      	ldr	r1, [pc, #272]	; (80035d0 <RCCEx_PLLSAI1_Config+0x1e4>)
 80034be:	4313      	orrs	r3, r2
 80034c0:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80034c2:	7bfb      	ldrb	r3, [r7, #15]
 80034c4:	2b00      	cmp	r3, #0
 80034c6:	d17d      	bne.n	80035c4 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 80034c8:	4b41      	ldr	r3, [pc, #260]	; (80035d0 <RCCEx_PLLSAI1_Config+0x1e4>)
 80034ca:	681b      	ldr	r3, [r3, #0]
 80034cc:	4a40      	ldr	r2, [pc, #256]	; (80035d0 <RCCEx_PLLSAI1_Config+0x1e4>)
 80034ce:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80034d2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80034d4:	f7fe f994 	bl	8001800 <HAL_GetTick>
 80034d8:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80034da:	e009      	b.n	80034f0 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80034dc:	f7fe f990 	bl	8001800 <HAL_GetTick>
 80034e0:	4602      	mov	r2, r0
 80034e2:	68bb      	ldr	r3, [r7, #8]
 80034e4:	1ad3      	subs	r3, r2, r3
 80034e6:	2b02      	cmp	r3, #2
 80034e8:	d902      	bls.n	80034f0 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 80034ea:	2303      	movs	r3, #3
 80034ec:	73fb      	strb	r3, [r7, #15]
        break;
 80034ee:	e005      	b.n	80034fc <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80034f0:	4b37      	ldr	r3, [pc, #220]	; (80035d0 <RCCEx_PLLSAI1_Config+0x1e4>)
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80034f8:	2b00      	cmp	r3, #0
 80034fa:	d1ef      	bne.n	80034dc <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 80034fc:	7bfb      	ldrb	r3, [r7, #15]
 80034fe:	2b00      	cmp	r3, #0
 8003500:	d160      	bne.n	80035c4 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8003502:	683b      	ldr	r3, [r7, #0]
 8003504:	2b00      	cmp	r3, #0
 8003506:	d111      	bne.n	800352c <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003508:	4b31      	ldr	r3, [pc, #196]	; (80035d0 <RCCEx_PLLSAI1_Config+0x1e4>)
 800350a:	691b      	ldr	r3, [r3, #16]
 800350c:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8003510:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003514:	687a      	ldr	r2, [r7, #4]
 8003516:	6892      	ldr	r2, [r2, #8]
 8003518:	0211      	lsls	r1, r2, #8
 800351a:	687a      	ldr	r2, [r7, #4]
 800351c:	68d2      	ldr	r2, [r2, #12]
 800351e:	0912      	lsrs	r2, r2, #4
 8003520:	0452      	lsls	r2, r2, #17
 8003522:	430a      	orrs	r2, r1
 8003524:	492a      	ldr	r1, [pc, #168]	; (80035d0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003526:	4313      	orrs	r3, r2
 8003528:	610b      	str	r3, [r1, #16]
 800352a:	e027      	b.n	800357c <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 800352c:	683b      	ldr	r3, [r7, #0]
 800352e:	2b01      	cmp	r3, #1
 8003530:	d112      	bne.n	8003558 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003532:	4b27      	ldr	r3, [pc, #156]	; (80035d0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003534:	691b      	ldr	r3, [r3, #16]
 8003536:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 800353a:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800353e:	687a      	ldr	r2, [r7, #4]
 8003540:	6892      	ldr	r2, [r2, #8]
 8003542:	0211      	lsls	r1, r2, #8
 8003544:	687a      	ldr	r2, [r7, #4]
 8003546:	6912      	ldr	r2, [r2, #16]
 8003548:	0852      	lsrs	r2, r2, #1
 800354a:	3a01      	subs	r2, #1
 800354c:	0552      	lsls	r2, r2, #21
 800354e:	430a      	orrs	r2, r1
 8003550:	491f      	ldr	r1, [pc, #124]	; (80035d0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003552:	4313      	orrs	r3, r2
 8003554:	610b      	str	r3, [r1, #16]
 8003556:	e011      	b.n	800357c <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003558:	4b1d      	ldr	r3, [pc, #116]	; (80035d0 <RCCEx_PLLSAI1_Config+0x1e4>)
 800355a:	691b      	ldr	r3, [r3, #16]
 800355c:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8003560:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8003564:	687a      	ldr	r2, [r7, #4]
 8003566:	6892      	ldr	r2, [r2, #8]
 8003568:	0211      	lsls	r1, r2, #8
 800356a:	687a      	ldr	r2, [r7, #4]
 800356c:	6952      	ldr	r2, [r2, #20]
 800356e:	0852      	lsrs	r2, r2, #1
 8003570:	3a01      	subs	r2, #1
 8003572:	0652      	lsls	r2, r2, #25
 8003574:	430a      	orrs	r2, r1
 8003576:	4916      	ldr	r1, [pc, #88]	; (80035d0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003578:	4313      	orrs	r3, r2
 800357a:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 800357c:	4b14      	ldr	r3, [pc, #80]	; (80035d0 <RCCEx_PLLSAI1_Config+0x1e4>)
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	4a13      	ldr	r2, [pc, #76]	; (80035d0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003582:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8003586:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003588:	f7fe f93a 	bl	8001800 <HAL_GetTick>
 800358c:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800358e:	e009      	b.n	80035a4 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003590:	f7fe f936 	bl	8001800 <HAL_GetTick>
 8003594:	4602      	mov	r2, r0
 8003596:	68bb      	ldr	r3, [r7, #8]
 8003598:	1ad3      	subs	r3, r2, r3
 800359a:	2b02      	cmp	r3, #2
 800359c:	d902      	bls.n	80035a4 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 800359e:	2303      	movs	r3, #3
 80035a0:	73fb      	strb	r3, [r7, #15]
          break;
 80035a2:	e005      	b.n	80035b0 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80035a4:	4b0a      	ldr	r3, [pc, #40]	; (80035d0 <RCCEx_PLLSAI1_Config+0x1e4>)
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80035ac:	2b00      	cmp	r3, #0
 80035ae:	d0ef      	beq.n	8003590 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 80035b0:	7bfb      	ldrb	r3, [r7, #15]
 80035b2:	2b00      	cmp	r3, #0
 80035b4:	d106      	bne.n	80035c4 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 80035b6:	4b06      	ldr	r3, [pc, #24]	; (80035d0 <RCCEx_PLLSAI1_Config+0x1e4>)
 80035b8:	691a      	ldr	r2, [r3, #16]
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	699b      	ldr	r3, [r3, #24]
 80035be:	4904      	ldr	r1, [pc, #16]	; (80035d0 <RCCEx_PLLSAI1_Config+0x1e4>)
 80035c0:	4313      	orrs	r3, r2
 80035c2:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 80035c4:	7bfb      	ldrb	r3, [r7, #15]
}
 80035c6:	4618      	mov	r0, r3
 80035c8:	3710      	adds	r7, #16
 80035ca:	46bd      	mov	sp, r7
 80035cc:	bd80      	pop	{r7, pc}
 80035ce:	bf00      	nop
 80035d0:	40021000 	.word	0x40021000

080035d4 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 80035d4:	b580      	push	{r7, lr}
 80035d6:	b084      	sub	sp, #16
 80035d8:	af00      	add	r7, sp, #0
 80035da:	6078      	str	r0, [r7, #4]
 80035dc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80035de:	2300      	movs	r3, #0
 80035e0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80035e2:	4b6a      	ldr	r3, [pc, #424]	; (800378c <RCCEx_PLLSAI2_Config+0x1b8>)
 80035e4:	68db      	ldr	r3, [r3, #12]
 80035e6:	f003 0303 	and.w	r3, r3, #3
 80035ea:	2b00      	cmp	r3, #0
 80035ec:	d018      	beq.n	8003620 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 80035ee:	4b67      	ldr	r3, [pc, #412]	; (800378c <RCCEx_PLLSAI2_Config+0x1b8>)
 80035f0:	68db      	ldr	r3, [r3, #12]
 80035f2:	f003 0203 	and.w	r2, r3, #3
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	429a      	cmp	r2, r3
 80035fc:	d10d      	bne.n	800361a <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	681b      	ldr	r3, [r3, #0]
       ||
 8003602:	2b00      	cmp	r3, #0
 8003604:	d009      	beq.n	800361a <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8003606:	4b61      	ldr	r3, [pc, #388]	; (800378c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003608:	68db      	ldr	r3, [r3, #12]
 800360a:	091b      	lsrs	r3, r3, #4
 800360c:	f003 0307 	and.w	r3, r3, #7
 8003610:	1c5a      	adds	r2, r3, #1
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	685b      	ldr	r3, [r3, #4]
       ||
 8003616:	429a      	cmp	r2, r3
 8003618:	d047      	beq.n	80036aa <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 800361a:	2301      	movs	r3, #1
 800361c:	73fb      	strb	r3, [r7, #15]
 800361e:	e044      	b.n	80036aa <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	2b03      	cmp	r3, #3
 8003626:	d018      	beq.n	800365a <RCCEx_PLLSAI2_Config+0x86>
 8003628:	2b03      	cmp	r3, #3
 800362a:	d825      	bhi.n	8003678 <RCCEx_PLLSAI2_Config+0xa4>
 800362c:	2b01      	cmp	r3, #1
 800362e:	d002      	beq.n	8003636 <RCCEx_PLLSAI2_Config+0x62>
 8003630:	2b02      	cmp	r3, #2
 8003632:	d009      	beq.n	8003648 <RCCEx_PLLSAI2_Config+0x74>
 8003634:	e020      	b.n	8003678 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8003636:	4b55      	ldr	r3, [pc, #340]	; (800378c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	f003 0302 	and.w	r3, r3, #2
 800363e:	2b00      	cmp	r3, #0
 8003640:	d11d      	bne.n	800367e <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 8003642:	2301      	movs	r3, #1
 8003644:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003646:	e01a      	b.n	800367e <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8003648:	4b50      	ldr	r3, [pc, #320]	; (800378c <RCCEx_PLLSAI2_Config+0x1b8>)
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003650:	2b00      	cmp	r3, #0
 8003652:	d116      	bne.n	8003682 <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8003654:	2301      	movs	r3, #1
 8003656:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003658:	e013      	b.n	8003682 <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800365a:	4b4c      	ldr	r3, [pc, #304]	; (800378c <RCCEx_PLLSAI2_Config+0x1b8>)
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003662:	2b00      	cmp	r3, #0
 8003664:	d10f      	bne.n	8003686 <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8003666:	4b49      	ldr	r3, [pc, #292]	; (800378c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800366e:	2b00      	cmp	r3, #0
 8003670:	d109      	bne.n	8003686 <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 8003672:	2301      	movs	r3, #1
 8003674:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8003676:	e006      	b.n	8003686 <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8003678:	2301      	movs	r3, #1
 800367a:	73fb      	strb	r3, [r7, #15]
      break;
 800367c:	e004      	b.n	8003688 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800367e:	bf00      	nop
 8003680:	e002      	b.n	8003688 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8003682:	bf00      	nop
 8003684:	e000      	b.n	8003688 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8003686:	bf00      	nop
    }

    if(status == HAL_OK)
 8003688:	7bfb      	ldrb	r3, [r7, #15]
 800368a:	2b00      	cmp	r3, #0
 800368c:	d10d      	bne.n	80036aa <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800368e:	4b3f      	ldr	r3, [pc, #252]	; (800378c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003690:	68db      	ldr	r3, [r3, #12]
 8003692:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	6819      	ldr	r1, [r3, #0]
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	685b      	ldr	r3, [r3, #4]
 800369e:	3b01      	subs	r3, #1
 80036a0:	011b      	lsls	r3, r3, #4
 80036a2:	430b      	orrs	r3, r1
 80036a4:	4939      	ldr	r1, [pc, #228]	; (800378c <RCCEx_PLLSAI2_Config+0x1b8>)
 80036a6:	4313      	orrs	r3, r2
 80036a8:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80036aa:	7bfb      	ldrb	r3, [r7, #15]
 80036ac:	2b00      	cmp	r3, #0
 80036ae:	d167      	bne.n	8003780 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 80036b0:	4b36      	ldr	r3, [pc, #216]	; (800378c <RCCEx_PLLSAI2_Config+0x1b8>)
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	4a35      	ldr	r2, [pc, #212]	; (800378c <RCCEx_PLLSAI2_Config+0x1b8>)
 80036b6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80036ba:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80036bc:	f7fe f8a0 	bl	8001800 <HAL_GetTick>
 80036c0:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80036c2:	e009      	b.n	80036d8 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80036c4:	f7fe f89c 	bl	8001800 <HAL_GetTick>
 80036c8:	4602      	mov	r2, r0
 80036ca:	68bb      	ldr	r3, [r7, #8]
 80036cc:	1ad3      	subs	r3, r2, r3
 80036ce:	2b02      	cmp	r3, #2
 80036d0:	d902      	bls.n	80036d8 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 80036d2:	2303      	movs	r3, #3
 80036d4:	73fb      	strb	r3, [r7, #15]
        break;
 80036d6:	e005      	b.n	80036e4 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80036d8:	4b2c      	ldr	r3, [pc, #176]	; (800378c <RCCEx_PLLSAI2_Config+0x1b8>)
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80036e0:	2b00      	cmp	r3, #0
 80036e2:	d1ef      	bne.n	80036c4 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 80036e4:	7bfb      	ldrb	r3, [r7, #15]
 80036e6:	2b00      	cmp	r3, #0
 80036e8:	d14a      	bne.n	8003780 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80036ea:	683b      	ldr	r3, [r7, #0]
 80036ec:	2b00      	cmp	r3, #0
 80036ee:	d111      	bne.n	8003714 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80036f0:	4b26      	ldr	r3, [pc, #152]	; (800378c <RCCEx_PLLSAI2_Config+0x1b8>)
 80036f2:	695b      	ldr	r3, [r3, #20]
 80036f4:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 80036f8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80036fc:	687a      	ldr	r2, [r7, #4]
 80036fe:	6892      	ldr	r2, [r2, #8]
 8003700:	0211      	lsls	r1, r2, #8
 8003702:	687a      	ldr	r2, [r7, #4]
 8003704:	68d2      	ldr	r2, [r2, #12]
 8003706:	0912      	lsrs	r2, r2, #4
 8003708:	0452      	lsls	r2, r2, #17
 800370a:	430a      	orrs	r2, r1
 800370c:	491f      	ldr	r1, [pc, #124]	; (800378c <RCCEx_PLLSAI2_Config+0x1b8>)
 800370e:	4313      	orrs	r3, r2
 8003710:	614b      	str	r3, [r1, #20]
 8003712:	e011      	b.n	8003738 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8003714:	4b1d      	ldr	r3, [pc, #116]	; (800378c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003716:	695b      	ldr	r3, [r3, #20]
 8003718:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 800371c:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8003720:	687a      	ldr	r2, [r7, #4]
 8003722:	6892      	ldr	r2, [r2, #8]
 8003724:	0211      	lsls	r1, r2, #8
 8003726:	687a      	ldr	r2, [r7, #4]
 8003728:	6912      	ldr	r2, [r2, #16]
 800372a:	0852      	lsrs	r2, r2, #1
 800372c:	3a01      	subs	r2, #1
 800372e:	0652      	lsls	r2, r2, #25
 8003730:	430a      	orrs	r2, r1
 8003732:	4916      	ldr	r1, [pc, #88]	; (800378c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003734:	4313      	orrs	r3, r2
 8003736:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8003738:	4b14      	ldr	r3, [pc, #80]	; (800378c <RCCEx_PLLSAI2_Config+0x1b8>)
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	4a13      	ldr	r2, [pc, #76]	; (800378c <RCCEx_PLLSAI2_Config+0x1b8>)
 800373e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003742:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003744:	f7fe f85c 	bl	8001800 <HAL_GetTick>
 8003748:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 800374a:	e009      	b.n	8003760 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 800374c:	f7fe f858 	bl	8001800 <HAL_GetTick>
 8003750:	4602      	mov	r2, r0
 8003752:	68bb      	ldr	r3, [r7, #8]
 8003754:	1ad3      	subs	r3, r2, r3
 8003756:	2b02      	cmp	r3, #2
 8003758:	d902      	bls.n	8003760 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 800375a:	2303      	movs	r3, #3
 800375c:	73fb      	strb	r3, [r7, #15]
          break;
 800375e:	e005      	b.n	800376c <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8003760:	4b0a      	ldr	r3, [pc, #40]	; (800378c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003768:	2b00      	cmp	r3, #0
 800376a:	d0ef      	beq.n	800374c <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 800376c:	7bfb      	ldrb	r3, [r7, #15]
 800376e:	2b00      	cmp	r3, #0
 8003770:	d106      	bne.n	8003780 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8003772:	4b06      	ldr	r3, [pc, #24]	; (800378c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003774:	695a      	ldr	r2, [r3, #20]
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	695b      	ldr	r3, [r3, #20]
 800377a:	4904      	ldr	r1, [pc, #16]	; (800378c <RCCEx_PLLSAI2_Config+0x1b8>)
 800377c:	4313      	orrs	r3, r2
 800377e:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8003780:	7bfb      	ldrb	r3, [r7, #15]
}
 8003782:	4618      	mov	r0, r3
 8003784:	3710      	adds	r7, #16
 8003786:	46bd      	mov	sp, r7
 8003788:	bd80      	pop	{r7, pc}
 800378a:	bf00      	nop
 800378c:	40021000 	.word	0x40021000

08003790 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003790:	b580      	push	{r7, lr}
 8003792:	b082      	sub	sp, #8
 8003794:	af00      	add	r7, sp, #0
 8003796:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	2b00      	cmp	r3, #0
 800379c:	d101      	bne.n	80037a2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800379e:	2301      	movs	r3, #1
 80037a0:	e040      	b.n	8003824 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80037a6:	2b00      	cmp	r3, #0
 80037a8:	d106      	bne.n	80037b8 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	2200      	movs	r2, #0
 80037ae:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80037b2:	6878      	ldr	r0, [r7, #4]
 80037b4:	f7fd ff26 	bl	8001604 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	2224      	movs	r2, #36	; 0x24
 80037bc:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	681a      	ldr	r2, [r3, #0]
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	f022 0201 	bic.w	r2, r2, #1
 80037cc:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80037ce:	6878      	ldr	r0, [r7, #4]
 80037d0:	f000 fb2e 	bl	8003e30 <UART_SetConfig>
 80037d4:	4603      	mov	r3, r0
 80037d6:	2b01      	cmp	r3, #1
 80037d8:	d101      	bne.n	80037de <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 80037da:	2301      	movs	r3, #1
 80037dc:	e022      	b.n	8003824 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037e2:	2b00      	cmp	r3, #0
 80037e4:	d002      	beq.n	80037ec <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 80037e6:	6878      	ldr	r0, [r7, #4]
 80037e8:	f000 fdda 	bl	80043a0 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	685a      	ldr	r2, [r3, #4]
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	681b      	ldr	r3, [r3, #0]
 80037f6:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80037fa:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	689a      	ldr	r2, [r3, #8]
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	681b      	ldr	r3, [r3, #0]
 8003806:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800380a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	681a      	ldr	r2, [r3, #0]
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	f042 0201 	orr.w	r2, r2, #1
 800381a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800381c:	6878      	ldr	r0, [r7, #4]
 800381e:	f000 fe61 	bl	80044e4 <UART_CheckIdleState>
 8003822:	4603      	mov	r3, r0
}
 8003824:	4618      	mov	r0, r3
 8003826:	3708      	adds	r7, #8
 8003828:	46bd      	mov	sp, r7
 800382a:	bd80      	pop	{r7, pc}

0800382c <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800382c:	b580      	push	{r7, lr}
 800382e:	b0ba      	sub	sp, #232	; 0xe8
 8003830:	af00      	add	r7, sp, #0
 8003832:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	69db      	ldr	r3, [r3, #28]
 800383a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	689b      	ldr	r3, [r3, #8]
 800384e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8003852:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8003856:	f640 030f 	movw	r3, #2063	; 0x80f
 800385a:	4013      	ands	r3, r2
 800385c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8003860:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8003864:	2b00      	cmp	r3, #0
 8003866:	d115      	bne.n	8003894 <HAL_UART_IRQHandler+0x68>
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8003868:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800386c:	f003 0320 	and.w	r3, r3, #32
 8003870:	2b00      	cmp	r3, #0
 8003872:	d00f      	beq.n	8003894 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8003874:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003878:	f003 0320 	and.w	r3, r3, #32
 800387c:	2b00      	cmp	r3, #0
 800387e:	d009      	beq.n	8003894 <HAL_UART_IRQHandler+0x68>
#endif /* USART_CR1_FIFOEN */
    {
      if (huart->RxISR != NULL)
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003884:	2b00      	cmp	r3, #0
 8003886:	f000 82a6 	beq.w	8003dd6 <HAL_UART_IRQHandler+0x5aa>
      {
        huart->RxISR(huart);
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800388e:	6878      	ldr	r0, [r7, #4]
 8003890:	4798      	blx	r3
      }
      return;
 8003892:	e2a0      	b.n	8003dd6 <HAL_UART_IRQHandler+0x5aa>
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != 0U)
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
#else
  if ((errorflags != 0U)
 8003894:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8003898:	2b00      	cmp	r3, #0
 800389a:	f000 8117 	beq.w	8003acc <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 800389e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80038a2:	f003 0301 	and.w	r3, r3, #1
 80038a6:	2b00      	cmp	r3, #0
 80038a8:	d106      	bne.n	80038b8 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 80038aa:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 80038ae:	4b85      	ldr	r3, [pc, #532]	; (8003ac4 <HAL_UART_IRQHandler+0x298>)
 80038b0:	4013      	ands	r3, r2
 80038b2:	2b00      	cmp	r3, #0
 80038b4:	f000 810a 	beq.w	8003acc <HAL_UART_IRQHandler+0x2a0>
#endif /* USART_CR1_FIFOEN */
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80038b8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80038bc:	f003 0301 	and.w	r3, r3, #1
 80038c0:	2b00      	cmp	r3, #0
 80038c2:	d011      	beq.n	80038e8 <HAL_UART_IRQHandler+0xbc>
 80038c4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80038c8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80038cc:	2b00      	cmp	r3, #0
 80038ce:	d00b      	beq.n	80038e8 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	2201      	movs	r2, #1
 80038d6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80038de:	f043 0201 	orr.w	r2, r3, #1
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80038e8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80038ec:	f003 0302 	and.w	r3, r3, #2
 80038f0:	2b00      	cmp	r3, #0
 80038f2:	d011      	beq.n	8003918 <HAL_UART_IRQHandler+0xec>
 80038f4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80038f8:	f003 0301 	and.w	r3, r3, #1
 80038fc:	2b00      	cmp	r3, #0
 80038fe:	d00b      	beq.n	8003918 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	2202      	movs	r2, #2
 8003906:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800390e:	f043 0204 	orr.w	r2, r3, #4
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8003918:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800391c:	f003 0304 	and.w	r3, r3, #4
 8003920:	2b00      	cmp	r3, #0
 8003922:	d011      	beq.n	8003948 <HAL_UART_IRQHandler+0x11c>
 8003924:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003928:	f003 0301 	and.w	r3, r3, #1
 800392c:	2b00      	cmp	r3, #0
 800392e:	d00b      	beq.n	8003948 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	2204      	movs	r2, #4
 8003936:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800393e:	f043 0202 	orr.w	r2, r3, #2
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
#else
    if (((isrflags & USART_ISR_ORE) != 0U)
 8003948:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800394c:	f003 0308 	and.w	r3, r3, #8
 8003950:	2b00      	cmp	r3, #0
 8003952:	d017      	beq.n	8003984 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8003954:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003958:	f003 0320 	and.w	r3, r3, #32
 800395c:	2b00      	cmp	r3, #0
 800395e:	d105      	bne.n	800396c <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8003960:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003964:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8003968:	2b00      	cmp	r3, #0
 800396a:	d00b      	beq.n	8003984 <HAL_UART_IRQHandler+0x158>
#endif /* USART_CR1_FIFOEN */
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	2208      	movs	r2, #8
 8003972:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800397a:	f043 0208 	orr.w	r2, r3, #8
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8003984:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003988:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800398c:	2b00      	cmp	r3, #0
 800398e:	d012      	beq.n	80039b6 <HAL_UART_IRQHandler+0x18a>
 8003990:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003994:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003998:	2b00      	cmp	r3, #0
 800399a:	d00c      	beq.n	80039b6 <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80039a4:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80039ac:	f043 0220 	orr.w	r2, r3, #32
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80039bc:	2b00      	cmp	r3, #0
 80039be:	f000 820c 	beq.w	8003dda <HAL_UART_IRQHandler+0x5ae>
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
      if (((isrflags & USART_ISR_RXNE) != 0U)
 80039c2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80039c6:	f003 0320 	and.w	r3, r3, #32
 80039ca:	2b00      	cmp	r3, #0
 80039cc:	d00d      	beq.n	80039ea <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80039ce:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80039d2:	f003 0320 	and.w	r3, r3, #32
 80039d6:	2b00      	cmp	r3, #0
 80039d8:	d007      	beq.n	80039ea <HAL_UART_IRQHandler+0x1be>
#endif /* USART_CR1_FIFOEN */
      {
        if (huart->RxISR != NULL)
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80039de:	2b00      	cmp	r3, #0
 80039e0:	d003      	beq.n	80039ea <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80039e6:	6878      	ldr	r0, [r7, #4]
 80039e8:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80039f0:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	689b      	ldr	r3, [r3, #8]
 80039fa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80039fe:	2b40      	cmp	r3, #64	; 0x40
 8003a00:	d005      	beq.n	8003a0e <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8003a02:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8003a06:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8003a0a:	2b00      	cmp	r3, #0
 8003a0c:	d04f      	beq.n	8003aae <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8003a0e:	6878      	ldr	r0, [r7, #4]
 8003a10:	f000 fe75 	bl	80046fe <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	681b      	ldr	r3, [r3, #0]
 8003a18:	689b      	ldr	r3, [r3, #8]
 8003a1a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003a1e:	2b40      	cmp	r3, #64	; 0x40
 8003a20:	d141      	bne.n	8003aa6 <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	681b      	ldr	r3, [r3, #0]
 8003a26:	3308      	adds	r3, #8
 8003a28:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003a2c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8003a30:	e853 3f00 	ldrex	r3, [r3]
 8003a34:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8003a38:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8003a3c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003a40:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	3308      	adds	r3, #8
 8003a4a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8003a4e:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8003a52:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003a56:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8003a5a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8003a5e:	e841 2300 	strex	r3, r2, [r1]
 8003a62:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8003a66:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8003a6a:	2b00      	cmp	r3, #0
 8003a6c:	d1d9      	bne.n	8003a22 <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003a72:	2b00      	cmp	r3, #0
 8003a74:	d013      	beq.n	8003a9e <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003a7a:	4a13      	ldr	r2, [pc, #76]	; (8003ac8 <HAL_UART_IRQHandler+0x29c>)
 8003a7c:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003a82:	4618      	mov	r0, r3
 8003a84:	f7fe f83b 	bl	8001afe <HAL_DMA_Abort_IT>
 8003a88:	4603      	mov	r3, r0
 8003a8a:	2b00      	cmp	r3, #0
 8003a8c:	d017      	beq.n	8003abe <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003a92:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a94:	687a      	ldr	r2, [r7, #4]
 8003a96:	6f12      	ldr	r2, [r2, #112]	; 0x70
 8003a98:	4610      	mov	r0, r2
 8003a9a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003a9c:	e00f      	b.n	8003abe <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8003a9e:	6878      	ldr	r0, [r7, #4]
 8003aa0:	f000 f9b0 	bl	8003e04 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003aa4:	e00b      	b.n	8003abe <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003aa6:	6878      	ldr	r0, [r7, #4]
 8003aa8:	f000 f9ac 	bl	8003e04 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003aac:	e007      	b.n	8003abe <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8003aae:	6878      	ldr	r0, [r7, #4]
 8003ab0:	f000 f9a8 	bl	8003e04 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	2200      	movs	r2, #0
 8003ab8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      }
    }
    return;
 8003abc:	e18d      	b.n	8003dda <HAL_UART_IRQHandler+0x5ae>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003abe:	bf00      	nop
    return;
 8003ac0:	e18b      	b.n	8003dda <HAL_UART_IRQHandler+0x5ae>
 8003ac2:	bf00      	nop
 8003ac4:	04000120 	.word	0x04000120
 8003ac8:	080047c5 	.word	0x080047c5

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003ad0:	2b01      	cmp	r3, #1
 8003ad2:	f040 8146 	bne.w	8003d62 <HAL_UART_IRQHandler+0x536>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8003ad6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003ada:	f003 0310 	and.w	r3, r3, #16
 8003ade:	2b00      	cmp	r3, #0
 8003ae0:	f000 813f 	beq.w	8003d62 <HAL_UART_IRQHandler+0x536>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8003ae4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003ae8:	f003 0310 	and.w	r3, r3, #16
 8003aec:	2b00      	cmp	r3, #0
 8003aee:	f000 8138 	beq.w	8003d62 <HAL_UART_IRQHandler+0x536>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	681b      	ldr	r3, [r3, #0]
 8003af6:	2210      	movs	r2, #16
 8003af8:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	681b      	ldr	r3, [r3, #0]
 8003afe:	689b      	ldr	r3, [r3, #8]
 8003b00:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003b04:	2b40      	cmp	r3, #64	; 0x40
 8003b06:	f040 80b4 	bne.w	8003c72 <HAL_UART_IRQHandler+0x446>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	685b      	ldr	r3, [r3, #4]
 8003b12:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8003b16:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8003b1a:	2b00      	cmp	r3, #0
 8003b1c:	f000 815f 	beq.w	8003dde <HAL_UART_IRQHandler+0x5b2>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8003b26:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8003b2a:	429a      	cmp	r2, r3
 8003b2c:	f080 8157 	bcs.w	8003dde <HAL_UART_IRQHandler+0x5b2>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8003b36:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	681b      	ldr	r3, [r3, #0]
 8003b42:	f003 0320 	and.w	r3, r3, #32
 8003b46:	2b00      	cmp	r3, #0
 8003b48:	f040 8085 	bne.w	8003c56 <HAL_UART_IRQHandler+0x42a>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003b54:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8003b58:	e853 3f00 	ldrex	r3, [r3]
 8003b5c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8003b60:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003b64:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003b68:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	461a      	mov	r2, r3
 8003b72:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8003b76:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8003b7a:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003b7e:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8003b82:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8003b86:	e841 2300 	strex	r3, r2, [r1]
 8003b8a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8003b8e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003b92:	2b00      	cmp	r3, #0
 8003b94:	d1da      	bne.n	8003b4c <HAL_UART_IRQHandler+0x320>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	681b      	ldr	r3, [r3, #0]
 8003b9a:	3308      	adds	r3, #8
 8003b9c:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003b9e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003ba0:	e853 3f00 	ldrex	r3, [r3]
 8003ba4:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8003ba6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003ba8:	f023 0301 	bic.w	r3, r3, #1
 8003bac:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	681b      	ldr	r3, [r3, #0]
 8003bb4:	3308      	adds	r3, #8
 8003bb6:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8003bba:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8003bbe:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003bc0:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8003bc2:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8003bc6:	e841 2300 	strex	r3, r2, [r1]
 8003bca:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8003bcc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003bce:	2b00      	cmp	r3, #0
 8003bd0:	d1e1      	bne.n	8003b96 <HAL_UART_IRQHandler+0x36a>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	3308      	adds	r3, #8
 8003bd8:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003bda:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003bdc:	e853 3f00 	ldrex	r3, [r3]
 8003be0:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8003be2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003be4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003be8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	681b      	ldr	r3, [r3, #0]
 8003bf0:	3308      	adds	r3, #8
 8003bf2:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8003bf6:	66fa      	str	r2, [r7, #108]	; 0x6c
 8003bf8:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003bfa:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8003bfc:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8003bfe:	e841 2300 	strex	r3, r2, [r1]
 8003c02:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8003c04:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003c06:	2b00      	cmp	r3, #0
 8003c08:	d1e3      	bne.n	8003bd2 <HAL_UART_IRQHandler+0x3a6>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	2220      	movs	r2, #32
 8003c0e:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	2200      	movs	r2, #0
 8003c14:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	681b      	ldr	r3, [r3, #0]
 8003c1a:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c1c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003c1e:	e853 3f00 	ldrex	r3, [r3]
 8003c22:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8003c24:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003c26:	f023 0310 	bic.w	r3, r3, #16
 8003c2a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	681b      	ldr	r3, [r3, #0]
 8003c32:	461a      	mov	r2, r3
 8003c34:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8003c38:	65bb      	str	r3, [r7, #88]	; 0x58
 8003c3a:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c3c:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8003c3e:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8003c40:	e841 2300 	strex	r3, r2, [r1]
 8003c44:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8003c46:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003c48:	2b00      	cmp	r3, #0
 8003c4a:	d1e4      	bne.n	8003c16 <HAL_UART_IRQHandler+0x3ea>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c50:	4618      	mov	r0, r3
 8003c52:	f7fd ff16 	bl	8001a82 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8003c62:	b29b      	uxth	r3, r3
 8003c64:	1ad3      	subs	r3, r2, r3
 8003c66:	b29b      	uxth	r3, r3
 8003c68:	4619      	mov	r1, r3
 8003c6a:	6878      	ldr	r0, [r7, #4]
 8003c6c:	f000 f8d4 	bl	8003e18 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8003c70:	e0b5      	b.n	8003dde <HAL_UART_IRQHandler+0x5b2>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8003c7e:	b29b      	uxth	r3, r3
 8003c80:	1ad3      	subs	r3, r2, r3
 8003c82:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8003c8c:	b29b      	uxth	r3, r3
 8003c8e:	2b00      	cmp	r3, #0
 8003c90:	f000 80a7 	beq.w	8003de2 <HAL_UART_IRQHandler+0x5b6>
          && (nb_rx_data > 0U))
 8003c94:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8003c98:	2b00      	cmp	r3, #0
 8003c9a:	f000 80a2 	beq.w	8003de2 <HAL_UART_IRQHandler+0x5b6>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	681b      	ldr	r3, [r3, #0]
 8003ca2:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003ca4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003ca6:	e853 3f00 	ldrex	r3, [r3]
 8003caa:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8003cac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003cae:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003cb2:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	681b      	ldr	r3, [r3, #0]
 8003cba:	461a      	mov	r2, r3
 8003cbc:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8003cc0:	647b      	str	r3, [r7, #68]	; 0x44
 8003cc2:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003cc4:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8003cc6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003cc8:	e841 2300 	strex	r3, r2, [r1]
 8003ccc:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8003cce:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003cd0:	2b00      	cmp	r3, #0
 8003cd2:	d1e4      	bne.n	8003c9e <HAL_UART_IRQHandler+0x472>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	681b      	ldr	r3, [r3, #0]
 8003cd8:	3308      	adds	r3, #8
 8003cda:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003cdc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003cde:	e853 3f00 	ldrex	r3, [r3]
 8003ce2:	623b      	str	r3, [r7, #32]
   return(result);
 8003ce4:	6a3b      	ldr	r3, [r7, #32]
 8003ce6:	f023 0301 	bic.w	r3, r3, #1
 8003cea:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	3308      	adds	r3, #8
 8003cf4:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8003cf8:	633a      	str	r2, [r7, #48]	; 0x30
 8003cfa:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003cfc:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003cfe:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003d00:	e841 2300 	strex	r3, r2, [r1]
 8003d04:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8003d06:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003d08:	2b00      	cmp	r3, #0
 8003d0a:	d1e3      	bne.n	8003cd4 <HAL_UART_IRQHandler+0x4a8>
#endif /* USART_CR1_FIFOEN */

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	2220      	movs	r2, #32
 8003d10:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	2200      	movs	r2, #0
 8003d16:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	2200      	movs	r2, #0
 8003d1c:	665a      	str	r2, [r3, #100]	; 0x64

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	681b      	ldr	r3, [r3, #0]
 8003d22:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d24:	693b      	ldr	r3, [r7, #16]
 8003d26:	e853 3f00 	ldrex	r3, [r3]
 8003d2a:	60fb      	str	r3, [r7, #12]
   return(result);
 8003d2c:	68fb      	ldr	r3, [r7, #12]
 8003d2e:	f023 0310 	bic.w	r3, r3, #16
 8003d32:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	681b      	ldr	r3, [r3, #0]
 8003d3a:	461a      	mov	r2, r3
 8003d3c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8003d40:	61fb      	str	r3, [r7, #28]
 8003d42:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d44:	69b9      	ldr	r1, [r7, #24]
 8003d46:	69fa      	ldr	r2, [r7, #28]
 8003d48:	e841 2300 	strex	r3, r2, [r1]
 8003d4c:	617b      	str	r3, [r7, #20]
   return(result);
 8003d4e:	697b      	ldr	r3, [r7, #20]
 8003d50:	2b00      	cmp	r3, #0
 8003d52:	d1e4      	bne.n	8003d1e <HAL_UART_IRQHandler+0x4f2>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8003d54:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8003d58:	4619      	mov	r1, r3
 8003d5a:	6878      	ldr	r0, [r7, #4]
 8003d5c:	f000 f85c 	bl	8003e18 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8003d60:	e03f      	b.n	8003de2 <HAL_UART_IRQHandler+0x5b6>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8003d62:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003d66:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003d6a:	2b00      	cmp	r3, #0
 8003d6c:	d00e      	beq.n	8003d8c <HAL_UART_IRQHandler+0x560>
 8003d6e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003d72:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003d76:	2b00      	cmp	r3, #0
 8003d78:	d008      	beq.n	8003d8c <HAL_UART_IRQHandler+0x560>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	681b      	ldr	r3, [r3, #0]
 8003d7e:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8003d82:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8003d84:	6878      	ldr	r0, [r7, #4]
 8003d86:	f000 fd5d 	bl	8004844 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8003d8a:	e02d      	b.n	8003de8 <HAL_UART_IRQHandler+0x5bc>
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
#else
  if (((isrflags & USART_ISR_TXE) != 0U)
 8003d8c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003d90:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003d94:	2b00      	cmp	r3, #0
 8003d96:	d00e      	beq.n	8003db6 <HAL_UART_IRQHandler+0x58a>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8003d98:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003d9c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003da0:	2b00      	cmp	r3, #0
 8003da2:	d008      	beq.n	8003db6 <HAL_UART_IRQHandler+0x58a>
#endif /* USART_CR1_FIFOEN */
  {
    if (huart->TxISR != NULL)
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003da8:	2b00      	cmp	r3, #0
 8003daa:	d01c      	beq.n	8003de6 <HAL_UART_IRQHandler+0x5ba>
    {
      huart->TxISR(huart);
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003db0:	6878      	ldr	r0, [r7, #4]
 8003db2:	4798      	blx	r3
    }
    return;
 8003db4:	e017      	b.n	8003de6 <HAL_UART_IRQHandler+0x5ba>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8003db6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003dba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003dbe:	2b00      	cmp	r3, #0
 8003dc0:	d012      	beq.n	8003de8 <HAL_UART_IRQHandler+0x5bc>
 8003dc2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003dc6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003dca:	2b00      	cmp	r3, #0
 8003dcc:	d00c      	beq.n	8003de8 <HAL_UART_IRQHandler+0x5bc>
  {
    UART_EndTransmit_IT(huart);
 8003dce:	6878      	ldr	r0, [r7, #4]
 8003dd0:	f000 fd0e 	bl	80047f0 <UART_EndTransmit_IT>
    return;
 8003dd4:	e008      	b.n	8003de8 <HAL_UART_IRQHandler+0x5bc>
      return;
 8003dd6:	bf00      	nop
 8003dd8:	e006      	b.n	8003de8 <HAL_UART_IRQHandler+0x5bc>
    return;
 8003dda:	bf00      	nop
 8003ddc:	e004      	b.n	8003de8 <HAL_UART_IRQHandler+0x5bc>
      return;
 8003dde:	bf00      	nop
 8003de0:	e002      	b.n	8003de8 <HAL_UART_IRQHandler+0x5bc>
      return;
 8003de2:	bf00      	nop
 8003de4:	e000      	b.n	8003de8 <HAL_UART_IRQHandler+0x5bc>
    return;
 8003de6:	bf00      	nop
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
  }
#endif /* USART_CR1_FIFOEN */
}
 8003de8:	37e8      	adds	r7, #232	; 0xe8
 8003dea:	46bd      	mov	sp, r7
 8003dec:	bd80      	pop	{r7, pc}
 8003dee:	bf00      	nop

08003df0 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003df0:	b480      	push	{r7}
 8003df2:	b083      	sub	sp, #12
 8003df4:	af00      	add	r7, sp, #0
 8003df6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8003df8:	bf00      	nop
 8003dfa:	370c      	adds	r7, #12
 8003dfc:	46bd      	mov	sp, r7
 8003dfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e02:	4770      	bx	lr

08003e04 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003e04:	b480      	push	{r7}
 8003e06:	b083      	sub	sp, #12
 8003e08:	af00      	add	r7, sp, #0
 8003e0a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8003e0c:	bf00      	nop
 8003e0e:	370c      	adds	r7, #12
 8003e10:	46bd      	mov	sp, r7
 8003e12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e16:	4770      	bx	lr

08003e18 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8003e18:	b480      	push	{r7}
 8003e1a:	b083      	sub	sp, #12
 8003e1c:	af00      	add	r7, sp, #0
 8003e1e:	6078      	str	r0, [r7, #4]
 8003e20:	460b      	mov	r3, r1
 8003e22:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8003e24:	bf00      	nop
 8003e26:	370c      	adds	r7, #12
 8003e28:	46bd      	mov	sp, r7
 8003e2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e2e:	4770      	bx	lr

08003e30 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003e30:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003e34:	b08a      	sub	sp, #40	; 0x28
 8003e36:	af00      	add	r7, sp, #0
 8003e38:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003e3a:	2300      	movs	r3, #0
 8003e3c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003e40:	68fb      	ldr	r3, [r7, #12]
 8003e42:	689a      	ldr	r2, [r3, #8]
 8003e44:	68fb      	ldr	r3, [r7, #12]
 8003e46:	691b      	ldr	r3, [r3, #16]
 8003e48:	431a      	orrs	r2, r3
 8003e4a:	68fb      	ldr	r3, [r7, #12]
 8003e4c:	695b      	ldr	r3, [r3, #20]
 8003e4e:	431a      	orrs	r2, r3
 8003e50:	68fb      	ldr	r3, [r7, #12]
 8003e52:	69db      	ldr	r3, [r3, #28]
 8003e54:	4313      	orrs	r3, r2
 8003e56:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003e58:	68fb      	ldr	r3, [r7, #12]
 8003e5a:	681b      	ldr	r3, [r3, #0]
 8003e5c:	681a      	ldr	r2, [r3, #0]
 8003e5e:	4ba4      	ldr	r3, [pc, #656]	; (80040f0 <UART_SetConfig+0x2c0>)
 8003e60:	4013      	ands	r3, r2
 8003e62:	68fa      	ldr	r2, [r7, #12]
 8003e64:	6812      	ldr	r2, [r2, #0]
 8003e66:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003e68:	430b      	orrs	r3, r1
 8003e6a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003e6c:	68fb      	ldr	r3, [r7, #12]
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	685b      	ldr	r3, [r3, #4]
 8003e72:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003e76:	68fb      	ldr	r3, [r7, #12]
 8003e78:	68da      	ldr	r2, [r3, #12]
 8003e7a:	68fb      	ldr	r3, [r7, #12]
 8003e7c:	681b      	ldr	r3, [r3, #0]
 8003e7e:	430a      	orrs	r2, r1
 8003e80:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003e82:	68fb      	ldr	r3, [r7, #12]
 8003e84:	699b      	ldr	r3, [r3, #24]
 8003e86:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8003e88:	68fb      	ldr	r3, [r7, #12]
 8003e8a:	681b      	ldr	r3, [r3, #0]
 8003e8c:	4a99      	ldr	r2, [pc, #612]	; (80040f4 <UART_SetConfig+0x2c4>)
 8003e8e:	4293      	cmp	r3, r2
 8003e90:	d004      	beq.n	8003e9c <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8003e92:	68fb      	ldr	r3, [r7, #12]
 8003e94:	6a1b      	ldr	r3, [r3, #32]
 8003e96:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003e98:	4313      	orrs	r3, r2
 8003e9a:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003e9c:	68fb      	ldr	r3, [r7, #12]
 8003e9e:	681b      	ldr	r3, [r3, #0]
 8003ea0:	689b      	ldr	r3, [r3, #8]
 8003ea2:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8003ea6:	68fb      	ldr	r3, [r7, #12]
 8003ea8:	681b      	ldr	r3, [r3, #0]
 8003eaa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003eac:	430a      	orrs	r2, r1
 8003eae:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003eb0:	68fb      	ldr	r3, [r7, #12]
 8003eb2:	681b      	ldr	r3, [r3, #0]
 8003eb4:	4a90      	ldr	r2, [pc, #576]	; (80040f8 <UART_SetConfig+0x2c8>)
 8003eb6:	4293      	cmp	r3, r2
 8003eb8:	d126      	bne.n	8003f08 <UART_SetConfig+0xd8>
 8003eba:	4b90      	ldr	r3, [pc, #576]	; (80040fc <UART_SetConfig+0x2cc>)
 8003ebc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003ec0:	f003 0303 	and.w	r3, r3, #3
 8003ec4:	2b03      	cmp	r3, #3
 8003ec6:	d81b      	bhi.n	8003f00 <UART_SetConfig+0xd0>
 8003ec8:	a201      	add	r2, pc, #4	; (adr r2, 8003ed0 <UART_SetConfig+0xa0>)
 8003eca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003ece:	bf00      	nop
 8003ed0:	08003ee1 	.word	0x08003ee1
 8003ed4:	08003ef1 	.word	0x08003ef1
 8003ed8:	08003ee9 	.word	0x08003ee9
 8003edc:	08003ef9 	.word	0x08003ef9
 8003ee0:	2301      	movs	r3, #1
 8003ee2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003ee6:	e116      	b.n	8004116 <UART_SetConfig+0x2e6>
 8003ee8:	2302      	movs	r3, #2
 8003eea:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003eee:	e112      	b.n	8004116 <UART_SetConfig+0x2e6>
 8003ef0:	2304      	movs	r3, #4
 8003ef2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003ef6:	e10e      	b.n	8004116 <UART_SetConfig+0x2e6>
 8003ef8:	2308      	movs	r3, #8
 8003efa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003efe:	e10a      	b.n	8004116 <UART_SetConfig+0x2e6>
 8003f00:	2310      	movs	r3, #16
 8003f02:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003f06:	e106      	b.n	8004116 <UART_SetConfig+0x2e6>
 8003f08:	68fb      	ldr	r3, [r7, #12]
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	4a7c      	ldr	r2, [pc, #496]	; (8004100 <UART_SetConfig+0x2d0>)
 8003f0e:	4293      	cmp	r3, r2
 8003f10:	d138      	bne.n	8003f84 <UART_SetConfig+0x154>
 8003f12:	4b7a      	ldr	r3, [pc, #488]	; (80040fc <UART_SetConfig+0x2cc>)
 8003f14:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003f18:	f003 030c 	and.w	r3, r3, #12
 8003f1c:	2b0c      	cmp	r3, #12
 8003f1e:	d82d      	bhi.n	8003f7c <UART_SetConfig+0x14c>
 8003f20:	a201      	add	r2, pc, #4	; (adr r2, 8003f28 <UART_SetConfig+0xf8>)
 8003f22:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003f26:	bf00      	nop
 8003f28:	08003f5d 	.word	0x08003f5d
 8003f2c:	08003f7d 	.word	0x08003f7d
 8003f30:	08003f7d 	.word	0x08003f7d
 8003f34:	08003f7d 	.word	0x08003f7d
 8003f38:	08003f6d 	.word	0x08003f6d
 8003f3c:	08003f7d 	.word	0x08003f7d
 8003f40:	08003f7d 	.word	0x08003f7d
 8003f44:	08003f7d 	.word	0x08003f7d
 8003f48:	08003f65 	.word	0x08003f65
 8003f4c:	08003f7d 	.word	0x08003f7d
 8003f50:	08003f7d 	.word	0x08003f7d
 8003f54:	08003f7d 	.word	0x08003f7d
 8003f58:	08003f75 	.word	0x08003f75
 8003f5c:	2300      	movs	r3, #0
 8003f5e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003f62:	e0d8      	b.n	8004116 <UART_SetConfig+0x2e6>
 8003f64:	2302      	movs	r3, #2
 8003f66:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003f6a:	e0d4      	b.n	8004116 <UART_SetConfig+0x2e6>
 8003f6c:	2304      	movs	r3, #4
 8003f6e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003f72:	e0d0      	b.n	8004116 <UART_SetConfig+0x2e6>
 8003f74:	2308      	movs	r3, #8
 8003f76:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003f7a:	e0cc      	b.n	8004116 <UART_SetConfig+0x2e6>
 8003f7c:	2310      	movs	r3, #16
 8003f7e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003f82:	e0c8      	b.n	8004116 <UART_SetConfig+0x2e6>
 8003f84:	68fb      	ldr	r3, [r7, #12]
 8003f86:	681b      	ldr	r3, [r3, #0]
 8003f88:	4a5e      	ldr	r2, [pc, #376]	; (8004104 <UART_SetConfig+0x2d4>)
 8003f8a:	4293      	cmp	r3, r2
 8003f8c:	d125      	bne.n	8003fda <UART_SetConfig+0x1aa>
 8003f8e:	4b5b      	ldr	r3, [pc, #364]	; (80040fc <UART_SetConfig+0x2cc>)
 8003f90:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003f94:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8003f98:	2b30      	cmp	r3, #48	; 0x30
 8003f9a:	d016      	beq.n	8003fca <UART_SetConfig+0x19a>
 8003f9c:	2b30      	cmp	r3, #48	; 0x30
 8003f9e:	d818      	bhi.n	8003fd2 <UART_SetConfig+0x1a2>
 8003fa0:	2b20      	cmp	r3, #32
 8003fa2:	d00a      	beq.n	8003fba <UART_SetConfig+0x18a>
 8003fa4:	2b20      	cmp	r3, #32
 8003fa6:	d814      	bhi.n	8003fd2 <UART_SetConfig+0x1a2>
 8003fa8:	2b00      	cmp	r3, #0
 8003faa:	d002      	beq.n	8003fb2 <UART_SetConfig+0x182>
 8003fac:	2b10      	cmp	r3, #16
 8003fae:	d008      	beq.n	8003fc2 <UART_SetConfig+0x192>
 8003fb0:	e00f      	b.n	8003fd2 <UART_SetConfig+0x1a2>
 8003fb2:	2300      	movs	r3, #0
 8003fb4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003fb8:	e0ad      	b.n	8004116 <UART_SetConfig+0x2e6>
 8003fba:	2302      	movs	r3, #2
 8003fbc:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003fc0:	e0a9      	b.n	8004116 <UART_SetConfig+0x2e6>
 8003fc2:	2304      	movs	r3, #4
 8003fc4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003fc8:	e0a5      	b.n	8004116 <UART_SetConfig+0x2e6>
 8003fca:	2308      	movs	r3, #8
 8003fcc:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003fd0:	e0a1      	b.n	8004116 <UART_SetConfig+0x2e6>
 8003fd2:	2310      	movs	r3, #16
 8003fd4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003fd8:	e09d      	b.n	8004116 <UART_SetConfig+0x2e6>
 8003fda:	68fb      	ldr	r3, [r7, #12]
 8003fdc:	681b      	ldr	r3, [r3, #0]
 8003fde:	4a4a      	ldr	r2, [pc, #296]	; (8004108 <UART_SetConfig+0x2d8>)
 8003fe0:	4293      	cmp	r3, r2
 8003fe2:	d125      	bne.n	8004030 <UART_SetConfig+0x200>
 8003fe4:	4b45      	ldr	r3, [pc, #276]	; (80040fc <UART_SetConfig+0x2cc>)
 8003fe6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003fea:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8003fee:	2bc0      	cmp	r3, #192	; 0xc0
 8003ff0:	d016      	beq.n	8004020 <UART_SetConfig+0x1f0>
 8003ff2:	2bc0      	cmp	r3, #192	; 0xc0
 8003ff4:	d818      	bhi.n	8004028 <UART_SetConfig+0x1f8>
 8003ff6:	2b80      	cmp	r3, #128	; 0x80
 8003ff8:	d00a      	beq.n	8004010 <UART_SetConfig+0x1e0>
 8003ffa:	2b80      	cmp	r3, #128	; 0x80
 8003ffc:	d814      	bhi.n	8004028 <UART_SetConfig+0x1f8>
 8003ffe:	2b00      	cmp	r3, #0
 8004000:	d002      	beq.n	8004008 <UART_SetConfig+0x1d8>
 8004002:	2b40      	cmp	r3, #64	; 0x40
 8004004:	d008      	beq.n	8004018 <UART_SetConfig+0x1e8>
 8004006:	e00f      	b.n	8004028 <UART_SetConfig+0x1f8>
 8004008:	2300      	movs	r3, #0
 800400a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800400e:	e082      	b.n	8004116 <UART_SetConfig+0x2e6>
 8004010:	2302      	movs	r3, #2
 8004012:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004016:	e07e      	b.n	8004116 <UART_SetConfig+0x2e6>
 8004018:	2304      	movs	r3, #4
 800401a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800401e:	e07a      	b.n	8004116 <UART_SetConfig+0x2e6>
 8004020:	2308      	movs	r3, #8
 8004022:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004026:	e076      	b.n	8004116 <UART_SetConfig+0x2e6>
 8004028:	2310      	movs	r3, #16
 800402a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800402e:	e072      	b.n	8004116 <UART_SetConfig+0x2e6>
 8004030:	68fb      	ldr	r3, [r7, #12]
 8004032:	681b      	ldr	r3, [r3, #0]
 8004034:	4a35      	ldr	r2, [pc, #212]	; (800410c <UART_SetConfig+0x2dc>)
 8004036:	4293      	cmp	r3, r2
 8004038:	d12a      	bne.n	8004090 <UART_SetConfig+0x260>
 800403a:	4b30      	ldr	r3, [pc, #192]	; (80040fc <UART_SetConfig+0x2cc>)
 800403c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004040:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004044:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004048:	d01a      	beq.n	8004080 <UART_SetConfig+0x250>
 800404a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800404e:	d81b      	bhi.n	8004088 <UART_SetConfig+0x258>
 8004050:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004054:	d00c      	beq.n	8004070 <UART_SetConfig+0x240>
 8004056:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800405a:	d815      	bhi.n	8004088 <UART_SetConfig+0x258>
 800405c:	2b00      	cmp	r3, #0
 800405e:	d003      	beq.n	8004068 <UART_SetConfig+0x238>
 8004060:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004064:	d008      	beq.n	8004078 <UART_SetConfig+0x248>
 8004066:	e00f      	b.n	8004088 <UART_SetConfig+0x258>
 8004068:	2300      	movs	r3, #0
 800406a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800406e:	e052      	b.n	8004116 <UART_SetConfig+0x2e6>
 8004070:	2302      	movs	r3, #2
 8004072:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004076:	e04e      	b.n	8004116 <UART_SetConfig+0x2e6>
 8004078:	2304      	movs	r3, #4
 800407a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800407e:	e04a      	b.n	8004116 <UART_SetConfig+0x2e6>
 8004080:	2308      	movs	r3, #8
 8004082:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004086:	e046      	b.n	8004116 <UART_SetConfig+0x2e6>
 8004088:	2310      	movs	r3, #16
 800408a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800408e:	e042      	b.n	8004116 <UART_SetConfig+0x2e6>
 8004090:	68fb      	ldr	r3, [r7, #12]
 8004092:	681b      	ldr	r3, [r3, #0]
 8004094:	4a17      	ldr	r2, [pc, #92]	; (80040f4 <UART_SetConfig+0x2c4>)
 8004096:	4293      	cmp	r3, r2
 8004098:	d13a      	bne.n	8004110 <UART_SetConfig+0x2e0>
 800409a:	4b18      	ldr	r3, [pc, #96]	; (80040fc <UART_SetConfig+0x2cc>)
 800409c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80040a0:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80040a4:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80040a8:	d01a      	beq.n	80040e0 <UART_SetConfig+0x2b0>
 80040aa:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80040ae:	d81b      	bhi.n	80040e8 <UART_SetConfig+0x2b8>
 80040b0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80040b4:	d00c      	beq.n	80040d0 <UART_SetConfig+0x2a0>
 80040b6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80040ba:	d815      	bhi.n	80040e8 <UART_SetConfig+0x2b8>
 80040bc:	2b00      	cmp	r3, #0
 80040be:	d003      	beq.n	80040c8 <UART_SetConfig+0x298>
 80040c0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80040c4:	d008      	beq.n	80040d8 <UART_SetConfig+0x2a8>
 80040c6:	e00f      	b.n	80040e8 <UART_SetConfig+0x2b8>
 80040c8:	2300      	movs	r3, #0
 80040ca:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80040ce:	e022      	b.n	8004116 <UART_SetConfig+0x2e6>
 80040d0:	2302      	movs	r3, #2
 80040d2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80040d6:	e01e      	b.n	8004116 <UART_SetConfig+0x2e6>
 80040d8:	2304      	movs	r3, #4
 80040da:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80040de:	e01a      	b.n	8004116 <UART_SetConfig+0x2e6>
 80040e0:	2308      	movs	r3, #8
 80040e2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80040e6:	e016      	b.n	8004116 <UART_SetConfig+0x2e6>
 80040e8:	2310      	movs	r3, #16
 80040ea:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80040ee:	e012      	b.n	8004116 <UART_SetConfig+0x2e6>
 80040f0:	efff69f3 	.word	0xefff69f3
 80040f4:	40008000 	.word	0x40008000
 80040f8:	40013800 	.word	0x40013800
 80040fc:	40021000 	.word	0x40021000
 8004100:	40004400 	.word	0x40004400
 8004104:	40004800 	.word	0x40004800
 8004108:	40004c00 	.word	0x40004c00
 800410c:	40005000 	.word	0x40005000
 8004110:	2310      	movs	r3, #16
 8004112:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8004116:	68fb      	ldr	r3, [r7, #12]
 8004118:	681b      	ldr	r3, [r3, #0]
 800411a:	4a9f      	ldr	r2, [pc, #636]	; (8004398 <UART_SetConfig+0x568>)
 800411c:	4293      	cmp	r3, r2
 800411e:	d17a      	bne.n	8004216 <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8004120:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8004124:	2b08      	cmp	r3, #8
 8004126:	d824      	bhi.n	8004172 <UART_SetConfig+0x342>
 8004128:	a201      	add	r2, pc, #4	; (adr r2, 8004130 <UART_SetConfig+0x300>)
 800412a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800412e:	bf00      	nop
 8004130:	08004155 	.word	0x08004155
 8004134:	08004173 	.word	0x08004173
 8004138:	0800415d 	.word	0x0800415d
 800413c:	08004173 	.word	0x08004173
 8004140:	08004163 	.word	0x08004163
 8004144:	08004173 	.word	0x08004173
 8004148:	08004173 	.word	0x08004173
 800414c:	08004173 	.word	0x08004173
 8004150:	0800416b 	.word	0x0800416b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004154:	f7fe fdd4 	bl	8002d00 <HAL_RCC_GetPCLK1Freq>
 8004158:	61f8      	str	r0, [r7, #28]
        break;
 800415a:	e010      	b.n	800417e <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800415c:	4b8f      	ldr	r3, [pc, #572]	; (800439c <UART_SetConfig+0x56c>)
 800415e:	61fb      	str	r3, [r7, #28]
        break;
 8004160:	e00d      	b.n	800417e <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004162:	f7fe fd35 	bl	8002bd0 <HAL_RCC_GetSysClockFreq>
 8004166:	61f8      	str	r0, [r7, #28]
        break;
 8004168:	e009      	b.n	800417e <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800416a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800416e:	61fb      	str	r3, [r7, #28]
        break;
 8004170:	e005      	b.n	800417e <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 8004172:	2300      	movs	r3, #0
 8004174:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8004176:	2301      	movs	r3, #1
 8004178:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 800417c:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800417e:	69fb      	ldr	r3, [r7, #28]
 8004180:	2b00      	cmp	r3, #0
 8004182:	f000 80fb 	beq.w	800437c <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8004186:	68fb      	ldr	r3, [r7, #12]
 8004188:	685a      	ldr	r2, [r3, #4]
 800418a:	4613      	mov	r3, r2
 800418c:	005b      	lsls	r3, r3, #1
 800418e:	4413      	add	r3, r2
 8004190:	69fa      	ldr	r2, [r7, #28]
 8004192:	429a      	cmp	r2, r3
 8004194:	d305      	bcc.n	80041a2 <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 8004196:	68fb      	ldr	r3, [r7, #12]
 8004198:	685b      	ldr	r3, [r3, #4]
 800419a:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800419c:	69fa      	ldr	r2, [r7, #28]
 800419e:	429a      	cmp	r2, r3
 80041a0:	d903      	bls.n	80041aa <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 80041a2:	2301      	movs	r3, #1
 80041a4:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 80041a8:	e0e8      	b.n	800437c <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 80041aa:	69fb      	ldr	r3, [r7, #28]
 80041ac:	2200      	movs	r2, #0
 80041ae:	461c      	mov	r4, r3
 80041b0:	4615      	mov	r5, r2
 80041b2:	f04f 0200 	mov.w	r2, #0
 80041b6:	f04f 0300 	mov.w	r3, #0
 80041ba:	022b      	lsls	r3, r5, #8
 80041bc:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 80041c0:	0222      	lsls	r2, r4, #8
 80041c2:	68f9      	ldr	r1, [r7, #12]
 80041c4:	6849      	ldr	r1, [r1, #4]
 80041c6:	0849      	lsrs	r1, r1, #1
 80041c8:	2000      	movs	r0, #0
 80041ca:	4688      	mov	r8, r1
 80041cc:	4681      	mov	r9, r0
 80041ce:	eb12 0a08 	adds.w	sl, r2, r8
 80041d2:	eb43 0b09 	adc.w	fp, r3, r9
 80041d6:	68fb      	ldr	r3, [r7, #12]
 80041d8:	685b      	ldr	r3, [r3, #4]
 80041da:	2200      	movs	r2, #0
 80041dc:	603b      	str	r3, [r7, #0]
 80041de:	607a      	str	r2, [r7, #4]
 80041e0:	e9d7 2300 	ldrd	r2, r3, [r7]
 80041e4:	4650      	mov	r0, sl
 80041e6:	4659      	mov	r1, fp
 80041e8:	f7fc f85a 	bl	80002a0 <__aeabi_uldivmod>
 80041ec:	4602      	mov	r2, r0
 80041ee:	460b      	mov	r3, r1
 80041f0:	4613      	mov	r3, r2
 80041f2:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80041f4:	69bb      	ldr	r3, [r7, #24]
 80041f6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80041fa:	d308      	bcc.n	800420e <UART_SetConfig+0x3de>
 80041fc:	69bb      	ldr	r3, [r7, #24]
 80041fe:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004202:	d204      	bcs.n	800420e <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 8004204:	68fb      	ldr	r3, [r7, #12]
 8004206:	681b      	ldr	r3, [r3, #0]
 8004208:	69ba      	ldr	r2, [r7, #24]
 800420a:	60da      	str	r2, [r3, #12]
 800420c:	e0b6      	b.n	800437c <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 800420e:	2301      	movs	r3, #1
 8004210:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8004214:	e0b2      	b.n	800437c <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004216:	68fb      	ldr	r3, [r7, #12]
 8004218:	69db      	ldr	r3, [r3, #28]
 800421a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800421e:	d15e      	bne.n	80042de <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 8004220:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8004224:	2b08      	cmp	r3, #8
 8004226:	d828      	bhi.n	800427a <UART_SetConfig+0x44a>
 8004228:	a201      	add	r2, pc, #4	; (adr r2, 8004230 <UART_SetConfig+0x400>)
 800422a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800422e:	bf00      	nop
 8004230:	08004255 	.word	0x08004255
 8004234:	0800425d 	.word	0x0800425d
 8004238:	08004265 	.word	0x08004265
 800423c:	0800427b 	.word	0x0800427b
 8004240:	0800426b 	.word	0x0800426b
 8004244:	0800427b 	.word	0x0800427b
 8004248:	0800427b 	.word	0x0800427b
 800424c:	0800427b 	.word	0x0800427b
 8004250:	08004273 	.word	0x08004273
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004254:	f7fe fd54 	bl	8002d00 <HAL_RCC_GetPCLK1Freq>
 8004258:	61f8      	str	r0, [r7, #28]
        break;
 800425a:	e014      	b.n	8004286 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800425c:	f7fe fd66 	bl	8002d2c <HAL_RCC_GetPCLK2Freq>
 8004260:	61f8      	str	r0, [r7, #28]
        break;
 8004262:	e010      	b.n	8004286 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004264:	4b4d      	ldr	r3, [pc, #308]	; (800439c <UART_SetConfig+0x56c>)
 8004266:	61fb      	str	r3, [r7, #28]
        break;
 8004268:	e00d      	b.n	8004286 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800426a:	f7fe fcb1 	bl	8002bd0 <HAL_RCC_GetSysClockFreq>
 800426e:	61f8      	str	r0, [r7, #28]
        break;
 8004270:	e009      	b.n	8004286 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004272:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004276:	61fb      	str	r3, [r7, #28]
        break;
 8004278:	e005      	b.n	8004286 <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 800427a:	2300      	movs	r3, #0
 800427c:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800427e:	2301      	movs	r3, #1
 8004280:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8004284:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004286:	69fb      	ldr	r3, [r7, #28]
 8004288:	2b00      	cmp	r3, #0
 800428a:	d077      	beq.n	800437c <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800428c:	69fb      	ldr	r3, [r7, #28]
 800428e:	005a      	lsls	r2, r3, #1
 8004290:	68fb      	ldr	r3, [r7, #12]
 8004292:	685b      	ldr	r3, [r3, #4]
 8004294:	085b      	lsrs	r3, r3, #1
 8004296:	441a      	add	r2, r3
 8004298:	68fb      	ldr	r3, [r7, #12]
 800429a:	685b      	ldr	r3, [r3, #4]
 800429c:	fbb2 f3f3 	udiv	r3, r2, r3
 80042a0:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80042a2:	69bb      	ldr	r3, [r7, #24]
 80042a4:	2b0f      	cmp	r3, #15
 80042a6:	d916      	bls.n	80042d6 <UART_SetConfig+0x4a6>
 80042a8:	69bb      	ldr	r3, [r7, #24]
 80042aa:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80042ae:	d212      	bcs.n	80042d6 <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80042b0:	69bb      	ldr	r3, [r7, #24]
 80042b2:	b29b      	uxth	r3, r3
 80042b4:	f023 030f 	bic.w	r3, r3, #15
 80042b8:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80042ba:	69bb      	ldr	r3, [r7, #24]
 80042bc:	085b      	lsrs	r3, r3, #1
 80042be:	b29b      	uxth	r3, r3
 80042c0:	f003 0307 	and.w	r3, r3, #7
 80042c4:	b29a      	uxth	r2, r3
 80042c6:	8afb      	ldrh	r3, [r7, #22]
 80042c8:	4313      	orrs	r3, r2
 80042ca:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 80042cc:	68fb      	ldr	r3, [r7, #12]
 80042ce:	681b      	ldr	r3, [r3, #0]
 80042d0:	8afa      	ldrh	r2, [r7, #22]
 80042d2:	60da      	str	r2, [r3, #12]
 80042d4:	e052      	b.n	800437c <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 80042d6:	2301      	movs	r3, #1
 80042d8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 80042dc:	e04e      	b.n	800437c <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 80042de:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80042e2:	2b08      	cmp	r3, #8
 80042e4:	d827      	bhi.n	8004336 <UART_SetConfig+0x506>
 80042e6:	a201      	add	r2, pc, #4	; (adr r2, 80042ec <UART_SetConfig+0x4bc>)
 80042e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80042ec:	08004311 	.word	0x08004311
 80042f0:	08004319 	.word	0x08004319
 80042f4:	08004321 	.word	0x08004321
 80042f8:	08004337 	.word	0x08004337
 80042fc:	08004327 	.word	0x08004327
 8004300:	08004337 	.word	0x08004337
 8004304:	08004337 	.word	0x08004337
 8004308:	08004337 	.word	0x08004337
 800430c:	0800432f 	.word	0x0800432f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004310:	f7fe fcf6 	bl	8002d00 <HAL_RCC_GetPCLK1Freq>
 8004314:	61f8      	str	r0, [r7, #28]
        break;
 8004316:	e014      	b.n	8004342 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004318:	f7fe fd08 	bl	8002d2c <HAL_RCC_GetPCLK2Freq>
 800431c:	61f8      	str	r0, [r7, #28]
        break;
 800431e:	e010      	b.n	8004342 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004320:	4b1e      	ldr	r3, [pc, #120]	; (800439c <UART_SetConfig+0x56c>)
 8004322:	61fb      	str	r3, [r7, #28]
        break;
 8004324:	e00d      	b.n	8004342 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004326:	f7fe fc53 	bl	8002bd0 <HAL_RCC_GetSysClockFreq>
 800432a:	61f8      	str	r0, [r7, #28]
        break;
 800432c:	e009      	b.n	8004342 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800432e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004332:	61fb      	str	r3, [r7, #28]
        break;
 8004334:	e005      	b.n	8004342 <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 8004336:	2300      	movs	r3, #0
 8004338:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800433a:	2301      	movs	r3, #1
 800433c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8004340:	bf00      	nop
    }

    if (pclk != 0U)
 8004342:	69fb      	ldr	r3, [r7, #28]
 8004344:	2b00      	cmp	r3, #0
 8004346:	d019      	beq.n	800437c <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8004348:	68fb      	ldr	r3, [r7, #12]
 800434a:	685b      	ldr	r3, [r3, #4]
 800434c:	085a      	lsrs	r2, r3, #1
 800434e:	69fb      	ldr	r3, [r7, #28]
 8004350:	441a      	add	r2, r3
 8004352:	68fb      	ldr	r3, [r7, #12]
 8004354:	685b      	ldr	r3, [r3, #4]
 8004356:	fbb2 f3f3 	udiv	r3, r2, r3
 800435a:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800435c:	69bb      	ldr	r3, [r7, #24]
 800435e:	2b0f      	cmp	r3, #15
 8004360:	d909      	bls.n	8004376 <UART_SetConfig+0x546>
 8004362:	69bb      	ldr	r3, [r7, #24]
 8004364:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004368:	d205      	bcs.n	8004376 <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800436a:	69bb      	ldr	r3, [r7, #24]
 800436c:	b29a      	uxth	r2, r3
 800436e:	68fb      	ldr	r3, [r7, #12]
 8004370:	681b      	ldr	r3, [r3, #0]
 8004372:	60da      	str	r2, [r3, #12]
 8004374:	e002      	b.n	800437c <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8004376:	2301      	movs	r3, #1
 8004378:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800437c:	68fb      	ldr	r3, [r7, #12]
 800437e:	2200      	movs	r2, #0
 8004380:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8004382:	68fb      	ldr	r3, [r7, #12]
 8004384:	2200      	movs	r2, #0
 8004386:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8004388:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 800438c:	4618      	mov	r0, r3
 800438e:	3728      	adds	r7, #40	; 0x28
 8004390:	46bd      	mov	sp, r7
 8004392:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004396:	bf00      	nop
 8004398:	40008000 	.word	0x40008000
 800439c:	00f42400 	.word	0x00f42400

080043a0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80043a0:	b480      	push	{r7}
 80043a2:	b083      	sub	sp, #12
 80043a4:	af00      	add	r7, sp, #0
 80043a6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043ac:	f003 0301 	and.w	r3, r3, #1
 80043b0:	2b00      	cmp	r3, #0
 80043b2:	d00a      	beq.n	80043ca <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	681b      	ldr	r3, [r3, #0]
 80043b8:	685b      	ldr	r3, [r3, #4]
 80043ba:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	681b      	ldr	r3, [r3, #0]
 80043c6:	430a      	orrs	r2, r1
 80043c8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043ce:	f003 0302 	and.w	r3, r3, #2
 80043d2:	2b00      	cmp	r3, #0
 80043d4:	d00a      	beq.n	80043ec <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	681b      	ldr	r3, [r3, #0]
 80043da:	685b      	ldr	r3, [r3, #4]
 80043dc:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	681b      	ldr	r3, [r3, #0]
 80043e8:	430a      	orrs	r2, r1
 80043ea:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043f0:	f003 0304 	and.w	r3, r3, #4
 80043f4:	2b00      	cmp	r3, #0
 80043f6:	d00a      	beq.n	800440e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	681b      	ldr	r3, [r3, #0]
 80043fc:	685b      	ldr	r3, [r3, #4]
 80043fe:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	681b      	ldr	r3, [r3, #0]
 800440a:	430a      	orrs	r2, r1
 800440c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004412:	f003 0308 	and.w	r3, r3, #8
 8004416:	2b00      	cmp	r3, #0
 8004418:	d00a      	beq.n	8004430 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	681b      	ldr	r3, [r3, #0]
 800441e:	685b      	ldr	r3, [r3, #4]
 8004420:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	681b      	ldr	r3, [r3, #0]
 800442c:	430a      	orrs	r2, r1
 800442e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004434:	f003 0310 	and.w	r3, r3, #16
 8004438:	2b00      	cmp	r3, #0
 800443a:	d00a      	beq.n	8004452 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	681b      	ldr	r3, [r3, #0]
 8004440:	689b      	ldr	r3, [r3, #8]
 8004442:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	681b      	ldr	r3, [r3, #0]
 800444e:	430a      	orrs	r2, r1
 8004450:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004456:	f003 0320 	and.w	r3, r3, #32
 800445a:	2b00      	cmp	r3, #0
 800445c:	d00a      	beq.n	8004474 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	681b      	ldr	r3, [r3, #0]
 8004462:	689b      	ldr	r3, [r3, #8]
 8004464:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	681b      	ldr	r3, [r3, #0]
 8004470:	430a      	orrs	r2, r1
 8004472:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004478:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800447c:	2b00      	cmp	r3, #0
 800447e:	d01a      	beq.n	80044b6 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	681b      	ldr	r3, [r3, #0]
 8004484:	685b      	ldr	r3, [r3, #4]
 8004486:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	681b      	ldr	r3, [r3, #0]
 8004492:	430a      	orrs	r2, r1
 8004494:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800449a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800449e:	d10a      	bne.n	80044b6 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	681b      	ldr	r3, [r3, #0]
 80044a4:	685b      	ldr	r3, [r3, #4]
 80044a6:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	681b      	ldr	r3, [r3, #0]
 80044b2:	430a      	orrs	r2, r1
 80044b4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044ba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80044be:	2b00      	cmp	r3, #0
 80044c0:	d00a      	beq.n	80044d8 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	681b      	ldr	r3, [r3, #0]
 80044c6:	685b      	ldr	r3, [r3, #4]
 80044c8:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	681b      	ldr	r3, [r3, #0]
 80044d4:	430a      	orrs	r2, r1
 80044d6:	605a      	str	r2, [r3, #4]
  }
}
 80044d8:	bf00      	nop
 80044da:	370c      	adds	r7, #12
 80044dc:	46bd      	mov	sp, r7
 80044de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044e2:	4770      	bx	lr

080044e4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80044e4:	b580      	push	{r7, lr}
 80044e6:	b086      	sub	sp, #24
 80044e8:	af02      	add	r7, sp, #8
 80044ea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	2200      	movs	r2, #0
 80044f0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80044f4:	f7fd f984 	bl	8001800 <HAL_GetTick>
 80044f8:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	681b      	ldr	r3, [r3, #0]
 80044fe:	681b      	ldr	r3, [r3, #0]
 8004500:	f003 0308 	and.w	r3, r3, #8
 8004504:	2b08      	cmp	r3, #8
 8004506:	d10e      	bne.n	8004526 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004508:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800450c:	9300      	str	r3, [sp, #0]
 800450e:	68fb      	ldr	r3, [r7, #12]
 8004510:	2200      	movs	r2, #0
 8004512:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8004516:	6878      	ldr	r0, [r7, #4]
 8004518:	f000 f82d 	bl	8004576 <UART_WaitOnFlagUntilTimeout>
 800451c:	4603      	mov	r3, r0
 800451e:	2b00      	cmp	r3, #0
 8004520:	d001      	beq.n	8004526 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004522:	2303      	movs	r3, #3
 8004524:	e023      	b.n	800456e <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	681b      	ldr	r3, [r3, #0]
 800452a:	681b      	ldr	r3, [r3, #0]
 800452c:	f003 0304 	and.w	r3, r3, #4
 8004530:	2b04      	cmp	r3, #4
 8004532:	d10e      	bne.n	8004552 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004534:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004538:	9300      	str	r3, [sp, #0]
 800453a:	68fb      	ldr	r3, [r7, #12]
 800453c:	2200      	movs	r2, #0
 800453e:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8004542:	6878      	ldr	r0, [r7, #4]
 8004544:	f000 f817 	bl	8004576 <UART_WaitOnFlagUntilTimeout>
 8004548:	4603      	mov	r3, r0
 800454a:	2b00      	cmp	r3, #0
 800454c:	d001      	beq.n	8004552 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800454e:	2303      	movs	r3, #3
 8004550:	e00d      	b.n	800456e <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	2220      	movs	r2, #32
 8004556:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	2220      	movs	r2, #32
 800455c:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	2200      	movs	r2, #0
 8004562:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	2200      	movs	r2, #0
 8004568:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 800456c:	2300      	movs	r3, #0
}
 800456e:	4618      	mov	r0, r3
 8004570:	3710      	adds	r7, #16
 8004572:	46bd      	mov	sp, r7
 8004574:	bd80      	pop	{r7, pc}

08004576 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004576:	b580      	push	{r7, lr}
 8004578:	b09c      	sub	sp, #112	; 0x70
 800457a:	af00      	add	r7, sp, #0
 800457c:	60f8      	str	r0, [r7, #12]
 800457e:	60b9      	str	r1, [r7, #8]
 8004580:	603b      	str	r3, [r7, #0]
 8004582:	4613      	mov	r3, r2
 8004584:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004586:	e0a5      	b.n	80046d4 <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004588:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800458a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800458e:	f000 80a1 	beq.w	80046d4 <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004592:	f7fd f935 	bl	8001800 <HAL_GetTick>
 8004596:	4602      	mov	r2, r0
 8004598:	683b      	ldr	r3, [r7, #0]
 800459a:	1ad3      	subs	r3, r2, r3
 800459c:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800459e:	429a      	cmp	r2, r3
 80045a0:	d302      	bcc.n	80045a8 <UART_WaitOnFlagUntilTimeout+0x32>
 80045a2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80045a4:	2b00      	cmp	r3, #0
 80045a6:	d13e      	bne.n	8004626 <UART_WaitOnFlagUntilTimeout+0xb0>
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                USART_CR1_TXEIE_TXFNFIE));
#else
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80045a8:	68fb      	ldr	r3, [r7, #12]
 80045aa:	681b      	ldr	r3, [r3, #0]
 80045ac:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80045ae:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80045b0:	e853 3f00 	ldrex	r3, [r3]
 80045b4:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 80045b6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80045b8:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80045bc:	667b      	str	r3, [r7, #100]	; 0x64
 80045be:	68fb      	ldr	r3, [r7, #12]
 80045c0:	681b      	ldr	r3, [r3, #0]
 80045c2:	461a      	mov	r2, r3
 80045c4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80045c6:	65fb      	str	r3, [r7, #92]	; 0x5c
 80045c8:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80045ca:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80045cc:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80045ce:	e841 2300 	strex	r3, r2, [r1]
 80045d2:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 80045d4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80045d6:	2b00      	cmp	r3, #0
 80045d8:	d1e6      	bne.n	80045a8 <UART_WaitOnFlagUntilTimeout+0x32>
#endif /* USART_CR1_FIFOEN */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80045da:	68fb      	ldr	r3, [r7, #12]
 80045dc:	681b      	ldr	r3, [r3, #0]
 80045de:	3308      	adds	r3, #8
 80045e0:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80045e2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80045e4:	e853 3f00 	ldrex	r3, [r3]
 80045e8:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80045ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80045ec:	f023 0301 	bic.w	r3, r3, #1
 80045f0:	663b      	str	r3, [r7, #96]	; 0x60
 80045f2:	68fb      	ldr	r3, [r7, #12]
 80045f4:	681b      	ldr	r3, [r3, #0]
 80045f6:	3308      	adds	r3, #8
 80045f8:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80045fa:	64ba      	str	r2, [r7, #72]	; 0x48
 80045fc:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80045fe:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8004600:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004602:	e841 2300 	strex	r3, r2, [r1]
 8004606:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8004608:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800460a:	2b00      	cmp	r3, #0
 800460c:	d1e5      	bne.n	80045da <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 800460e:	68fb      	ldr	r3, [r7, #12]
 8004610:	2220      	movs	r2, #32
 8004612:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8004614:	68fb      	ldr	r3, [r7, #12]
 8004616:	2220      	movs	r2, #32
 8004618:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 800461a:	68fb      	ldr	r3, [r7, #12]
 800461c:	2200      	movs	r2, #0
 800461e:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 8004622:	2303      	movs	r3, #3
 8004624:	e067      	b.n	80046f6 <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8004626:	68fb      	ldr	r3, [r7, #12]
 8004628:	681b      	ldr	r3, [r3, #0]
 800462a:	681b      	ldr	r3, [r3, #0]
 800462c:	f003 0304 	and.w	r3, r3, #4
 8004630:	2b00      	cmp	r3, #0
 8004632:	d04f      	beq.n	80046d4 <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004634:	68fb      	ldr	r3, [r7, #12]
 8004636:	681b      	ldr	r3, [r3, #0]
 8004638:	69db      	ldr	r3, [r3, #28]
 800463a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800463e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004642:	d147      	bne.n	80046d4 <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004644:	68fb      	ldr	r3, [r7, #12]
 8004646:	681b      	ldr	r3, [r3, #0]
 8004648:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800464c:	621a      	str	r2, [r3, #32]
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                  USART_CR1_TXEIE_TXFNFIE));
#else
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800464e:	68fb      	ldr	r3, [r7, #12]
 8004650:	681b      	ldr	r3, [r3, #0]
 8004652:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004654:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004656:	e853 3f00 	ldrex	r3, [r3]
 800465a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800465c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800465e:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8004662:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004664:	68fb      	ldr	r3, [r7, #12]
 8004666:	681b      	ldr	r3, [r3, #0]
 8004668:	461a      	mov	r2, r3
 800466a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800466c:	637b      	str	r3, [r7, #52]	; 0x34
 800466e:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004670:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004672:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004674:	e841 2300 	strex	r3, r2, [r1]
 8004678:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800467a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800467c:	2b00      	cmp	r3, #0
 800467e:	d1e6      	bne.n	800464e <UART_WaitOnFlagUntilTimeout+0xd8>
#endif /* USART_CR1_FIFOEN */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004680:	68fb      	ldr	r3, [r7, #12]
 8004682:	681b      	ldr	r3, [r3, #0]
 8004684:	3308      	adds	r3, #8
 8004686:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004688:	697b      	ldr	r3, [r7, #20]
 800468a:	e853 3f00 	ldrex	r3, [r3]
 800468e:	613b      	str	r3, [r7, #16]
   return(result);
 8004690:	693b      	ldr	r3, [r7, #16]
 8004692:	f023 0301 	bic.w	r3, r3, #1
 8004696:	66bb      	str	r3, [r7, #104]	; 0x68
 8004698:	68fb      	ldr	r3, [r7, #12]
 800469a:	681b      	ldr	r3, [r3, #0]
 800469c:	3308      	adds	r3, #8
 800469e:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80046a0:	623a      	str	r2, [r7, #32]
 80046a2:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80046a4:	69f9      	ldr	r1, [r7, #28]
 80046a6:	6a3a      	ldr	r2, [r7, #32]
 80046a8:	e841 2300 	strex	r3, r2, [r1]
 80046ac:	61bb      	str	r3, [r7, #24]
   return(result);
 80046ae:	69bb      	ldr	r3, [r7, #24]
 80046b0:	2b00      	cmp	r3, #0
 80046b2:	d1e5      	bne.n	8004680 <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 80046b4:	68fb      	ldr	r3, [r7, #12]
 80046b6:	2220      	movs	r2, #32
 80046b8:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 80046ba:	68fb      	ldr	r3, [r7, #12]
 80046bc:	2220      	movs	r2, #32
 80046be:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80046c0:	68fb      	ldr	r3, [r7, #12]
 80046c2:	2220      	movs	r2, #32
 80046c4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80046c8:	68fb      	ldr	r3, [r7, #12]
 80046ca:	2200      	movs	r2, #0
 80046cc:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 80046d0:	2303      	movs	r3, #3
 80046d2:	e010      	b.n	80046f6 <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80046d4:	68fb      	ldr	r3, [r7, #12]
 80046d6:	681b      	ldr	r3, [r3, #0]
 80046d8:	69da      	ldr	r2, [r3, #28]
 80046da:	68bb      	ldr	r3, [r7, #8]
 80046dc:	4013      	ands	r3, r2
 80046de:	68ba      	ldr	r2, [r7, #8]
 80046e0:	429a      	cmp	r2, r3
 80046e2:	bf0c      	ite	eq
 80046e4:	2301      	moveq	r3, #1
 80046e6:	2300      	movne	r3, #0
 80046e8:	b2db      	uxtb	r3, r3
 80046ea:	461a      	mov	r2, r3
 80046ec:	79fb      	ldrb	r3, [r7, #7]
 80046ee:	429a      	cmp	r2, r3
 80046f0:	f43f af4a 	beq.w	8004588 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80046f4:	2300      	movs	r3, #0
}
 80046f6:	4618      	mov	r0, r3
 80046f8:	3770      	adds	r7, #112	; 0x70
 80046fa:	46bd      	mov	sp, r7
 80046fc:	bd80      	pop	{r7, pc}

080046fe <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80046fe:	b480      	push	{r7}
 8004700:	b095      	sub	sp, #84	; 0x54
 8004702:	af00      	add	r7, sp, #0
 8004704:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	681b      	ldr	r3, [r3, #0]
 800470a:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800470c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800470e:	e853 3f00 	ldrex	r3, [r3]
 8004712:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8004714:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004716:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800471a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	681b      	ldr	r3, [r3, #0]
 8004720:	461a      	mov	r2, r3
 8004722:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004724:	643b      	str	r3, [r7, #64]	; 0x40
 8004726:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004728:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800472a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800472c:	e841 2300 	strex	r3, r2, [r1]
 8004730:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8004732:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004734:	2b00      	cmp	r3, #0
 8004736:	d1e6      	bne.n	8004706 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	681b      	ldr	r3, [r3, #0]
 800473c:	3308      	adds	r3, #8
 800473e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004740:	6a3b      	ldr	r3, [r7, #32]
 8004742:	e853 3f00 	ldrex	r3, [r3]
 8004746:	61fb      	str	r3, [r7, #28]
   return(result);
 8004748:	69fb      	ldr	r3, [r7, #28]
 800474a:	f023 0301 	bic.w	r3, r3, #1
 800474e:	64bb      	str	r3, [r7, #72]	; 0x48
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	681b      	ldr	r3, [r3, #0]
 8004754:	3308      	adds	r3, #8
 8004756:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004758:	62fa      	str	r2, [r7, #44]	; 0x2c
 800475a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800475c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800475e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004760:	e841 2300 	strex	r3, r2, [r1]
 8004764:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004766:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004768:	2b00      	cmp	r3, #0
 800476a:	d1e5      	bne.n	8004738 <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004770:	2b01      	cmp	r3, #1
 8004772:	d118      	bne.n	80047a6 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	681b      	ldr	r3, [r3, #0]
 8004778:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800477a:	68fb      	ldr	r3, [r7, #12]
 800477c:	e853 3f00 	ldrex	r3, [r3]
 8004780:	60bb      	str	r3, [r7, #8]
   return(result);
 8004782:	68bb      	ldr	r3, [r7, #8]
 8004784:	f023 0310 	bic.w	r3, r3, #16
 8004788:	647b      	str	r3, [r7, #68]	; 0x44
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	681b      	ldr	r3, [r3, #0]
 800478e:	461a      	mov	r2, r3
 8004790:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004792:	61bb      	str	r3, [r7, #24]
 8004794:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004796:	6979      	ldr	r1, [r7, #20]
 8004798:	69ba      	ldr	r2, [r7, #24]
 800479a:	e841 2300 	strex	r3, r2, [r1]
 800479e:	613b      	str	r3, [r7, #16]
   return(result);
 80047a0:	693b      	ldr	r3, [r7, #16]
 80047a2:	2b00      	cmp	r3, #0
 80047a4:	d1e6      	bne.n	8004774 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	2220      	movs	r2, #32
 80047aa:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	2200      	movs	r2, #0
 80047b0:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	2200      	movs	r2, #0
 80047b6:	665a      	str	r2, [r3, #100]	; 0x64
}
 80047b8:	bf00      	nop
 80047ba:	3754      	adds	r7, #84	; 0x54
 80047bc:	46bd      	mov	sp, r7
 80047be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047c2:	4770      	bx	lr

080047c4 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80047c4:	b580      	push	{r7, lr}
 80047c6:	b084      	sub	sp, #16
 80047c8:	af00      	add	r7, sp, #0
 80047ca:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80047d0:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 80047d2:	68fb      	ldr	r3, [r7, #12]
 80047d4:	2200      	movs	r2, #0
 80047d6:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 80047da:	68fb      	ldr	r3, [r7, #12]
 80047dc:	2200      	movs	r2, #0
 80047de:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80047e2:	68f8      	ldr	r0, [r7, #12]
 80047e4:	f7ff fb0e 	bl	8003e04 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80047e8:	bf00      	nop
 80047ea:	3710      	adds	r7, #16
 80047ec:	46bd      	mov	sp, r7
 80047ee:	bd80      	pop	{r7, pc}

080047f0 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80047f0:	b580      	push	{r7, lr}
 80047f2:	b088      	sub	sp, #32
 80047f4:	af00      	add	r7, sp, #0
 80047f6:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	681b      	ldr	r3, [r3, #0]
 80047fc:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80047fe:	68fb      	ldr	r3, [r7, #12]
 8004800:	e853 3f00 	ldrex	r3, [r3]
 8004804:	60bb      	str	r3, [r7, #8]
   return(result);
 8004806:	68bb      	ldr	r3, [r7, #8]
 8004808:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800480c:	61fb      	str	r3, [r7, #28]
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	681b      	ldr	r3, [r3, #0]
 8004812:	461a      	mov	r2, r3
 8004814:	69fb      	ldr	r3, [r7, #28]
 8004816:	61bb      	str	r3, [r7, #24]
 8004818:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800481a:	6979      	ldr	r1, [r7, #20]
 800481c:	69ba      	ldr	r2, [r7, #24]
 800481e:	e841 2300 	strex	r3, r2, [r1]
 8004822:	613b      	str	r3, [r7, #16]
   return(result);
 8004824:	693b      	ldr	r3, [r7, #16]
 8004826:	2b00      	cmp	r3, #0
 8004828:	d1e6      	bne.n	80047f8 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	2220      	movs	r2, #32
 800482e:	679a      	str	r2, [r3, #120]	; 0x78

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	2200      	movs	r2, #0
 8004834:	669a      	str	r2, [r3, #104]	; 0x68
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8004836:	6878      	ldr	r0, [r7, #4]
 8004838:	f7ff fada 	bl	8003df0 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800483c:	bf00      	nop
 800483e:	3720      	adds	r7, #32
 8004840:	46bd      	mov	sp, r7
 8004842:	bd80      	pop	{r7, pc}

08004844 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8004844:	b480      	push	{r7}
 8004846:	b083      	sub	sp, #12
 8004848:	af00      	add	r7, sp, #0
 800484a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800484c:	bf00      	nop
 800484e:	370c      	adds	r7, #12
 8004850:	46bd      	mov	sp, r7
 8004852:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004856:	4770      	bx	lr

08004858 <__errno>:
 8004858:	4b01      	ldr	r3, [pc, #4]	; (8004860 <__errno+0x8>)
 800485a:	6818      	ldr	r0, [r3, #0]
 800485c:	4770      	bx	lr
 800485e:	bf00      	nop
 8004860:	20000020 	.word	0x20000020

08004864 <__libc_init_array>:
 8004864:	b570      	push	{r4, r5, r6, lr}
 8004866:	4d0d      	ldr	r5, [pc, #52]	; (800489c <__libc_init_array+0x38>)
 8004868:	4c0d      	ldr	r4, [pc, #52]	; (80048a0 <__libc_init_array+0x3c>)
 800486a:	1b64      	subs	r4, r4, r5
 800486c:	10a4      	asrs	r4, r4, #2
 800486e:	2600      	movs	r6, #0
 8004870:	42a6      	cmp	r6, r4
 8004872:	d109      	bne.n	8004888 <__libc_init_array+0x24>
 8004874:	4d0b      	ldr	r5, [pc, #44]	; (80048a4 <__libc_init_array+0x40>)
 8004876:	4c0c      	ldr	r4, [pc, #48]	; (80048a8 <__libc_init_array+0x44>)
 8004878:	f000 fc9c 	bl	80051b4 <_init>
 800487c:	1b64      	subs	r4, r4, r5
 800487e:	10a4      	asrs	r4, r4, #2
 8004880:	2600      	movs	r6, #0
 8004882:	42a6      	cmp	r6, r4
 8004884:	d105      	bne.n	8004892 <__libc_init_array+0x2e>
 8004886:	bd70      	pop	{r4, r5, r6, pc}
 8004888:	f855 3b04 	ldr.w	r3, [r5], #4
 800488c:	4798      	blx	r3
 800488e:	3601      	adds	r6, #1
 8004890:	e7ee      	b.n	8004870 <__libc_init_array+0xc>
 8004892:	f855 3b04 	ldr.w	r3, [r5], #4
 8004896:	4798      	blx	r3
 8004898:	3601      	adds	r6, #1
 800489a:	e7f2      	b.n	8004882 <__libc_init_array+0x1e>
 800489c:	08005964 	.word	0x08005964
 80048a0:	08005964 	.word	0x08005964
 80048a4:	08005964 	.word	0x08005964
 80048a8:	08005968 	.word	0x08005968

080048ac <memset>:
 80048ac:	4402      	add	r2, r0
 80048ae:	4603      	mov	r3, r0
 80048b0:	4293      	cmp	r3, r2
 80048b2:	d100      	bne.n	80048b6 <memset+0xa>
 80048b4:	4770      	bx	lr
 80048b6:	f803 1b01 	strb.w	r1, [r3], #1
 80048ba:	e7f9      	b.n	80048b0 <memset+0x4>

080048bc <siprintf>:
 80048bc:	b40e      	push	{r1, r2, r3}
 80048be:	b500      	push	{lr}
 80048c0:	b09c      	sub	sp, #112	; 0x70
 80048c2:	ab1d      	add	r3, sp, #116	; 0x74
 80048c4:	9002      	str	r0, [sp, #8]
 80048c6:	9006      	str	r0, [sp, #24]
 80048c8:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80048cc:	4809      	ldr	r0, [pc, #36]	; (80048f4 <siprintf+0x38>)
 80048ce:	9107      	str	r1, [sp, #28]
 80048d0:	9104      	str	r1, [sp, #16]
 80048d2:	4909      	ldr	r1, [pc, #36]	; (80048f8 <siprintf+0x3c>)
 80048d4:	f853 2b04 	ldr.w	r2, [r3], #4
 80048d8:	9105      	str	r1, [sp, #20]
 80048da:	6800      	ldr	r0, [r0, #0]
 80048dc:	9301      	str	r3, [sp, #4]
 80048de:	a902      	add	r1, sp, #8
 80048e0:	f000 f876 	bl	80049d0 <_svfiprintf_r>
 80048e4:	9b02      	ldr	r3, [sp, #8]
 80048e6:	2200      	movs	r2, #0
 80048e8:	701a      	strb	r2, [r3, #0]
 80048ea:	b01c      	add	sp, #112	; 0x70
 80048ec:	f85d eb04 	ldr.w	lr, [sp], #4
 80048f0:	b003      	add	sp, #12
 80048f2:	4770      	bx	lr
 80048f4:	20000020 	.word	0x20000020
 80048f8:	ffff0208 	.word	0xffff0208

080048fc <strcat>:
 80048fc:	b510      	push	{r4, lr}
 80048fe:	4602      	mov	r2, r0
 8004900:	7814      	ldrb	r4, [r2, #0]
 8004902:	4613      	mov	r3, r2
 8004904:	3201      	adds	r2, #1
 8004906:	2c00      	cmp	r4, #0
 8004908:	d1fa      	bne.n	8004900 <strcat+0x4>
 800490a:	3b01      	subs	r3, #1
 800490c:	f811 2b01 	ldrb.w	r2, [r1], #1
 8004910:	f803 2f01 	strb.w	r2, [r3, #1]!
 8004914:	2a00      	cmp	r2, #0
 8004916:	d1f9      	bne.n	800490c <strcat+0x10>
 8004918:	bd10      	pop	{r4, pc}

0800491a <__ssputs_r>:
 800491a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800491e:	688e      	ldr	r6, [r1, #8]
 8004920:	429e      	cmp	r6, r3
 8004922:	4682      	mov	sl, r0
 8004924:	460c      	mov	r4, r1
 8004926:	4690      	mov	r8, r2
 8004928:	461f      	mov	r7, r3
 800492a:	d838      	bhi.n	800499e <__ssputs_r+0x84>
 800492c:	898a      	ldrh	r2, [r1, #12]
 800492e:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8004932:	d032      	beq.n	800499a <__ssputs_r+0x80>
 8004934:	6825      	ldr	r5, [r4, #0]
 8004936:	6909      	ldr	r1, [r1, #16]
 8004938:	eba5 0901 	sub.w	r9, r5, r1
 800493c:	6965      	ldr	r5, [r4, #20]
 800493e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8004942:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8004946:	3301      	adds	r3, #1
 8004948:	444b      	add	r3, r9
 800494a:	106d      	asrs	r5, r5, #1
 800494c:	429d      	cmp	r5, r3
 800494e:	bf38      	it	cc
 8004950:	461d      	movcc	r5, r3
 8004952:	0553      	lsls	r3, r2, #21
 8004954:	d531      	bpl.n	80049ba <__ssputs_r+0xa0>
 8004956:	4629      	mov	r1, r5
 8004958:	f000 fb62 	bl	8005020 <_malloc_r>
 800495c:	4606      	mov	r6, r0
 800495e:	b950      	cbnz	r0, 8004976 <__ssputs_r+0x5c>
 8004960:	230c      	movs	r3, #12
 8004962:	f8ca 3000 	str.w	r3, [sl]
 8004966:	89a3      	ldrh	r3, [r4, #12]
 8004968:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800496c:	81a3      	strh	r3, [r4, #12]
 800496e:	f04f 30ff 	mov.w	r0, #4294967295
 8004972:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004976:	6921      	ldr	r1, [r4, #16]
 8004978:	464a      	mov	r2, r9
 800497a:	f000 fabd 	bl	8004ef8 <memcpy>
 800497e:	89a3      	ldrh	r3, [r4, #12]
 8004980:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8004984:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004988:	81a3      	strh	r3, [r4, #12]
 800498a:	6126      	str	r6, [r4, #16]
 800498c:	6165      	str	r5, [r4, #20]
 800498e:	444e      	add	r6, r9
 8004990:	eba5 0509 	sub.w	r5, r5, r9
 8004994:	6026      	str	r6, [r4, #0]
 8004996:	60a5      	str	r5, [r4, #8]
 8004998:	463e      	mov	r6, r7
 800499a:	42be      	cmp	r6, r7
 800499c:	d900      	bls.n	80049a0 <__ssputs_r+0x86>
 800499e:	463e      	mov	r6, r7
 80049a0:	6820      	ldr	r0, [r4, #0]
 80049a2:	4632      	mov	r2, r6
 80049a4:	4641      	mov	r1, r8
 80049a6:	f000 fab5 	bl	8004f14 <memmove>
 80049aa:	68a3      	ldr	r3, [r4, #8]
 80049ac:	1b9b      	subs	r3, r3, r6
 80049ae:	60a3      	str	r3, [r4, #8]
 80049b0:	6823      	ldr	r3, [r4, #0]
 80049b2:	4433      	add	r3, r6
 80049b4:	6023      	str	r3, [r4, #0]
 80049b6:	2000      	movs	r0, #0
 80049b8:	e7db      	b.n	8004972 <__ssputs_r+0x58>
 80049ba:	462a      	mov	r2, r5
 80049bc:	f000 fba4 	bl	8005108 <_realloc_r>
 80049c0:	4606      	mov	r6, r0
 80049c2:	2800      	cmp	r0, #0
 80049c4:	d1e1      	bne.n	800498a <__ssputs_r+0x70>
 80049c6:	6921      	ldr	r1, [r4, #16]
 80049c8:	4650      	mov	r0, sl
 80049ca:	f000 fabd 	bl	8004f48 <_free_r>
 80049ce:	e7c7      	b.n	8004960 <__ssputs_r+0x46>

080049d0 <_svfiprintf_r>:
 80049d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80049d4:	4698      	mov	r8, r3
 80049d6:	898b      	ldrh	r3, [r1, #12]
 80049d8:	061b      	lsls	r3, r3, #24
 80049da:	b09d      	sub	sp, #116	; 0x74
 80049dc:	4607      	mov	r7, r0
 80049de:	460d      	mov	r5, r1
 80049e0:	4614      	mov	r4, r2
 80049e2:	d50e      	bpl.n	8004a02 <_svfiprintf_r+0x32>
 80049e4:	690b      	ldr	r3, [r1, #16]
 80049e6:	b963      	cbnz	r3, 8004a02 <_svfiprintf_r+0x32>
 80049e8:	2140      	movs	r1, #64	; 0x40
 80049ea:	f000 fb19 	bl	8005020 <_malloc_r>
 80049ee:	6028      	str	r0, [r5, #0]
 80049f0:	6128      	str	r0, [r5, #16]
 80049f2:	b920      	cbnz	r0, 80049fe <_svfiprintf_r+0x2e>
 80049f4:	230c      	movs	r3, #12
 80049f6:	603b      	str	r3, [r7, #0]
 80049f8:	f04f 30ff 	mov.w	r0, #4294967295
 80049fc:	e0d1      	b.n	8004ba2 <_svfiprintf_r+0x1d2>
 80049fe:	2340      	movs	r3, #64	; 0x40
 8004a00:	616b      	str	r3, [r5, #20]
 8004a02:	2300      	movs	r3, #0
 8004a04:	9309      	str	r3, [sp, #36]	; 0x24
 8004a06:	2320      	movs	r3, #32
 8004a08:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8004a0c:	f8cd 800c 	str.w	r8, [sp, #12]
 8004a10:	2330      	movs	r3, #48	; 0x30
 8004a12:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8004bbc <_svfiprintf_r+0x1ec>
 8004a16:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8004a1a:	f04f 0901 	mov.w	r9, #1
 8004a1e:	4623      	mov	r3, r4
 8004a20:	469a      	mov	sl, r3
 8004a22:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004a26:	b10a      	cbz	r2, 8004a2c <_svfiprintf_r+0x5c>
 8004a28:	2a25      	cmp	r2, #37	; 0x25
 8004a2a:	d1f9      	bne.n	8004a20 <_svfiprintf_r+0x50>
 8004a2c:	ebba 0b04 	subs.w	fp, sl, r4
 8004a30:	d00b      	beq.n	8004a4a <_svfiprintf_r+0x7a>
 8004a32:	465b      	mov	r3, fp
 8004a34:	4622      	mov	r2, r4
 8004a36:	4629      	mov	r1, r5
 8004a38:	4638      	mov	r0, r7
 8004a3a:	f7ff ff6e 	bl	800491a <__ssputs_r>
 8004a3e:	3001      	adds	r0, #1
 8004a40:	f000 80aa 	beq.w	8004b98 <_svfiprintf_r+0x1c8>
 8004a44:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004a46:	445a      	add	r2, fp
 8004a48:	9209      	str	r2, [sp, #36]	; 0x24
 8004a4a:	f89a 3000 	ldrb.w	r3, [sl]
 8004a4e:	2b00      	cmp	r3, #0
 8004a50:	f000 80a2 	beq.w	8004b98 <_svfiprintf_r+0x1c8>
 8004a54:	2300      	movs	r3, #0
 8004a56:	f04f 32ff 	mov.w	r2, #4294967295
 8004a5a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004a5e:	f10a 0a01 	add.w	sl, sl, #1
 8004a62:	9304      	str	r3, [sp, #16]
 8004a64:	9307      	str	r3, [sp, #28]
 8004a66:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8004a6a:	931a      	str	r3, [sp, #104]	; 0x68
 8004a6c:	4654      	mov	r4, sl
 8004a6e:	2205      	movs	r2, #5
 8004a70:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004a74:	4851      	ldr	r0, [pc, #324]	; (8004bbc <_svfiprintf_r+0x1ec>)
 8004a76:	f7fb fbc3 	bl	8000200 <memchr>
 8004a7a:	9a04      	ldr	r2, [sp, #16]
 8004a7c:	b9d8      	cbnz	r0, 8004ab6 <_svfiprintf_r+0xe6>
 8004a7e:	06d0      	lsls	r0, r2, #27
 8004a80:	bf44      	itt	mi
 8004a82:	2320      	movmi	r3, #32
 8004a84:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004a88:	0711      	lsls	r1, r2, #28
 8004a8a:	bf44      	itt	mi
 8004a8c:	232b      	movmi	r3, #43	; 0x2b
 8004a8e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004a92:	f89a 3000 	ldrb.w	r3, [sl]
 8004a96:	2b2a      	cmp	r3, #42	; 0x2a
 8004a98:	d015      	beq.n	8004ac6 <_svfiprintf_r+0xf6>
 8004a9a:	9a07      	ldr	r2, [sp, #28]
 8004a9c:	4654      	mov	r4, sl
 8004a9e:	2000      	movs	r0, #0
 8004aa0:	f04f 0c0a 	mov.w	ip, #10
 8004aa4:	4621      	mov	r1, r4
 8004aa6:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004aaa:	3b30      	subs	r3, #48	; 0x30
 8004aac:	2b09      	cmp	r3, #9
 8004aae:	d94e      	bls.n	8004b4e <_svfiprintf_r+0x17e>
 8004ab0:	b1b0      	cbz	r0, 8004ae0 <_svfiprintf_r+0x110>
 8004ab2:	9207      	str	r2, [sp, #28]
 8004ab4:	e014      	b.n	8004ae0 <_svfiprintf_r+0x110>
 8004ab6:	eba0 0308 	sub.w	r3, r0, r8
 8004aba:	fa09 f303 	lsl.w	r3, r9, r3
 8004abe:	4313      	orrs	r3, r2
 8004ac0:	9304      	str	r3, [sp, #16]
 8004ac2:	46a2      	mov	sl, r4
 8004ac4:	e7d2      	b.n	8004a6c <_svfiprintf_r+0x9c>
 8004ac6:	9b03      	ldr	r3, [sp, #12]
 8004ac8:	1d19      	adds	r1, r3, #4
 8004aca:	681b      	ldr	r3, [r3, #0]
 8004acc:	9103      	str	r1, [sp, #12]
 8004ace:	2b00      	cmp	r3, #0
 8004ad0:	bfbb      	ittet	lt
 8004ad2:	425b      	neglt	r3, r3
 8004ad4:	f042 0202 	orrlt.w	r2, r2, #2
 8004ad8:	9307      	strge	r3, [sp, #28]
 8004ada:	9307      	strlt	r3, [sp, #28]
 8004adc:	bfb8      	it	lt
 8004ade:	9204      	strlt	r2, [sp, #16]
 8004ae0:	7823      	ldrb	r3, [r4, #0]
 8004ae2:	2b2e      	cmp	r3, #46	; 0x2e
 8004ae4:	d10c      	bne.n	8004b00 <_svfiprintf_r+0x130>
 8004ae6:	7863      	ldrb	r3, [r4, #1]
 8004ae8:	2b2a      	cmp	r3, #42	; 0x2a
 8004aea:	d135      	bne.n	8004b58 <_svfiprintf_r+0x188>
 8004aec:	9b03      	ldr	r3, [sp, #12]
 8004aee:	1d1a      	adds	r2, r3, #4
 8004af0:	681b      	ldr	r3, [r3, #0]
 8004af2:	9203      	str	r2, [sp, #12]
 8004af4:	2b00      	cmp	r3, #0
 8004af6:	bfb8      	it	lt
 8004af8:	f04f 33ff 	movlt.w	r3, #4294967295
 8004afc:	3402      	adds	r4, #2
 8004afe:	9305      	str	r3, [sp, #20]
 8004b00:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8004bcc <_svfiprintf_r+0x1fc>
 8004b04:	7821      	ldrb	r1, [r4, #0]
 8004b06:	2203      	movs	r2, #3
 8004b08:	4650      	mov	r0, sl
 8004b0a:	f7fb fb79 	bl	8000200 <memchr>
 8004b0e:	b140      	cbz	r0, 8004b22 <_svfiprintf_r+0x152>
 8004b10:	2340      	movs	r3, #64	; 0x40
 8004b12:	eba0 000a 	sub.w	r0, r0, sl
 8004b16:	fa03 f000 	lsl.w	r0, r3, r0
 8004b1a:	9b04      	ldr	r3, [sp, #16]
 8004b1c:	4303      	orrs	r3, r0
 8004b1e:	3401      	adds	r4, #1
 8004b20:	9304      	str	r3, [sp, #16]
 8004b22:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004b26:	4826      	ldr	r0, [pc, #152]	; (8004bc0 <_svfiprintf_r+0x1f0>)
 8004b28:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8004b2c:	2206      	movs	r2, #6
 8004b2e:	f7fb fb67 	bl	8000200 <memchr>
 8004b32:	2800      	cmp	r0, #0
 8004b34:	d038      	beq.n	8004ba8 <_svfiprintf_r+0x1d8>
 8004b36:	4b23      	ldr	r3, [pc, #140]	; (8004bc4 <_svfiprintf_r+0x1f4>)
 8004b38:	bb1b      	cbnz	r3, 8004b82 <_svfiprintf_r+0x1b2>
 8004b3a:	9b03      	ldr	r3, [sp, #12]
 8004b3c:	3307      	adds	r3, #7
 8004b3e:	f023 0307 	bic.w	r3, r3, #7
 8004b42:	3308      	adds	r3, #8
 8004b44:	9303      	str	r3, [sp, #12]
 8004b46:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004b48:	4433      	add	r3, r6
 8004b4a:	9309      	str	r3, [sp, #36]	; 0x24
 8004b4c:	e767      	b.n	8004a1e <_svfiprintf_r+0x4e>
 8004b4e:	fb0c 3202 	mla	r2, ip, r2, r3
 8004b52:	460c      	mov	r4, r1
 8004b54:	2001      	movs	r0, #1
 8004b56:	e7a5      	b.n	8004aa4 <_svfiprintf_r+0xd4>
 8004b58:	2300      	movs	r3, #0
 8004b5a:	3401      	adds	r4, #1
 8004b5c:	9305      	str	r3, [sp, #20]
 8004b5e:	4619      	mov	r1, r3
 8004b60:	f04f 0c0a 	mov.w	ip, #10
 8004b64:	4620      	mov	r0, r4
 8004b66:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004b6a:	3a30      	subs	r2, #48	; 0x30
 8004b6c:	2a09      	cmp	r2, #9
 8004b6e:	d903      	bls.n	8004b78 <_svfiprintf_r+0x1a8>
 8004b70:	2b00      	cmp	r3, #0
 8004b72:	d0c5      	beq.n	8004b00 <_svfiprintf_r+0x130>
 8004b74:	9105      	str	r1, [sp, #20]
 8004b76:	e7c3      	b.n	8004b00 <_svfiprintf_r+0x130>
 8004b78:	fb0c 2101 	mla	r1, ip, r1, r2
 8004b7c:	4604      	mov	r4, r0
 8004b7e:	2301      	movs	r3, #1
 8004b80:	e7f0      	b.n	8004b64 <_svfiprintf_r+0x194>
 8004b82:	ab03      	add	r3, sp, #12
 8004b84:	9300      	str	r3, [sp, #0]
 8004b86:	462a      	mov	r2, r5
 8004b88:	4b0f      	ldr	r3, [pc, #60]	; (8004bc8 <_svfiprintf_r+0x1f8>)
 8004b8a:	a904      	add	r1, sp, #16
 8004b8c:	4638      	mov	r0, r7
 8004b8e:	f3af 8000 	nop.w
 8004b92:	1c42      	adds	r2, r0, #1
 8004b94:	4606      	mov	r6, r0
 8004b96:	d1d6      	bne.n	8004b46 <_svfiprintf_r+0x176>
 8004b98:	89ab      	ldrh	r3, [r5, #12]
 8004b9a:	065b      	lsls	r3, r3, #25
 8004b9c:	f53f af2c 	bmi.w	80049f8 <_svfiprintf_r+0x28>
 8004ba0:	9809      	ldr	r0, [sp, #36]	; 0x24
 8004ba2:	b01d      	add	sp, #116	; 0x74
 8004ba4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004ba8:	ab03      	add	r3, sp, #12
 8004baa:	9300      	str	r3, [sp, #0]
 8004bac:	462a      	mov	r2, r5
 8004bae:	4b06      	ldr	r3, [pc, #24]	; (8004bc8 <_svfiprintf_r+0x1f8>)
 8004bb0:	a904      	add	r1, sp, #16
 8004bb2:	4638      	mov	r0, r7
 8004bb4:	f000 f87a 	bl	8004cac <_printf_i>
 8004bb8:	e7eb      	b.n	8004b92 <_svfiprintf_r+0x1c2>
 8004bba:	bf00      	nop
 8004bbc:	08005928 	.word	0x08005928
 8004bc0:	08005932 	.word	0x08005932
 8004bc4:	00000000 	.word	0x00000000
 8004bc8:	0800491b 	.word	0x0800491b
 8004bcc:	0800592e 	.word	0x0800592e

08004bd0 <_printf_common>:
 8004bd0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004bd4:	4616      	mov	r6, r2
 8004bd6:	4699      	mov	r9, r3
 8004bd8:	688a      	ldr	r2, [r1, #8]
 8004bda:	690b      	ldr	r3, [r1, #16]
 8004bdc:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8004be0:	4293      	cmp	r3, r2
 8004be2:	bfb8      	it	lt
 8004be4:	4613      	movlt	r3, r2
 8004be6:	6033      	str	r3, [r6, #0]
 8004be8:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8004bec:	4607      	mov	r7, r0
 8004bee:	460c      	mov	r4, r1
 8004bf0:	b10a      	cbz	r2, 8004bf6 <_printf_common+0x26>
 8004bf2:	3301      	adds	r3, #1
 8004bf4:	6033      	str	r3, [r6, #0]
 8004bf6:	6823      	ldr	r3, [r4, #0]
 8004bf8:	0699      	lsls	r1, r3, #26
 8004bfa:	bf42      	ittt	mi
 8004bfc:	6833      	ldrmi	r3, [r6, #0]
 8004bfe:	3302      	addmi	r3, #2
 8004c00:	6033      	strmi	r3, [r6, #0]
 8004c02:	6825      	ldr	r5, [r4, #0]
 8004c04:	f015 0506 	ands.w	r5, r5, #6
 8004c08:	d106      	bne.n	8004c18 <_printf_common+0x48>
 8004c0a:	f104 0a19 	add.w	sl, r4, #25
 8004c0e:	68e3      	ldr	r3, [r4, #12]
 8004c10:	6832      	ldr	r2, [r6, #0]
 8004c12:	1a9b      	subs	r3, r3, r2
 8004c14:	42ab      	cmp	r3, r5
 8004c16:	dc26      	bgt.n	8004c66 <_printf_common+0x96>
 8004c18:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8004c1c:	1e13      	subs	r3, r2, #0
 8004c1e:	6822      	ldr	r2, [r4, #0]
 8004c20:	bf18      	it	ne
 8004c22:	2301      	movne	r3, #1
 8004c24:	0692      	lsls	r2, r2, #26
 8004c26:	d42b      	bmi.n	8004c80 <_printf_common+0xb0>
 8004c28:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004c2c:	4649      	mov	r1, r9
 8004c2e:	4638      	mov	r0, r7
 8004c30:	47c0      	blx	r8
 8004c32:	3001      	adds	r0, #1
 8004c34:	d01e      	beq.n	8004c74 <_printf_common+0xa4>
 8004c36:	6823      	ldr	r3, [r4, #0]
 8004c38:	68e5      	ldr	r5, [r4, #12]
 8004c3a:	6832      	ldr	r2, [r6, #0]
 8004c3c:	f003 0306 	and.w	r3, r3, #6
 8004c40:	2b04      	cmp	r3, #4
 8004c42:	bf08      	it	eq
 8004c44:	1aad      	subeq	r5, r5, r2
 8004c46:	68a3      	ldr	r3, [r4, #8]
 8004c48:	6922      	ldr	r2, [r4, #16]
 8004c4a:	bf0c      	ite	eq
 8004c4c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004c50:	2500      	movne	r5, #0
 8004c52:	4293      	cmp	r3, r2
 8004c54:	bfc4      	itt	gt
 8004c56:	1a9b      	subgt	r3, r3, r2
 8004c58:	18ed      	addgt	r5, r5, r3
 8004c5a:	2600      	movs	r6, #0
 8004c5c:	341a      	adds	r4, #26
 8004c5e:	42b5      	cmp	r5, r6
 8004c60:	d11a      	bne.n	8004c98 <_printf_common+0xc8>
 8004c62:	2000      	movs	r0, #0
 8004c64:	e008      	b.n	8004c78 <_printf_common+0xa8>
 8004c66:	2301      	movs	r3, #1
 8004c68:	4652      	mov	r2, sl
 8004c6a:	4649      	mov	r1, r9
 8004c6c:	4638      	mov	r0, r7
 8004c6e:	47c0      	blx	r8
 8004c70:	3001      	adds	r0, #1
 8004c72:	d103      	bne.n	8004c7c <_printf_common+0xac>
 8004c74:	f04f 30ff 	mov.w	r0, #4294967295
 8004c78:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004c7c:	3501      	adds	r5, #1
 8004c7e:	e7c6      	b.n	8004c0e <_printf_common+0x3e>
 8004c80:	18e1      	adds	r1, r4, r3
 8004c82:	1c5a      	adds	r2, r3, #1
 8004c84:	2030      	movs	r0, #48	; 0x30
 8004c86:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8004c8a:	4422      	add	r2, r4
 8004c8c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8004c90:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8004c94:	3302      	adds	r3, #2
 8004c96:	e7c7      	b.n	8004c28 <_printf_common+0x58>
 8004c98:	2301      	movs	r3, #1
 8004c9a:	4622      	mov	r2, r4
 8004c9c:	4649      	mov	r1, r9
 8004c9e:	4638      	mov	r0, r7
 8004ca0:	47c0      	blx	r8
 8004ca2:	3001      	adds	r0, #1
 8004ca4:	d0e6      	beq.n	8004c74 <_printf_common+0xa4>
 8004ca6:	3601      	adds	r6, #1
 8004ca8:	e7d9      	b.n	8004c5e <_printf_common+0x8e>
	...

08004cac <_printf_i>:
 8004cac:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004cb0:	7e0f      	ldrb	r7, [r1, #24]
 8004cb2:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8004cb4:	2f78      	cmp	r7, #120	; 0x78
 8004cb6:	4691      	mov	r9, r2
 8004cb8:	4680      	mov	r8, r0
 8004cba:	460c      	mov	r4, r1
 8004cbc:	469a      	mov	sl, r3
 8004cbe:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8004cc2:	d807      	bhi.n	8004cd4 <_printf_i+0x28>
 8004cc4:	2f62      	cmp	r7, #98	; 0x62
 8004cc6:	d80a      	bhi.n	8004cde <_printf_i+0x32>
 8004cc8:	2f00      	cmp	r7, #0
 8004cca:	f000 80d8 	beq.w	8004e7e <_printf_i+0x1d2>
 8004cce:	2f58      	cmp	r7, #88	; 0x58
 8004cd0:	f000 80a3 	beq.w	8004e1a <_printf_i+0x16e>
 8004cd4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004cd8:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8004cdc:	e03a      	b.n	8004d54 <_printf_i+0xa8>
 8004cde:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8004ce2:	2b15      	cmp	r3, #21
 8004ce4:	d8f6      	bhi.n	8004cd4 <_printf_i+0x28>
 8004ce6:	a101      	add	r1, pc, #4	; (adr r1, 8004cec <_printf_i+0x40>)
 8004ce8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8004cec:	08004d45 	.word	0x08004d45
 8004cf0:	08004d59 	.word	0x08004d59
 8004cf4:	08004cd5 	.word	0x08004cd5
 8004cf8:	08004cd5 	.word	0x08004cd5
 8004cfc:	08004cd5 	.word	0x08004cd5
 8004d00:	08004cd5 	.word	0x08004cd5
 8004d04:	08004d59 	.word	0x08004d59
 8004d08:	08004cd5 	.word	0x08004cd5
 8004d0c:	08004cd5 	.word	0x08004cd5
 8004d10:	08004cd5 	.word	0x08004cd5
 8004d14:	08004cd5 	.word	0x08004cd5
 8004d18:	08004e65 	.word	0x08004e65
 8004d1c:	08004d89 	.word	0x08004d89
 8004d20:	08004e47 	.word	0x08004e47
 8004d24:	08004cd5 	.word	0x08004cd5
 8004d28:	08004cd5 	.word	0x08004cd5
 8004d2c:	08004e87 	.word	0x08004e87
 8004d30:	08004cd5 	.word	0x08004cd5
 8004d34:	08004d89 	.word	0x08004d89
 8004d38:	08004cd5 	.word	0x08004cd5
 8004d3c:	08004cd5 	.word	0x08004cd5
 8004d40:	08004e4f 	.word	0x08004e4f
 8004d44:	682b      	ldr	r3, [r5, #0]
 8004d46:	1d1a      	adds	r2, r3, #4
 8004d48:	681b      	ldr	r3, [r3, #0]
 8004d4a:	602a      	str	r2, [r5, #0]
 8004d4c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004d50:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004d54:	2301      	movs	r3, #1
 8004d56:	e0a3      	b.n	8004ea0 <_printf_i+0x1f4>
 8004d58:	6820      	ldr	r0, [r4, #0]
 8004d5a:	6829      	ldr	r1, [r5, #0]
 8004d5c:	0606      	lsls	r6, r0, #24
 8004d5e:	f101 0304 	add.w	r3, r1, #4
 8004d62:	d50a      	bpl.n	8004d7a <_printf_i+0xce>
 8004d64:	680e      	ldr	r6, [r1, #0]
 8004d66:	602b      	str	r3, [r5, #0]
 8004d68:	2e00      	cmp	r6, #0
 8004d6a:	da03      	bge.n	8004d74 <_printf_i+0xc8>
 8004d6c:	232d      	movs	r3, #45	; 0x2d
 8004d6e:	4276      	negs	r6, r6
 8004d70:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004d74:	485e      	ldr	r0, [pc, #376]	; (8004ef0 <_printf_i+0x244>)
 8004d76:	230a      	movs	r3, #10
 8004d78:	e019      	b.n	8004dae <_printf_i+0x102>
 8004d7a:	680e      	ldr	r6, [r1, #0]
 8004d7c:	602b      	str	r3, [r5, #0]
 8004d7e:	f010 0f40 	tst.w	r0, #64	; 0x40
 8004d82:	bf18      	it	ne
 8004d84:	b236      	sxthne	r6, r6
 8004d86:	e7ef      	b.n	8004d68 <_printf_i+0xbc>
 8004d88:	682b      	ldr	r3, [r5, #0]
 8004d8a:	6820      	ldr	r0, [r4, #0]
 8004d8c:	1d19      	adds	r1, r3, #4
 8004d8e:	6029      	str	r1, [r5, #0]
 8004d90:	0601      	lsls	r1, r0, #24
 8004d92:	d501      	bpl.n	8004d98 <_printf_i+0xec>
 8004d94:	681e      	ldr	r6, [r3, #0]
 8004d96:	e002      	b.n	8004d9e <_printf_i+0xf2>
 8004d98:	0646      	lsls	r6, r0, #25
 8004d9a:	d5fb      	bpl.n	8004d94 <_printf_i+0xe8>
 8004d9c:	881e      	ldrh	r6, [r3, #0]
 8004d9e:	4854      	ldr	r0, [pc, #336]	; (8004ef0 <_printf_i+0x244>)
 8004da0:	2f6f      	cmp	r7, #111	; 0x6f
 8004da2:	bf0c      	ite	eq
 8004da4:	2308      	moveq	r3, #8
 8004da6:	230a      	movne	r3, #10
 8004da8:	2100      	movs	r1, #0
 8004daa:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8004dae:	6865      	ldr	r5, [r4, #4]
 8004db0:	60a5      	str	r5, [r4, #8]
 8004db2:	2d00      	cmp	r5, #0
 8004db4:	bfa2      	ittt	ge
 8004db6:	6821      	ldrge	r1, [r4, #0]
 8004db8:	f021 0104 	bicge.w	r1, r1, #4
 8004dbc:	6021      	strge	r1, [r4, #0]
 8004dbe:	b90e      	cbnz	r6, 8004dc4 <_printf_i+0x118>
 8004dc0:	2d00      	cmp	r5, #0
 8004dc2:	d04d      	beq.n	8004e60 <_printf_i+0x1b4>
 8004dc4:	4615      	mov	r5, r2
 8004dc6:	fbb6 f1f3 	udiv	r1, r6, r3
 8004dca:	fb03 6711 	mls	r7, r3, r1, r6
 8004dce:	5dc7      	ldrb	r7, [r0, r7]
 8004dd0:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8004dd4:	4637      	mov	r7, r6
 8004dd6:	42bb      	cmp	r3, r7
 8004dd8:	460e      	mov	r6, r1
 8004dda:	d9f4      	bls.n	8004dc6 <_printf_i+0x11a>
 8004ddc:	2b08      	cmp	r3, #8
 8004dde:	d10b      	bne.n	8004df8 <_printf_i+0x14c>
 8004de0:	6823      	ldr	r3, [r4, #0]
 8004de2:	07de      	lsls	r6, r3, #31
 8004de4:	d508      	bpl.n	8004df8 <_printf_i+0x14c>
 8004de6:	6923      	ldr	r3, [r4, #16]
 8004de8:	6861      	ldr	r1, [r4, #4]
 8004dea:	4299      	cmp	r1, r3
 8004dec:	bfde      	ittt	le
 8004dee:	2330      	movle	r3, #48	; 0x30
 8004df0:	f805 3c01 	strble.w	r3, [r5, #-1]
 8004df4:	f105 35ff 	addle.w	r5, r5, #4294967295
 8004df8:	1b52      	subs	r2, r2, r5
 8004dfa:	6122      	str	r2, [r4, #16]
 8004dfc:	f8cd a000 	str.w	sl, [sp]
 8004e00:	464b      	mov	r3, r9
 8004e02:	aa03      	add	r2, sp, #12
 8004e04:	4621      	mov	r1, r4
 8004e06:	4640      	mov	r0, r8
 8004e08:	f7ff fee2 	bl	8004bd0 <_printf_common>
 8004e0c:	3001      	adds	r0, #1
 8004e0e:	d14c      	bne.n	8004eaa <_printf_i+0x1fe>
 8004e10:	f04f 30ff 	mov.w	r0, #4294967295
 8004e14:	b004      	add	sp, #16
 8004e16:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004e1a:	4835      	ldr	r0, [pc, #212]	; (8004ef0 <_printf_i+0x244>)
 8004e1c:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8004e20:	6829      	ldr	r1, [r5, #0]
 8004e22:	6823      	ldr	r3, [r4, #0]
 8004e24:	f851 6b04 	ldr.w	r6, [r1], #4
 8004e28:	6029      	str	r1, [r5, #0]
 8004e2a:	061d      	lsls	r5, r3, #24
 8004e2c:	d514      	bpl.n	8004e58 <_printf_i+0x1ac>
 8004e2e:	07df      	lsls	r7, r3, #31
 8004e30:	bf44      	itt	mi
 8004e32:	f043 0320 	orrmi.w	r3, r3, #32
 8004e36:	6023      	strmi	r3, [r4, #0]
 8004e38:	b91e      	cbnz	r6, 8004e42 <_printf_i+0x196>
 8004e3a:	6823      	ldr	r3, [r4, #0]
 8004e3c:	f023 0320 	bic.w	r3, r3, #32
 8004e40:	6023      	str	r3, [r4, #0]
 8004e42:	2310      	movs	r3, #16
 8004e44:	e7b0      	b.n	8004da8 <_printf_i+0xfc>
 8004e46:	6823      	ldr	r3, [r4, #0]
 8004e48:	f043 0320 	orr.w	r3, r3, #32
 8004e4c:	6023      	str	r3, [r4, #0]
 8004e4e:	2378      	movs	r3, #120	; 0x78
 8004e50:	4828      	ldr	r0, [pc, #160]	; (8004ef4 <_printf_i+0x248>)
 8004e52:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8004e56:	e7e3      	b.n	8004e20 <_printf_i+0x174>
 8004e58:	0659      	lsls	r1, r3, #25
 8004e5a:	bf48      	it	mi
 8004e5c:	b2b6      	uxthmi	r6, r6
 8004e5e:	e7e6      	b.n	8004e2e <_printf_i+0x182>
 8004e60:	4615      	mov	r5, r2
 8004e62:	e7bb      	b.n	8004ddc <_printf_i+0x130>
 8004e64:	682b      	ldr	r3, [r5, #0]
 8004e66:	6826      	ldr	r6, [r4, #0]
 8004e68:	6961      	ldr	r1, [r4, #20]
 8004e6a:	1d18      	adds	r0, r3, #4
 8004e6c:	6028      	str	r0, [r5, #0]
 8004e6e:	0635      	lsls	r5, r6, #24
 8004e70:	681b      	ldr	r3, [r3, #0]
 8004e72:	d501      	bpl.n	8004e78 <_printf_i+0x1cc>
 8004e74:	6019      	str	r1, [r3, #0]
 8004e76:	e002      	b.n	8004e7e <_printf_i+0x1d2>
 8004e78:	0670      	lsls	r0, r6, #25
 8004e7a:	d5fb      	bpl.n	8004e74 <_printf_i+0x1c8>
 8004e7c:	8019      	strh	r1, [r3, #0]
 8004e7e:	2300      	movs	r3, #0
 8004e80:	6123      	str	r3, [r4, #16]
 8004e82:	4615      	mov	r5, r2
 8004e84:	e7ba      	b.n	8004dfc <_printf_i+0x150>
 8004e86:	682b      	ldr	r3, [r5, #0]
 8004e88:	1d1a      	adds	r2, r3, #4
 8004e8a:	602a      	str	r2, [r5, #0]
 8004e8c:	681d      	ldr	r5, [r3, #0]
 8004e8e:	6862      	ldr	r2, [r4, #4]
 8004e90:	2100      	movs	r1, #0
 8004e92:	4628      	mov	r0, r5
 8004e94:	f7fb f9b4 	bl	8000200 <memchr>
 8004e98:	b108      	cbz	r0, 8004e9e <_printf_i+0x1f2>
 8004e9a:	1b40      	subs	r0, r0, r5
 8004e9c:	6060      	str	r0, [r4, #4]
 8004e9e:	6863      	ldr	r3, [r4, #4]
 8004ea0:	6123      	str	r3, [r4, #16]
 8004ea2:	2300      	movs	r3, #0
 8004ea4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004ea8:	e7a8      	b.n	8004dfc <_printf_i+0x150>
 8004eaa:	6923      	ldr	r3, [r4, #16]
 8004eac:	462a      	mov	r2, r5
 8004eae:	4649      	mov	r1, r9
 8004eb0:	4640      	mov	r0, r8
 8004eb2:	47d0      	blx	sl
 8004eb4:	3001      	adds	r0, #1
 8004eb6:	d0ab      	beq.n	8004e10 <_printf_i+0x164>
 8004eb8:	6823      	ldr	r3, [r4, #0]
 8004eba:	079b      	lsls	r3, r3, #30
 8004ebc:	d413      	bmi.n	8004ee6 <_printf_i+0x23a>
 8004ebe:	68e0      	ldr	r0, [r4, #12]
 8004ec0:	9b03      	ldr	r3, [sp, #12]
 8004ec2:	4298      	cmp	r0, r3
 8004ec4:	bfb8      	it	lt
 8004ec6:	4618      	movlt	r0, r3
 8004ec8:	e7a4      	b.n	8004e14 <_printf_i+0x168>
 8004eca:	2301      	movs	r3, #1
 8004ecc:	4632      	mov	r2, r6
 8004ece:	4649      	mov	r1, r9
 8004ed0:	4640      	mov	r0, r8
 8004ed2:	47d0      	blx	sl
 8004ed4:	3001      	adds	r0, #1
 8004ed6:	d09b      	beq.n	8004e10 <_printf_i+0x164>
 8004ed8:	3501      	adds	r5, #1
 8004eda:	68e3      	ldr	r3, [r4, #12]
 8004edc:	9903      	ldr	r1, [sp, #12]
 8004ede:	1a5b      	subs	r3, r3, r1
 8004ee0:	42ab      	cmp	r3, r5
 8004ee2:	dcf2      	bgt.n	8004eca <_printf_i+0x21e>
 8004ee4:	e7eb      	b.n	8004ebe <_printf_i+0x212>
 8004ee6:	2500      	movs	r5, #0
 8004ee8:	f104 0619 	add.w	r6, r4, #25
 8004eec:	e7f5      	b.n	8004eda <_printf_i+0x22e>
 8004eee:	bf00      	nop
 8004ef0:	08005939 	.word	0x08005939
 8004ef4:	0800594a 	.word	0x0800594a

08004ef8 <memcpy>:
 8004ef8:	440a      	add	r2, r1
 8004efa:	4291      	cmp	r1, r2
 8004efc:	f100 33ff 	add.w	r3, r0, #4294967295
 8004f00:	d100      	bne.n	8004f04 <memcpy+0xc>
 8004f02:	4770      	bx	lr
 8004f04:	b510      	push	{r4, lr}
 8004f06:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004f0a:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004f0e:	4291      	cmp	r1, r2
 8004f10:	d1f9      	bne.n	8004f06 <memcpy+0xe>
 8004f12:	bd10      	pop	{r4, pc}

08004f14 <memmove>:
 8004f14:	4288      	cmp	r0, r1
 8004f16:	b510      	push	{r4, lr}
 8004f18:	eb01 0402 	add.w	r4, r1, r2
 8004f1c:	d902      	bls.n	8004f24 <memmove+0x10>
 8004f1e:	4284      	cmp	r4, r0
 8004f20:	4623      	mov	r3, r4
 8004f22:	d807      	bhi.n	8004f34 <memmove+0x20>
 8004f24:	1e43      	subs	r3, r0, #1
 8004f26:	42a1      	cmp	r1, r4
 8004f28:	d008      	beq.n	8004f3c <memmove+0x28>
 8004f2a:	f811 2b01 	ldrb.w	r2, [r1], #1
 8004f2e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8004f32:	e7f8      	b.n	8004f26 <memmove+0x12>
 8004f34:	4402      	add	r2, r0
 8004f36:	4601      	mov	r1, r0
 8004f38:	428a      	cmp	r2, r1
 8004f3a:	d100      	bne.n	8004f3e <memmove+0x2a>
 8004f3c:	bd10      	pop	{r4, pc}
 8004f3e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8004f42:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8004f46:	e7f7      	b.n	8004f38 <memmove+0x24>

08004f48 <_free_r>:
 8004f48:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8004f4a:	2900      	cmp	r1, #0
 8004f4c:	d044      	beq.n	8004fd8 <_free_r+0x90>
 8004f4e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004f52:	9001      	str	r0, [sp, #4]
 8004f54:	2b00      	cmp	r3, #0
 8004f56:	f1a1 0404 	sub.w	r4, r1, #4
 8004f5a:	bfb8      	it	lt
 8004f5c:	18e4      	addlt	r4, r4, r3
 8004f5e:	f000 f913 	bl	8005188 <__malloc_lock>
 8004f62:	4a1e      	ldr	r2, [pc, #120]	; (8004fdc <_free_r+0x94>)
 8004f64:	9801      	ldr	r0, [sp, #4]
 8004f66:	6813      	ldr	r3, [r2, #0]
 8004f68:	b933      	cbnz	r3, 8004f78 <_free_r+0x30>
 8004f6a:	6063      	str	r3, [r4, #4]
 8004f6c:	6014      	str	r4, [r2, #0]
 8004f6e:	b003      	add	sp, #12
 8004f70:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8004f74:	f000 b90e 	b.w	8005194 <__malloc_unlock>
 8004f78:	42a3      	cmp	r3, r4
 8004f7a:	d908      	bls.n	8004f8e <_free_r+0x46>
 8004f7c:	6825      	ldr	r5, [r4, #0]
 8004f7e:	1961      	adds	r1, r4, r5
 8004f80:	428b      	cmp	r3, r1
 8004f82:	bf01      	itttt	eq
 8004f84:	6819      	ldreq	r1, [r3, #0]
 8004f86:	685b      	ldreq	r3, [r3, #4]
 8004f88:	1949      	addeq	r1, r1, r5
 8004f8a:	6021      	streq	r1, [r4, #0]
 8004f8c:	e7ed      	b.n	8004f6a <_free_r+0x22>
 8004f8e:	461a      	mov	r2, r3
 8004f90:	685b      	ldr	r3, [r3, #4]
 8004f92:	b10b      	cbz	r3, 8004f98 <_free_r+0x50>
 8004f94:	42a3      	cmp	r3, r4
 8004f96:	d9fa      	bls.n	8004f8e <_free_r+0x46>
 8004f98:	6811      	ldr	r1, [r2, #0]
 8004f9a:	1855      	adds	r5, r2, r1
 8004f9c:	42a5      	cmp	r5, r4
 8004f9e:	d10b      	bne.n	8004fb8 <_free_r+0x70>
 8004fa0:	6824      	ldr	r4, [r4, #0]
 8004fa2:	4421      	add	r1, r4
 8004fa4:	1854      	adds	r4, r2, r1
 8004fa6:	42a3      	cmp	r3, r4
 8004fa8:	6011      	str	r1, [r2, #0]
 8004faa:	d1e0      	bne.n	8004f6e <_free_r+0x26>
 8004fac:	681c      	ldr	r4, [r3, #0]
 8004fae:	685b      	ldr	r3, [r3, #4]
 8004fb0:	6053      	str	r3, [r2, #4]
 8004fb2:	4421      	add	r1, r4
 8004fb4:	6011      	str	r1, [r2, #0]
 8004fb6:	e7da      	b.n	8004f6e <_free_r+0x26>
 8004fb8:	d902      	bls.n	8004fc0 <_free_r+0x78>
 8004fba:	230c      	movs	r3, #12
 8004fbc:	6003      	str	r3, [r0, #0]
 8004fbe:	e7d6      	b.n	8004f6e <_free_r+0x26>
 8004fc0:	6825      	ldr	r5, [r4, #0]
 8004fc2:	1961      	adds	r1, r4, r5
 8004fc4:	428b      	cmp	r3, r1
 8004fc6:	bf04      	itt	eq
 8004fc8:	6819      	ldreq	r1, [r3, #0]
 8004fca:	685b      	ldreq	r3, [r3, #4]
 8004fcc:	6063      	str	r3, [r4, #4]
 8004fce:	bf04      	itt	eq
 8004fd0:	1949      	addeq	r1, r1, r5
 8004fd2:	6021      	streq	r1, [r4, #0]
 8004fd4:	6054      	str	r4, [r2, #4]
 8004fd6:	e7ca      	b.n	8004f6e <_free_r+0x26>
 8004fd8:	b003      	add	sp, #12
 8004fda:	bd30      	pop	{r4, r5, pc}
 8004fdc:	200003ec 	.word	0x200003ec

08004fe0 <sbrk_aligned>:
 8004fe0:	b570      	push	{r4, r5, r6, lr}
 8004fe2:	4e0e      	ldr	r6, [pc, #56]	; (800501c <sbrk_aligned+0x3c>)
 8004fe4:	460c      	mov	r4, r1
 8004fe6:	6831      	ldr	r1, [r6, #0]
 8004fe8:	4605      	mov	r5, r0
 8004fea:	b911      	cbnz	r1, 8004ff2 <sbrk_aligned+0x12>
 8004fec:	f000 f8bc 	bl	8005168 <_sbrk_r>
 8004ff0:	6030      	str	r0, [r6, #0]
 8004ff2:	4621      	mov	r1, r4
 8004ff4:	4628      	mov	r0, r5
 8004ff6:	f000 f8b7 	bl	8005168 <_sbrk_r>
 8004ffa:	1c43      	adds	r3, r0, #1
 8004ffc:	d00a      	beq.n	8005014 <sbrk_aligned+0x34>
 8004ffe:	1cc4      	adds	r4, r0, #3
 8005000:	f024 0403 	bic.w	r4, r4, #3
 8005004:	42a0      	cmp	r0, r4
 8005006:	d007      	beq.n	8005018 <sbrk_aligned+0x38>
 8005008:	1a21      	subs	r1, r4, r0
 800500a:	4628      	mov	r0, r5
 800500c:	f000 f8ac 	bl	8005168 <_sbrk_r>
 8005010:	3001      	adds	r0, #1
 8005012:	d101      	bne.n	8005018 <sbrk_aligned+0x38>
 8005014:	f04f 34ff 	mov.w	r4, #4294967295
 8005018:	4620      	mov	r0, r4
 800501a:	bd70      	pop	{r4, r5, r6, pc}
 800501c:	200003f0 	.word	0x200003f0

08005020 <_malloc_r>:
 8005020:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005024:	1ccd      	adds	r5, r1, #3
 8005026:	f025 0503 	bic.w	r5, r5, #3
 800502a:	3508      	adds	r5, #8
 800502c:	2d0c      	cmp	r5, #12
 800502e:	bf38      	it	cc
 8005030:	250c      	movcc	r5, #12
 8005032:	2d00      	cmp	r5, #0
 8005034:	4607      	mov	r7, r0
 8005036:	db01      	blt.n	800503c <_malloc_r+0x1c>
 8005038:	42a9      	cmp	r1, r5
 800503a:	d905      	bls.n	8005048 <_malloc_r+0x28>
 800503c:	230c      	movs	r3, #12
 800503e:	603b      	str	r3, [r7, #0]
 8005040:	2600      	movs	r6, #0
 8005042:	4630      	mov	r0, r6
 8005044:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005048:	4e2e      	ldr	r6, [pc, #184]	; (8005104 <_malloc_r+0xe4>)
 800504a:	f000 f89d 	bl	8005188 <__malloc_lock>
 800504e:	6833      	ldr	r3, [r6, #0]
 8005050:	461c      	mov	r4, r3
 8005052:	bb34      	cbnz	r4, 80050a2 <_malloc_r+0x82>
 8005054:	4629      	mov	r1, r5
 8005056:	4638      	mov	r0, r7
 8005058:	f7ff ffc2 	bl	8004fe0 <sbrk_aligned>
 800505c:	1c43      	adds	r3, r0, #1
 800505e:	4604      	mov	r4, r0
 8005060:	d14d      	bne.n	80050fe <_malloc_r+0xde>
 8005062:	6834      	ldr	r4, [r6, #0]
 8005064:	4626      	mov	r6, r4
 8005066:	2e00      	cmp	r6, #0
 8005068:	d140      	bne.n	80050ec <_malloc_r+0xcc>
 800506a:	6823      	ldr	r3, [r4, #0]
 800506c:	4631      	mov	r1, r6
 800506e:	4638      	mov	r0, r7
 8005070:	eb04 0803 	add.w	r8, r4, r3
 8005074:	f000 f878 	bl	8005168 <_sbrk_r>
 8005078:	4580      	cmp	r8, r0
 800507a:	d13a      	bne.n	80050f2 <_malloc_r+0xd2>
 800507c:	6821      	ldr	r1, [r4, #0]
 800507e:	3503      	adds	r5, #3
 8005080:	1a6d      	subs	r5, r5, r1
 8005082:	f025 0503 	bic.w	r5, r5, #3
 8005086:	3508      	adds	r5, #8
 8005088:	2d0c      	cmp	r5, #12
 800508a:	bf38      	it	cc
 800508c:	250c      	movcc	r5, #12
 800508e:	4629      	mov	r1, r5
 8005090:	4638      	mov	r0, r7
 8005092:	f7ff ffa5 	bl	8004fe0 <sbrk_aligned>
 8005096:	3001      	adds	r0, #1
 8005098:	d02b      	beq.n	80050f2 <_malloc_r+0xd2>
 800509a:	6823      	ldr	r3, [r4, #0]
 800509c:	442b      	add	r3, r5
 800509e:	6023      	str	r3, [r4, #0]
 80050a0:	e00e      	b.n	80050c0 <_malloc_r+0xa0>
 80050a2:	6822      	ldr	r2, [r4, #0]
 80050a4:	1b52      	subs	r2, r2, r5
 80050a6:	d41e      	bmi.n	80050e6 <_malloc_r+0xc6>
 80050a8:	2a0b      	cmp	r2, #11
 80050aa:	d916      	bls.n	80050da <_malloc_r+0xba>
 80050ac:	1961      	adds	r1, r4, r5
 80050ae:	42a3      	cmp	r3, r4
 80050b0:	6025      	str	r5, [r4, #0]
 80050b2:	bf18      	it	ne
 80050b4:	6059      	strne	r1, [r3, #4]
 80050b6:	6863      	ldr	r3, [r4, #4]
 80050b8:	bf08      	it	eq
 80050ba:	6031      	streq	r1, [r6, #0]
 80050bc:	5162      	str	r2, [r4, r5]
 80050be:	604b      	str	r3, [r1, #4]
 80050c0:	4638      	mov	r0, r7
 80050c2:	f104 060b 	add.w	r6, r4, #11
 80050c6:	f000 f865 	bl	8005194 <__malloc_unlock>
 80050ca:	f026 0607 	bic.w	r6, r6, #7
 80050ce:	1d23      	adds	r3, r4, #4
 80050d0:	1af2      	subs	r2, r6, r3
 80050d2:	d0b6      	beq.n	8005042 <_malloc_r+0x22>
 80050d4:	1b9b      	subs	r3, r3, r6
 80050d6:	50a3      	str	r3, [r4, r2]
 80050d8:	e7b3      	b.n	8005042 <_malloc_r+0x22>
 80050da:	6862      	ldr	r2, [r4, #4]
 80050dc:	42a3      	cmp	r3, r4
 80050de:	bf0c      	ite	eq
 80050e0:	6032      	streq	r2, [r6, #0]
 80050e2:	605a      	strne	r2, [r3, #4]
 80050e4:	e7ec      	b.n	80050c0 <_malloc_r+0xa0>
 80050e6:	4623      	mov	r3, r4
 80050e8:	6864      	ldr	r4, [r4, #4]
 80050ea:	e7b2      	b.n	8005052 <_malloc_r+0x32>
 80050ec:	4634      	mov	r4, r6
 80050ee:	6876      	ldr	r6, [r6, #4]
 80050f0:	e7b9      	b.n	8005066 <_malloc_r+0x46>
 80050f2:	230c      	movs	r3, #12
 80050f4:	603b      	str	r3, [r7, #0]
 80050f6:	4638      	mov	r0, r7
 80050f8:	f000 f84c 	bl	8005194 <__malloc_unlock>
 80050fc:	e7a1      	b.n	8005042 <_malloc_r+0x22>
 80050fe:	6025      	str	r5, [r4, #0]
 8005100:	e7de      	b.n	80050c0 <_malloc_r+0xa0>
 8005102:	bf00      	nop
 8005104:	200003ec 	.word	0x200003ec

08005108 <_realloc_r>:
 8005108:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800510c:	4680      	mov	r8, r0
 800510e:	4614      	mov	r4, r2
 8005110:	460e      	mov	r6, r1
 8005112:	b921      	cbnz	r1, 800511e <_realloc_r+0x16>
 8005114:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005118:	4611      	mov	r1, r2
 800511a:	f7ff bf81 	b.w	8005020 <_malloc_r>
 800511e:	b92a      	cbnz	r2, 800512c <_realloc_r+0x24>
 8005120:	f7ff ff12 	bl	8004f48 <_free_r>
 8005124:	4625      	mov	r5, r4
 8005126:	4628      	mov	r0, r5
 8005128:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800512c:	f000 f838 	bl	80051a0 <_malloc_usable_size_r>
 8005130:	4284      	cmp	r4, r0
 8005132:	4607      	mov	r7, r0
 8005134:	d802      	bhi.n	800513c <_realloc_r+0x34>
 8005136:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800513a:	d812      	bhi.n	8005162 <_realloc_r+0x5a>
 800513c:	4621      	mov	r1, r4
 800513e:	4640      	mov	r0, r8
 8005140:	f7ff ff6e 	bl	8005020 <_malloc_r>
 8005144:	4605      	mov	r5, r0
 8005146:	2800      	cmp	r0, #0
 8005148:	d0ed      	beq.n	8005126 <_realloc_r+0x1e>
 800514a:	42bc      	cmp	r4, r7
 800514c:	4622      	mov	r2, r4
 800514e:	4631      	mov	r1, r6
 8005150:	bf28      	it	cs
 8005152:	463a      	movcs	r2, r7
 8005154:	f7ff fed0 	bl	8004ef8 <memcpy>
 8005158:	4631      	mov	r1, r6
 800515a:	4640      	mov	r0, r8
 800515c:	f7ff fef4 	bl	8004f48 <_free_r>
 8005160:	e7e1      	b.n	8005126 <_realloc_r+0x1e>
 8005162:	4635      	mov	r5, r6
 8005164:	e7df      	b.n	8005126 <_realloc_r+0x1e>
	...

08005168 <_sbrk_r>:
 8005168:	b538      	push	{r3, r4, r5, lr}
 800516a:	4d06      	ldr	r5, [pc, #24]	; (8005184 <_sbrk_r+0x1c>)
 800516c:	2300      	movs	r3, #0
 800516e:	4604      	mov	r4, r0
 8005170:	4608      	mov	r0, r1
 8005172:	602b      	str	r3, [r5, #0]
 8005174:	f7fc f9ce 	bl	8001514 <_sbrk>
 8005178:	1c43      	adds	r3, r0, #1
 800517a:	d102      	bne.n	8005182 <_sbrk_r+0x1a>
 800517c:	682b      	ldr	r3, [r5, #0]
 800517e:	b103      	cbz	r3, 8005182 <_sbrk_r+0x1a>
 8005180:	6023      	str	r3, [r4, #0]
 8005182:	bd38      	pop	{r3, r4, r5, pc}
 8005184:	200003f4 	.word	0x200003f4

08005188 <__malloc_lock>:
 8005188:	4801      	ldr	r0, [pc, #4]	; (8005190 <__malloc_lock+0x8>)
 800518a:	f000 b811 	b.w	80051b0 <__retarget_lock_acquire_recursive>
 800518e:	bf00      	nop
 8005190:	200003f8 	.word	0x200003f8

08005194 <__malloc_unlock>:
 8005194:	4801      	ldr	r0, [pc, #4]	; (800519c <__malloc_unlock+0x8>)
 8005196:	f000 b80c 	b.w	80051b2 <__retarget_lock_release_recursive>
 800519a:	bf00      	nop
 800519c:	200003f8 	.word	0x200003f8

080051a0 <_malloc_usable_size_r>:
 80051a0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80051a4:	1f18      	subs	r0, r3, #4
 80051a6:	2b00      	cmp	r3, #0
 80051a8:	bfbc      	itt	lt
 80051aa:	580b      	ldrlt	r3, [r1, r0]
 80051ac:	18c0      	addlt	r0, r0, r3
 80051ae:	4770      	bx	lr

080051b0 <__retarget_lock_acquire_recursive>:
 80051b0:	4770      	bx	lr

080051b2 <__retarget_lock_release_recursive>:
 80051b2:	4770      	bx	lr

080051b4 <_init>:
 80051b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80051b6:	bf00      	nop
 80051b8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80051ba:	bc08      	pop	{r3}
 80051bc:	469e      	mov	lr, r3
 80051be:	4770      	bx	lr

080051c0 <_fini>:
 80051c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80051c2:	bf00      	nop
 80051c4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80051c6:	bc08      	pop	{r3}
 80051c8:	469e      	mov	lr, r3
 80051ca:	4770      	bx	lr
