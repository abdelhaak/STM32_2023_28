
FINAL.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000013c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004348  0800013c  0800013c  0001013c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000098  08004484  08004484  00014484  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800451c  0800451c  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  0800451c  0800451c  0001451c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004524  08004524  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004524  08004524  00014524  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004528  08004528  00014528  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  0800452c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000d0  20000070  0800459c  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000140  0800459c  00020140  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000955c  00000000  00000000  00020099  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001b21  00000000  00000000  000295f5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000970  00000000  00000000  0002b118  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000008d0  00000000  00000000  0002ba88  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001640c  00000000  00000000  0002c358  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000c17c  00000000  00000000  00042764  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000873c8  00000000  00000000  0004e8e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000d5ca8  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002ac0  00000000  00000000  000d5cf8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800013c <__do_global_dtors_aux>:
 800013c:	b510      	push	{r4, lr}
 800013e:	4c05      	ldr	r4, [pc, #20]	; (8000154 <__do_global_dtors_aux+0x18>)
 8000140:	7823      	ldrb	r3, [r4, #0]
 8000142:	b933      	cbnz	r3, 8000152 <__do_global_dtors_aux+0x16>
 8000144:	4b04      	ldr	r3, [pc, #16]	; (8000158 <__do_global_dtors_aux+0x1c>)
 8000146:	b113      	cbz	r3, 800014e <__do_global_dtors_aux+0x12>
 8000148:	4804      	ldr	r0, [pc, #16]	; (800015c <__do_global_dtors_aux+0x20>)
 800014a:	f3af 8000 	nop.w
 800014e:	2301      	movs	r3, #1
 8000150:	7023      	strb	r3, [r4, #0]
 8000152:	bd10      	pop	{r4, pc}
 8000154:	20000070 	.word	0x20000070
 8000158:	00000000 	.word	0x00000000
 800015c:	0800446c 	.word	0x0800446c

08000160 <frame_dummy>:
 8000160:	b508      	push	{r3, lr}
 8000162:	4b03      	ldr	r3, [pc, #12]	; (8000170 <frame_dummy+0x10>)
 8000164:	b11b      	cbz	r3, 800016e <frame_dummy+0xe>
 8000166:	4903      	ldr	r1, [pc, #12]	; (8000174 <frame_dummy+0x14>)
 8000168:	4803      	ldr	r0, [pc, #12]	; (8000178 <frame_dummy+0x18>)
 800016a:	f3af 8000 	nop.w
 800016e:	bd08      	pop	{r3, pc}
 8000170:	00000000 	.word	0x00000000
 8000174:	20000074 	.word	0x20000074
 8000178:	0800446c 	.word	0x0800446c

0800017c <strlen>:
 800017c:	4603      	mov	r3, r0
 800017e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000182:	2a00      	cmp	r2, #0
 8000184:	d1fb      	bne.n	800017e <strlen+0x2>
 8000186:	1a18      	subs	r0, r3, r0
 8000188:	3801      	subs	r0, #1
 800018a:	4770      	bx	lr

0800018c <__aeabi_frsub>:
 800018c:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000190:	e002      	b.n	8000198 <__addsf3>
 8000192:	bf00      	nop

08000194 <__aeabi_fsub>:
 8000194:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000198 <__addsf3>:
 8000198:	0042      	lsls	r2, r0, #1
 800019a:	bf1f      	itttt	ne
 800019c:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 80001a0:	ea92 0f03 	teqne	r2, r3
 80001a4:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 80001a8:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 80001ac:	d06a      	beq.n	8000284 <__addsf3+0xec>
 80001ae:	ea4f 6212 	mov.w	r2, r2, lsr #24
 80001b2:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 80001b6:	bfc1      	itttt	gt
 80001b8:	18d2      	addgt	r2, r2, r3
 80001ba:	4041      	eorgt	r1, r0
 80001bc:	4048      	eorgt	r0, r1
 80001be:	4041      	eorgt	r1, r0
 80001c0:	bfb8      	it	lt
 80001c2:	425b      	neglt	r3, r3
 80001c4:	2b19      	cmp	r3, #25
 80001c6:	bf88      	it	hi
 80001c8:	4770      	bxhi	lr
 80001ca:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 80001ce:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80001d2:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 80001d6:	bf18      	it	ne
 80001d8:	4240      	negne	r0, r0
 80001da:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001de:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 80001e2:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 80001e6:	bf18      	it	ne
 80001e8:	4249      	negne	r1, r1
 80001ea:	ea92 0f03 	teq	r2, r3
 80001ee:	d03f      	beq.n	8000270 <__addsf3+0xd8>
 80001f0:	f1a2 0201 	sub.w	r2, r2, #1
 80001f4:	fa41 fc03 	asr.w	ip, r1, r3
 80001f8:	eb10 000c 	adds.w	r0, r0, ip
 80001fc:	f1c3 0320 	rsb	r3, r3, #32
 8000200:	fa01 f103 	lsl.w	r1, r1, r3
 8000204:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000208:	d502      	bpl.n	8000210 <__addsf3+0x78>
 800020a:	4249      	negs	r1, r1
 800020c:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000210:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000214:	d313      	bcc.n	800023e <__addsf3+0xa6>
 8000216:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 800021a:	d306      	bcc.n	800022a <__addsf3+0x92>
 800021c:	0840      	lsrs	r0, r0, #1
 800021e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000222:	f102 0201 	add.w	r2, r2, #1
 8000226:	2afe      	cmp	r2, #254	; 0xfe
 8000228:	d251      	bcs.n	80002ce <__addsf3+0x136>
 800022a:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 800022e:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000232:	bf08      	it	eq
 8000234:	f020 0001 	biceq.w	r0, r0, #1
 8000238:	ea40 0003 	orr.w	r0, r0, r3
 800023c:	4770      	bx	lr
 800023e:	0049      	lsls	r1, r1, #1
 8000240:	eb40 0000 	adc.w	r0, r0, r0
 8000244:	3a01      	subs	r2, #1
 8000246:	bf28      	it	cs
 8000248:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 800024c:	d2ed      	bcs.n	800022a <__addsf3+0x92>
 800024e:	fab0 fc80 	clz	ip, r0
 8000252:	f1ac 0c08 	sub.w	ip, ip, #8
 8000256:	ebb2 020c 	subs.w	r2, r2, ip
 800025a:	fa00 f00c 	lsl.w	r0, r0, ip
 800025e:	bfaa      	itet	ge
 8000260:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000264:	4252      	neglt	r2, r2
 8000266:	4318      	orrge	r0, r3
 8000268:	bfbc      	itt	lt
 800026a:	40d0      	lsrlt	r0, r2
 800026c:	4318      	orrlt	r0, r3
 800026e:	4770      	bx	lr
 8000270:	f092 0f00 	teq	r2, #0
 8000274:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000278:	bf06      	itte	eq
 800027a:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 800027e:	3201      	addeq	r2, #1
 8000280:	3b01      	subne	r3, #1
 8000282:	e7b5      	b.n	80001f0 <__addsf3+0x58>
 8000284:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000288:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 800028c:	bf18      	it	ne
 800028e:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000292:	d021      	beq.n	80002d8 <__addsf3+0x140>
 8000294:	ea92 0f03 	teq	r2, r3
 8000298:	d004      	beq.n	80002a4 <__addsf3+0x10c>
 800029a:	f092 0f00 	teq	r2, #0
 800029e:	bf08      	it	eq
 80002a0:	4608      	moveq	r0, r1
 80002a2:	4770      	bx	lr
 80002a4:	ea90 0f01 	teq	r0, r1
 80002a8:	bf1c      	itt	ne
 80002aa:	2000      	movne	r0, #0
 80002ac:	4770      	bxne	lr
 80002ae:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 80002b2:	d104      	bne.n	80002be <__addsf3+0x126>
 80002b4:	0040      	lsls	r0, r0, #1
 80002b6:	bf28      	it	cs
 80002b8:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 80002bc:	4770      	bx	lr
 80002be:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 80002c2:	bf3c      	itt	cc
 80002c4:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 80002c8:	4770      	bxcc	lr
 80002ca:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 80002ce:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 80002d2:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80002d6:	4770      	bx	lr
 80002d8:	ea7f 6222 	mvns.w	r2, r2, asr #24
 80002dc:	bf16      	itet	ne
 80002de:	4608      	movne	r0, r1
 80002e0:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 80002e4:	4601      	movne	r1, r0
 80002e6:	0242      	lsls	r2, r0, #9
 80002e8:	bf06      	itte	eq
 80002ea:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 80002ee:	ea90 0f01 	teqeq	r0, r1
 80002f2:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 80002f6:	4770      	bx	lr

080002f8 <__aeabi_ui2f>:
 80002f8:	f04f 0300 	mov.w	r3, #0
 80002fc:	e004      	b.n	8000308 <__aeabi_i2f+0x8>
 80002fe:	bf00      	nop

08000300 <__aeabi_i2f>:
 8000300:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000304:	bf48      	it	mi
 8000306:	4240      	negmi	r0, r0
 8000308:	ea5f 0c00 	movs.w	ip, r0
 800030c:	bf08      	it	eq
 800030e:	4770      	bxeq	lr
 8000310:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000314:	4601      	mov	r1, r0
 8000316:	f04f 0000 	mov.w	r0, #0
 800031a:	e01c      	b.n	8000356 <__aeabi_l2f+0x2a>

0800031c <__aeabi_ul2f>:
 800031c:	ea50 0201 	orrs.w	r2, r0, r1
 8000320:	bf08      	it	eq
 8000322:	4770      	bxeq	lr
 8000324:	f04f 0300 	mov.w	r3, #0
 8000328:	e00a      	b.n	8000340 <__aeabi_l2f+0x14>
 800032a:	bf00      	nop

0800032c <__aeabi_l2f>:
 800032c:	ea50 0201 	orrs.w	r2, r0, r1
 8000330:	bf08      	it	eq
 8000332:	4770      	bxeq	lr
 8000334:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000338:	d502      	bpl.n	8000340 <__aeabi_l2f+0x14>
 800033a:	4240      	negs	r0, r0
 800033c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000340:	ea5f 0c01 	movs.w	ip, r1
 8000344:	bf02      	ittt	eq
 8000346:	4684      	moveq	ip, r0
 8000348:	4601      	moveq	r1, r0
 800034a:	2000      	moveq	r0, #0
 800034c:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000350:	bf08      	it	eq
 8000352:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000356:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 800035a:	fabc f28c 	clz	r2, ip
 800035e:	3a08      	subs	r2, #8
 8000360:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000364:	db10      	blt.n	8000388 <__aeabi_l2f+0x5c>
 8000366:	fa01 fc02 	lsl.w	ip, r1, r2
 800036a:	4463      	add	r3, ip
 800036c:	fa00 fc02 	lsl.w	ip, r0, r2
 8000370:	f1c2 0220 	rsb	r2, r2, #32
 8000374:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000378:	fa20 f202 	lsr.w	r2, r0, r2
 800037c:	eb43 0002 	adc.w	r0, r3, r2
 8000380:	bf08      	it	eq
 8000382:	f020 0001 	biceq.w	r0, r0, #1
 8000386:	4770      	bx	lr
 8000388:	f102 0220 	add.w	r2, r2, #32
 800038c:	fa01 fc02 	lsl.w	ip, r1, r2
 8000390:	f1c2 0220 	rsb	r2, r2, #32
 8000394:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000398:	fa21 f202 	lsr.w	r2, r1, r2
 800039c:	eb43 0002 	adc.w	r0, r3, r2
 80003a0:	bf08      	it	eq
 80003a2:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 80003a6:	4770      	bx	lr

080003a8 <__aeabi_fmul>:
 80003a8:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80003ac:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 80003b0:	bf1e      	ittt	ne
 80003b2:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 80003b6:	ea92 0f0c 	teqne	r2, ip
 80003ba:	ea93 0f0c 	teqne	r3, ip
 80003be:	d06f      	beq.n	80004a0 <__aeabi_fmul+0xf8>
 80003c0:	441a      	add	r2, r3
 80003c2:	ea80 0c01 	eor.w	ip, r0, r1
 80003c6:	0240      	lsls	r0, r0, #9
 80003c8:	bf18      	it	ne
 80003ca:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 80003ce:	d01e      	beq.n	800040e <__aeabi_fmul+0x66>
 80003d0:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80003d4:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 80003d8:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 80003dc:	fba0 3101 	umull	r3, r1, r0, r1
 80003e0:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 80003e4:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 80003e8:	bf3e      	ittt	cc
 80003ea:	0049      	lslcc	r1, r1, #1
 80003ec:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 80003f0:	005b      	lslcc	r3, r3, #1
 80003f2:	ea40 0001 	orr.w	r0, r0, r1
 80003f6:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 80003fa:	2afd      	cmp	r2, #253	; 0xfd
 80003fc:	d81d      	bhi.n	800043a <__aeabi_fmul+0x92>
 80003fe:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000402:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000406:	bf08      	it	eq
 8000408:	f020 0001 	biceq.w	r0, r0, #1
 800040c:	4770      	bx	lr
 800040e:	f090 0f00 	teq	r0, #0
 8000412:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000416:	bf08      	it	eq
 8000418:	0249      	lsleq	r1, r1, #9
 800041a:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 800041e:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000422:	3a7f      	subs	r2, #127	; 0x7f
 8000424:	bfc2      	ittt	gt
 8000426:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 800042a:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 800042e:	4770      	bxgt	lr
 8000430:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000434:	f04f 0300 	mov.w	r3, #0
 8000438:	3a01      	subs	r2, #1
 800043a:	dc5d      	bgt.n	80004f8 <__aeabi_fmul+0x150>
 800043c:	f112 0f19 	cmn.w	r2, #25
 8000440:	bfdc      	itt	le
 8000442:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000446:	4770      	bxle	lr
 8000448:	f1c2 0200 	rsb	r2, r2, #0
 800044c:	0041      	lsls	r1, r0, #1
 800044e:	fa21 f102 	lsr.w	r1, r1, r2
 8000452:	f1c2 0220 	rsb	r2, r2, #32
 8000456:	fa00 fc02 	lsl.w	ip, r0, r2
 800045a:	ea5f 0031 	movs.w	r0, r1, rrx
 800045e:	f140 0000 	adc.w	r0, r0, #0
 8000462:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000466:	bf08      	it	eq
 8000468:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 800046c:	4770      	bx	lr
 800046e:	f092 0f00 	teq	r2, #0
 8000472:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000476:	bf02      	ittt	eq
 8000478:	0040      	lsleq	r0, r0, #1
 800047a:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 800047e:	3a01      	subeq	r2, #1
 8000480:	d0f9      	beq.n	8000476 <__aeabi_fmul+0xce>
 8000482:	ea40 000c 	orr.w	r0, r0, ip
 8000486:	f093 0f00 	teq	r3, #0
 800048a:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 800048e:	bf02      	ittt	eq
 8000490:	0049      	lsleq	r1, r1, #1
 8000492:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000496:	3b01      	subeq	r3, #1
 8000498:	d0f9      	beq.n	800048e <__aeabi_fmul+0xe6>
 800049a:	ea41 010c 	orr.w	r1, r1, ip
 800049e:	e78f      	b.n	80003c0 <__aeabi_fmul+0x18>
 80004a0:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 80004a4:	ea92 0f0c 	teq	r2, ip
 80004a8:	bf18      	it	ne
 80004aa:	ea93 0f0c 	teqne	r3, ip
 80004ae:	d00a      	beq.n	80004c6 <__aeabi_fmul+0x11e>
 80004b0:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 80004b4:	bf18      	it	ne
 80004b6:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 80004ba:	d1d8      	bne.n	800046e <__aeabi_fmul+0xc6>
 80004bc:	ea80 0001 	eor.w	r0, r0, r1
 80004c0:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 80004c4:	4770      	bx	lr
 80004c6:	f090 0f00 	teq	r0, #0
 80004ca:	bf17      	itett	ne
 80004cc:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 80004d0:	4608      	moveq	r0, r1
 80004d2:	f091 0f00 	teqne	r1, #0
 80004d6:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 80004da:	d014      	beq.n	8000506 <__aeabi_fmul+0x15e>
 80004dc:	ea92 0f0c 	teq	r2, ip
 80004e0:	d101      	bne.n	80004e6 <__aeabi_fmul+0x13e>
 80004e2:	0242      	lsls	r2, r0, #9
 80004e4:	d10f      	bne.n	8000506 <__aeabi_fmul+0x15e>
 80004e6:	ea93 0f0c 	teq	r3, ip
 80004ea:	d103      	bne.n	80004f4 <__aeabi_fmul+0x14c>
 80004ec:	024b      	lsls	r3, r1, #9
 80004ee:	bf18      	it	ne
 80004f0:	4608      	movne	r0, r1
 80004f2:	d108      	bne.n	8000506 <__aeabi_fmul+0x15e>
 80004f4:	ea80 0001 	eor.w	r0, r0, r1
 80004f8:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 80004fc:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000500:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000504:	4770      	bx	lr
 8000506:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 800050a:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 800050e:	4770      	bx	lr

08000510 <__aeabi_fdiv>:
 8000510:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000514:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000518:	bf1e      	ittt	ne
 800051a:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 800051e:	ea92 0f0c 	teqne	r2, ip
 8000522:	ea93 0f0c 	teqne	r3, ip
 8000526:	d069      	beq.n	80005fc <__aeabi_fdiv+0xec>
 8000528:	eba2 0203 	sub.w	r2, r2, r3
 800052c:	ea80 0c01 	eor.w	ip, r0, r1
 8000530:	0249      	lsls	r1, r1, #9
 8000532:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000536:	d037      	beq.n	80005a8 <__aeabi_fdiv+0x98>
 8000538:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800053c:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000540:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000544:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000548:	428b      	cmp	r3, r1
 800054a:	bf38      	it	cc
 800054c:	005b      	lslcc	r3, r3, #1
 800054e:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000552:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000556:	428b      	cmp	r3, r1
 8000558:	bf24      	itt	cs
 800055a:	1a5b      	subcs	r3, r3, r1
 800055c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000560:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000564:	bf24      	itt	cs
 8000566:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 800056a:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 800056e:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000572:	bf24      	itt	cs
 8000574:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000578:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 800057c:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000580:	bf24      	itt	cs
 8000582:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000586:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 800058a:	011b      	lsls	r3, r3, #4
 800058c:	bf18      	it	ne
 800058e:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000592:	d1e0      	bne.n	8000556 <__aeabi_fdiv+0x46>
 8000594:	2afd      	cmp	r2, #253	; 0xfd
 8000596:	f63f af50 	bhi.w	800043a <__aeabi_fmul+0x92>
 800059a:	428b      	cmp	r3, r1
 800059c:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80005a0:	bf08      	it	eq
 80005a2:	f020 0001 	biceq.w	r0, r0, #1
 80005a6:	4770      	bx	lr
 80005a8:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 80005ac:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 80005b0:	327f      	adds	r2, #127	; 0x7f
 80005b2:	bfc2      	ittt	gt
 80005b4:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 80005b8:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 80005bc:	4770      	bxgt	lr
 80005be:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80005c2:	f04f 0300 	mov.w	r3, #0
 80005c6:	3a01      	subs	r2, #1
 80005c8:	e737      	b.n	800043a <__aeabi_fmul+0x92>
 80005ca:	f092 0f00 	teq	r2, #0
 80005ce:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 80005d2:	bf02      	ittt	eq
 80005d4:	0040      	lsleq	r0, r0, #1
 80005d6:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 80005da:	3a01      	subeq	r2, #1
 80005dc:	d0f9      	beq.n	80005d2 <__aeabi_fdiv+0xc2>
 80005de:	ea40 000c 	orr.w	r0, r0, ip
 80005e2:	f093 0f00 	teq	r3, #0
 80005e6:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 80005ea:	bf02      	ittt	eq
 80005ec:	0049      	lsleq	r1, r1, #1
 80005ee:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 80005f2:	3b01      	subeq	r3, #1
 80005f4:	d0f9      	beq.n	80005ea <__aeabi_fdiv+0xda>
 80005f6:	ea41 010c 	orr.w	r1, r1, ip
 80005fa:	e795      	b.n	8000528 <__aeabi_fdiv+0x18>
 80005fc:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000600:	ea92 0f0c 	teq	r2, ip
 8000604:	d108      	bne.n	8000618 <__aeabi_fdiv+0x108>
 8000606:	0242      	lsls	r2, r0, #9
 8000608:	f47f af7d 	bne.w	8000506 <__aeabi_fmul+0x15e>
 800060c:	ea93 0f0c 	teq	r3, ip
 8000610:	f47f af70 	bne.w	80004f4 <__aeabi_fmul+0x14c>
 8000614:	4608      	mov	r0, r1
 8000616:	e776      	b.n	8000506 <__aeabi_fmul+0x15e>
 8000618:	ea93 0f0c 	teq	r3, ip
 800061c:	d104      	bne.n	8000628 <__aeabi_fdiv+0x118>
 800061e:	024b      	lsls	r3, r1, #9
 8000620:	f43f af4c 	beq.w	80004bc <__aeabi_fmul+0x114>
 8000624:	4608      	mov	r0, r1
 8000626:	e76e      	b.n	8000506 <__aeabi_fmul+0x15e>
 8000628:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 800062c:	bf18      	it	ne
 800062e:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000632:	d1ca      	bne.n	80005ca <__aeabi_fdiv+0xba>
 8000634:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8000638:	f47f af5c 	bne.w	80004f4 <__aeabi_fmul+0x14c>
 800063c:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8000640:	f47f af3c 	bne.w	80004bc <__aeabi_fmul+0x114>
 8000644:	e75f      	b.n	8000506 <__aeabi_fmul+0x15e>
 8000646:	bf00      	nop

08000648 <__aeabi_f2iz>:
 8000648:	ea4f 0240 	mov.w	r2, r0, lsl #1
 800064c:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8000650:	d30f      	bcc.n	8000672 <__aeabi_f2iz+0x2a>
 8000652:	f04f 039e 	mov.w	r3, #158	; 0x9e
 8000656:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 800065a:	d90d      	bls.n	8000678 <__aeabi_f2iz+0x30>
 800065c:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8000660:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000664:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000668:	fa23 f002 	lsr.w	r0, r3, r2
 800066c:	bf18      	it	ne
 800066e:	4240      	negne	r0, r0
 8000670:	4770      	bx	lr
 8000672:	f04f 0000 	mov.w	r0, #0
 8000676:	4770      	bx	lr
 8000678:	f112 0f61 	cmn.w	r2, #97	; 0x61
 800067c:	d101      	bne.n	8000682 <__aeabi_f2iz+0x3a>
 800067e:	0242      	lsls	r2, r0, #9
 8000680:	d105      	bne.n	800068e <__aeabi_f2iz+0x46>
 8000682:	f010 4000 	ands.w	r0, r0, #2147483648	; 0x80000000
 8000686:	bf08      	it	eq
 8000688:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 800068c:	4770      	bx	lr
 800068e:	f04f 0000 	mov.w	r0, #0
 8000692:	4770      	bx	lr

08000694 <__aeabi_f2uiz>:
 8000694:	0042      	lsls	r2, r0, #1
 8000696:	d20e      	bcs.n	80006b6 <__aeabi_f2uiz+0x22>
 8000698:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 800069c:	d30b      	bcc.n	80006b6 <__aeabi_f2uiz+0x22>
 800069e:	f04f 039e 	mov.w	r3, #158	; 0x9e
 80006a2:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 80006a6:	d409      	bmi.n	80006bc <__aeabi_f2uiz+0x28>
 80006a8:	ea4f 2300 	mov.w	r3, r0, lsl #8
 80006ac:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80006b0:	fa23 f002 	lsr.w	r0, r3, r2
 80006b4:	4770      	bx	lr
 80006b6:	f04f 0000 	mov.w	r0, #0
 80006ba:	4770      	bx	lr
 80006bc:	f112 0f61 	cmn.w	r2, #97	; 0x61
 80006c0:	d101      	bne.n	80006c6 <__aeabi_f2uiz+0x32>
 80006c2:	0242      	lsls	r2, r0, #9
 80006c4:	d102      	bne.n	80006cc <__aeabi_f2uiz+0x38>
 80006c6:	f04f 30ff 	mov.w	r0, #4294967295
 80006ca:	4770      	bx	lr
 80006cc:	f04f 0000 	mov.w	r0, #0
 80006d0:	4770      	bx	lr
 80006d2:	bf00      	nop

080006d4 <__aeabi_uldivmod>:
 80006d4:	b953      	cbnz	r3, 80006ec <__aeabi_uldivmod+0x18>
 80006d6:	b94a      	cbnz	r2, 80006ec <__aeabi_uldivmod+0x18>
 80006d8:	2900      	cmp	r1, #0
 80006da:	bf08      	it	eq
 80006dc:	2800      	cmpeq	r0, #0
 80006de:	bf1c      	itt	ne
 80006e0:	f04f 31ff 	movne.w	r1, #4294967295
 80006e4:	f04f 30ff 	movne.w	r0, #4294967295
 80006e8:	f000 b976 	b.w	80009d8 <__aeabi_idiv0>
 80006ec:	f1ad 0c08 	sub.w	ip, sp, #8
 80006f0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80006f4:	f000 f806 	bl	8000704 <__udivmoddi4>
 80006f8:	f8dd e004 	ldr.w	lr, [sp, #4]
 80006fc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000700:	b004      	add	sp, #16
 8000702:	4770      	bx	lr

08000704 <__udivmoddi4>:
 8000704:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000708:	9e08      	ldr	r6, [sp, #32]
 800070a:	460d      	mov	r5, r1
 800070c:	4604      	mov	r4, r0
 800070e:	4688      	mov	r8, r1
 8000710:	2b00      	cmp	r3, #0
 8000712:	d14d      	bne.n	80007b0 <__udivmoddi4+0xac>
 8000714:	428a      	cmp	r2, r1
 8000716:	4694      	mov	ip, r2
 8000718:	d968      	bls.n	80007ec <__udivmoddi4+0xe8>
 800071a:	fab2 f282 	clz	r2, r2
 800071e:	b152      	cbz	r2, 8000736 <__udivmoddi4+0x32>
 8000720:	fa01 f302 	lsl.w	r3, r1, r2
 8000724:	f1c2 0120 	rsb	r1, r2, #32
 8000728:	fa20 f101 	lsr.w	r1, r0, r1
 800072c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000730:	ea41 0803 	orr.w	r8, r1, r3
 8000734:	4094      	lsls	r4, r2
 8000736:	ea4f 411c 	mov.w	r1, ip, lsr #16
 800073a:	fbb8 f7f1 	udiv	r7, r8, r1
 800073e:	fa1f fe8c 	uxth.w	lr, ip
 8000742:	fb01 8817 	mls	r8, r1, r7, r8
 8000746:	fb07 f00e 	mul.w	r0, r7, lr
 800074a:	0c23      	lsrs	r3, r4, #16
 800074c:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000750:	4298      	cmp	r0, r3
 8000752:	d90a      	bls.n	800076a <__udivmoddi4+0x66>
 8000754:	eb1c 0303 	adds.w	r3, ip, r3
 8000758:	f107 35ff 	add.w	r5, r7, #4294967295
 800075c:	f080 811e 	bcs.w	800099c <__udivmoddi4+0x298>
 8000760:	4298      	cmp	r0, r3
 8000762:	f240 811b 	bls.w	800099c <__udivmoddi4+0x298>
 8000766:	3f02      	subs	r7, #2
 8000768:	4463      	add	r3, ip
 800076a:	1a1b      	subs	r3, r3, r0
 800076c:	fbb3 f0f1 	udiv	r0, r3, r1
 8000770:	fb01 3310 	mls	r3, r1, r0, r3
 8000774:	fb00 fe0e 	mul.w	lr, r0, lr
 8000778:	b2a4      	uxth	r4, r4
 800077a:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800077e:	45a6      	cmp	lr, r4
 8000780:	d90a      	bls.n	8000798 <__udivmoddi4+0x94>
 8000782:	eb1c 0404 	adds.w	r4, ip, r4
 8000786:	f100 33ff 	add.w	r3, r0, #4294967295
 800078a:	f080 8109 	bcs.w	80009a0 <__udivmoddi4+0x29c>
 800078e:	45a6      	cmp	lr, r4
 8000790:	f240 8106 	bls.w	80009a0 <__udivmoddi4+0x29c>
 8000794:	4464      	add	r4, ip
 8000796:	3802      	subs	r0, #2
 8000798:	2100      	movs	r1, #0
 800079a:	eba4 040e 	sub.w	r4, r4, lr
 800079e:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 80007a2:	b11e      	cbz	r6, 80007ac <__udivmoddi4+0xa8>
 80007a4:	2300      	movs	r3, #0
 80007a6:	40d4      	lsrs	r4, r2
 80007a8:	e9c6 4300 	strd	r4, r3, [r6]
 80007ac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80007b0:	428b      	cmp	r3, r1
 80007b2:	d908      	bls.n	80007c6 <__udivmoddi4+0xc2>
 80007b4:	2e00      	cmp	r6, #0
 80007b6:	f000 80ee 	beq.w	8000996 <__udivmoddi4+0x292>
 80007ba:	2100      	movs	r1, #0
 80007bc:	e9c6 0500 	strd	r0, r5, [r6]
 80007c0:	4608      	mov	r0, r1
 80007c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80007c6:	fab3 f183 	clz	r1, r3
 80007ca:	2900      	cmp	r1, #0
 80007cc:	d14a      	bne.n	8000864 <__udivmoddi4+0x160>
 80007ce:	42ab      	cmp	r3, r5
 80007d0:	d302      	bcc.n	80007d8 <__udivmoddi4+0xd4>
 80007d2:	4282      	cmp	r2, r0
 80007d4:	f200 80fc 	bhi.w	80009d0 <__udivmoddi4+0x2cc>
 80007d8:	1a84      	subs	r4, r0, r2
 80007da:	eb65 0303 	sbc.w	r3, r5, r3
 80007de:	2001      	movs	r0, #1
 80007e0:	4698      	mov	r8, r3
 80007e2:	2e00      	cmp	r6, #0
 80007e4:	d0e2      	beq.n	80007ac <__udivmoddi4+0xa8>
 80007e6:	e9c6 4800 	strd	r4, r8, [r6]
 80007ea:	e7df      	b.n	80007ac <__udivmoddi4+0xa8>
 80007ec:	b902      	cbnz	r2, 80007f0 <__udivmoddi4+0xec>
 80007ee:	deff      	udf	#255	; 0xff
 80007f0:	fab2 f282 	clz	r2, r2
 80007f4:	2a00      	cmp	r2, #0
 80007f6:	f040 8091 	bne.w	800091c <__udivmoddi4+0x218>
 80007fa:	eba1 000c 	sub.w	r0, r1, ip
 80007fe:	2101      	movs	r1, #1
 8000800:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000804:	fa1f fe8c 	uxth.w	lr, ip
 8000808:	fbb0 f3f7 	udiv	r3, r0, r7
 800080c:	fb07 0013 	mls	r0, r7, r3, r0
 8000810:	0c25      	lsrs	r5, r4, #16
 8000812:	ea45 4500 	orr.w	r5, r5, r0, lsl #16
 8000816:	fb0e f003 	mul.w	r0, lr, r3
 800081a:	42a8      	cmp	r0, r5
 800081c:	d908      	bls.n	8000830 <__udivmoddi4+0x12c>
 800081e:	eb1c 0505 	adds.w	r5, ip, r5
 8000822:	f103 38ff 	add.w	r8, r3, #4294967295
 8000826:	d202      	bcs.n	800082e <__udivmoddi4+0x12a>
 8000828:	42a8      	cmp	r0, r5
 800082a:	f200 80ce 	bhi.w	80009ca <__udivmoddi4+0x2c6>
 800082e:	4643      	mov	r3, r8
 8000830:	1a2d      	subs	r5, r5, r0
 8000832:	fbb5 f0f7 	udiv	r0, r5, r7
 8000836:	fb07 5510 	mls	r5, r7, r0, r5
 800083a:	fb0e fe00 	mul.w	lr, lr, r0
 800083e:	b2a4      	uxth	r4, r4
 8000840:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000844:	45a6      	cmp	lr, r4
 8000846:	d908      	bls.n	800085a <__udivmoddi4+0x156>
 8000848:	eb1c 0404 	adds.w	r4, ip, r4
 800084c:	f100 35ff 	add.w	r5, r0, #4294967295
 8000850:	d202      	bcs.n	8000858 <__udivmoddi4+0x154>
 8000852:	45a6      	cmp	lr, r4
 8000854:	f200 80b6 	bhi.w	80009c4 <__udivmoddi4+0x2c0>
 8000858:	4628      	mov	r0, r5
 800085a:	eba4 040e 	sub.w	r4, r4, lr
 800085e:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000862:	e79e      	b.n	80007a2 <__udivmoddi4+0x9e>
 8000864:	f1c1 0720 	rsb	r7, r1, #32
 8000868:	408b      	lsls	r3, r1
 800086a:	fa22 fc07 	lsr.w	ip, r2, r7
 800086e:	ea4c 0c03 	orr.w	ip, ip, r3
 8000872:	fa25 fa07 	lsr.w	sl, r5, r7
 8000876:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800087a:	fbba f8f9 	udiv	r8, sl, r9
 800087e:	fa20 f307 	lsr.w	r3, r0, r7
 8000882:	fb09 aa18 	mls	sl, r9, r8, sl
 8000886:	408d      	lsls	r5, r1
 8000888:	fa1f fe8c 	uxth.w	lr, ip
 800088c:	431d      	orrs	r5, r3
 800088e:	fa00 f301 	lsl.w	r3, r0, r1
 8000892:	fb08 f00e 	mul.w	r0, r8, lr
 8000896:	0c2c      	lsrs	r4, r5, #16
 8000898:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 800089c:	42a0      	cmp	r0, r4
 800089e:	fa02 f201 	lsl.w	r2, r2, r1
 80008a2:	d90b      	bls.n	80008bc <__udivmoddi4+0x1b8>
 80008a4:	eb1c 0404 	adds.w	r4, ip, r4
 80008a8:	f108 3aff 	add.w	sl, r8, #4294967295
 80008ac:	f080 8088 	bcs.w	80009c0 <__udivmoddi4+0x2bc>
 80008b0:	42a0      	cmp	r0, r4
 80008b2:	f240 8085 	bls.w	80009c0 <__udivmoddi4+0x2bc>
 80008b6:	f1a8 0802 	sub.w	r8, r8, #2
 80008ba:	4464      	add	r4, ip
 80008bc:	1a24      	subs	r4, r4, r0
 80008be:	fbb4 f0f9 	udiv	r0, r4, r9
 80008c2:	fb09 4410 	mls	r4, r9, r0, r4
 80008c6:	fb00 fe0e 	mul.w	lr, r0, lr
 80008ca:	b2ad      	uxth	r5, r5
 80008cc:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80008d0:	45a6      	cmp	lr, r4
 80008d2:	d908      	bls.n	80008e6 <__udivmoddi4+0x1e2>
 80008d4:	eb1c 0404 	adds.w	r4, ip, r4
 80008d8:	f100 35ff 	add.w	r5, r0, #4294967295
 80008dc:	d26c      	bcs.n	80009b8 <__udivmoddi4+0x2b4>
 80008de:	45a6      	cmp	lr, r4
 80008e0:	d96a      	bls.n	80009b8 <__udivmoddi4+0x2b4>
 80008e2:	3802      	subs	r0, #2
 80008e4:	4464      	add	r4, ip
 80008e6:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80008ea:	fba0 9502 	umull	r9, r5, r0, r2
 80008ee:	eba4 040e 	sub.w	r4, r4, lr
 80008f2:	42ac      	cmp	r4, r5
 80008f4:	46c8      	mov	r8, r9
 80008f6:	46ae      	mov	lr, r5
 80008f8:	d356      	bcc.n	80009a8 <__udivmoddi4+0x2a4>
 80008fa:	d053      	beq.n	80009a4 <__udivmoddi4+0x2a0>
 80008fc:	2e00      	cmp	r6, #0
 80008fe:	d069      	beq.n	80009d4 <__udivmoddi4+0x2d0>
 8000900:	ebb3 0208 	subs.w	r2, r3, r8
 8000904:	eb64 040e 	sbc.w	r4, r4, lr
 8000908:	fa22 f301 	lsr.w	r3, r2, r1
 800090c:	fa04 f707 	lsl.w	r7, r4, r7
 8000910:	431f      	orrs	r7, r3
 8000912:	40cc      	lsrs	r4, r1
 8000914:	e9c6 7400 	strd	r7, r4, [r6]
 8000918:	2100      	movs	r1, #0
 800091a:	e747      	b.n	80007ac <__udivmoddi4+0xa8>
 800091c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000920:	f1c2 0120 	rsb	r1, r2, #32
 8000924:	fa25 f301 	lsr.w	r3, r5, r1
 8000928:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800092c:	fa20 f101 	lsr.w	r1, r0, r1
 8000930:	4095      	lsls	r5, r2
 8000932:	430d      	orrs	r5, r1
 8000934:	fbb3 f1f7 	udiv	r1, r3, r7
 8000938:	fb07 3311 	mls	r3, r7, r1, r3
 800093c:	fa1f fe8c 	uxth.w	lr, ip
 8000940:	0c28      	lsrs	r0, r5, #16
 8000942:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000946:	fb01 f30e 	mul.w	r3, r1, lr
 800094a:	4283      	cmp	r3, r0
 800094c:	fa04 f402 	lsl.w	r4, r4, r2
 8000950:	d908      	bls.n	8000964 <__udivmoddi4+0x260>
 8000952:	eb1c 0000 	adds.w	r0, ip, r0
 8000956:	f101 38ff 	add.w	r8, r1, #4294967295
 800095a:	d22f      	bcs.n	80009bc <__udivmoddi4+0x2b8>
 800095c:	4283      	cmp	r3, r0
 800095e:	d92d      	bls.n	80009bc <__udivmoddi4+0x2b8>
 8000960:	3902      	subs	r1, #2
 8000962:	4460      	add	r0, ip
 8000964:	1ac0      	subs	r0, r0, r3
 8000966:	fbb0 f3f7 	udiv	r3, r0, r7
 800096a:	fb07 0013 	mls	r0, r7, r3, r0
 800096e:	b2ad      	uxth	r5, r5
 8000970:	ea45 4500 	orr.w	r5, r5, r0, lsl #16
 8000974:	fb03 f00e 	mul.w	r0, r3, lr
 8000978:	42a8      	cmp	r0, r5
 800097a:	d908      	bls.n	800098e <__udivmoddi4+0x28a>
 800097c:	eb1c 0505 	adds.w	r5, ip, r5
 8000980:	f103 38ff 	add.w	r8, r3, #4294967295
 8000984:	d216      	bcs.n	80009b4 <__udivmoddi4+0x2b0>
 8000986:	42a8      	cmp	r0, r5
 8000988:	d914      	bls.n	80009b4 <__udivmoddi4+0x2b0>
 800098a:	3b02      	subs	r3, #2
 800098c:	4465      	add	r5, ip
 800098e:	1a28      	subs	r0, r5, r0
 8000990:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000994:	e738      	b.n	8000808 <__udivmoddi4+0x104>
 8000996:	4631      	mov	r1, r6
 8000998:	4630      	mov	r0, r6
 800099a:	e707      	b.n	80007ac <__udivmoddi4+0xa8>
 800099c:	462f      	mov	r7, r5
 800099e:	e6e4      	b.n	800076a <__udivmoddi4+0x66>
 80009a0:	4618      	mov	r0, r3
 80009a2:	e6f9      	b.n	8000798 <__udivmoddi4+0x94>
 80009a4:	454b      	cmp	r3, r9
 80009a6:	d2a9      	bcs.n	80008fc <__udivmoddi4+0x1f8>
 80009a8:	ebb9 0802 	subs.w	r8, r9, r2
 80009ac:	eb65 0e0c 	sbc.w	lr, r5, ip
 80009b0:	3801      	subs	r0, #1
 80009b2:	e7a3      	b.n	80008fc <__udivmoddi4+0x1f8>
 80009b4:	4643      	mov	r3, r8
 80009b6:	e7ea      	b.n	800098e <__udivmoddi4+0x28a>
 80009b8:	4628      	mov	r0, r5
 80009ba:	e794      	b.n	80008e6 <__udivmoddi4+0x1e2>
 80009bc:	4641      	mov	r1, r8
 80009be:	e7d1      	b.n	8000964 <__udivmoddi4+0x260>
 80009c0:	46d0      	mov	r8, sl
 80009c2:	e77b      	b.n	80008bc <__udivmoddi4+0x1b8>
 80009c4:	4464      	add	r4, ip
 80009c6:	3802      	subs	r0, #2
 80009c8:	e747      	b.n	800085a <__udivmoddi4+0x156>
 80009ca:	3b02      	subs	r3, #2
 80009cc:	4465      	add	r5, ip
 80009ce:	e72f      	b.n	8000830 <__udivmoddi4+0x12c>
 80009d0:	4608      	mov	r0, r1
 80009d2:	e706      	b.n	80007e2 <__udivmoddi4+0xde>
 80009d4:	4631      	mov	r1, r6
 80009d6:	e6e9      	b.n	80007ac <__udivmoddi4+0xa8>

080009d8 <__aeabi_idiv0>:
 80009d8:	4770      	bx	lr
 80009da:	bf00      	nop

080009dc <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80009dc:	b580      	push	{r7, lr}
 80009de:	b08a      	sub	sp, #40	; 0x28
 80009e0:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009e2:	f107 0314 	add.w	r3, r7, #20
 80009e6:	2200      	movs	r2, #0
 80009e8:	601a      	str	r2, [r3, #0]
 80009ea:	605a      	str	r2, [r3, #4]
 80009ec:	609a      	str	r2, [r3, #8]
 80009ee:	60da      	str	r2, [r3, #12]
 80009f0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80009f2:	4b2a      	ldr	r3, [pc, #168]	; (8000a9c <MX_GPIO_Init+0xc0>)
 80009f4:	69db      	ldr	r3, [r3, #28]
 80009f6:	4a29      	ldr	r2, [pc, #164]	; (8000a9c <MX_GPIO_Init+0xc0>)
 80009f8:	f043 0304 	orr.w	r3, r3, #4
 80009fc:	61d3      	str	r3, [r2, #28]
 80009fe:	4b27      	ldr	r3, [pc, #156]	; (8000a9c <MX_GPIO_Init+0xc0>)
 8000a00:	69db      	ldr	r3, [r3, #28]
 8000a02:	f003 0304 	and.w	r3, r3, #4
 8000a06:	613b      	str	r3, [r7, #16]
 8000a08:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000a0a:	4b24      	ldr	r3, [pc, #144]	; (8000a9c <MX_GPIO_Init+0xc0>)
 8000a0c:	69db      	ldr	r3, [r3, #28]
 8000a0e:	4a23      	ldr	r2, [pc, #140]	; (8000a9c <MX_GPIO_Init+0xc0>)
 8000a10:	f043 0320 	orr.w	r3, r3, #32
 8000a14:	61d3      	str	r3, [r2, #28]
 8000a16:	4b21      	ldr	r3, [pc, #132]	; (8000a9c <MX_GPIO_Init+0xc0>)
 8000a18:	69db      	ldr	r3, [r3, #28]
 8000a1a:	f003 0320 	and.w	r3, r3, #32
 8000a1e:	60fb      	str	r3, [r7, #12]
 8000a20:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a22:	4b1e      	ldr	r3, [pc, #120]	; (8000a9c <MX_GPIO_Init+0xc0>)
 8000a24:	69db      	ldr	r3, [r3, #28]
 8000a26:	4a1d      	ldr	r2, [pc, #116]	; (8000a9c <MX_GPIO_Init+0xc0>)
 8000a28:	f043 0301 	orr.w	r3, r3, #1
 8000a2c:	61d3      	str	r3, [r2, #28]
 8000a2e:	4b1b      	ldr	r3, [pc, #108]	; (8000a9c <MX_GPIO_Init+0xc0>)
 8000a30:	69db      	ldr	r3, [r3, #28]
 8000a32:	f003 0301 	and.w	r3, r3, #1
 8000a36:	60bb      	str	r3, [r7, #8]
 8000a38:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a3a:	4b18      	ldr	r3, [pc, #96]	; (8000a9c <MX_GPIO_Init+0xc0>)
 8000a3c:	69db      	ldr	r3, [r3, #28]
 8000a3e:	4a17      	ldr	r2, [pc, #92]	; (8000a9c <MX_GPIO_Init+0xc0>)
 8000a40:	f043 0302 	orr.w	r3, r3, #2
 8000a44:	61d3      	str	r3, [r2, #28]
 8000a46:	4b15      	ldr	r3, [pc, #84]	; (8000a9c <MX_GPIO_Init+0xc0>)
 8000a48:	69db      	ldr	r3, [r3, #28]
 8000a4a:	f003 0302 	and.w	r3, r3, #2
 8000a4e:	607b      	str	r3, [r7, #4]
 8000a50:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000a52:	2200      	movs	r2, #0
 8000a54:	2120      	movs	r1, #32
 8000a56:	4812      	ldr	r0, [pc, #72]	; (8000aa0 <MX_GPIO_Init+0xc4>)
 8000a58:	f000 ff7e 	bl	8001958 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000a5c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000a60:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000a62:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000a66:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a68:	2300      	movs	r3, #0
 8000a6a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000a6c:	f107 0314 	add.w	r3, r7, #20
 8000a70:	4619      	mov	r1, r3
 8000a72:	480c      	ldr	r0, [pc, #48]	; (8000aa4 <MX_GPIO_Init+0xc8>)
 8000a74:	f000 fde0 	bl	8001638 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000a78:	2320      	movs	r3, #32
 8000a7a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a7c:	2301      	movs	r3, #1
 8000a7e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a80:	2300      	movs	r3, #0
 8000a82:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a84:	2300      	movs	r3, #0
 8000a86:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000a88:	f107 0314 	add.w	r3, r7, #20
 8000a8c:	4619      	mov	r1, r3
 8000a8e:	4804      	ldr	r0, [pc, #16]	; (8000aa0 <MX_GPIO_Init+0xc4>)
 8000a90:	f000 fdd2 	bl	8001638 <HAL_GPIO_Init>

}
 8000a94:	bf00      	nop
 8000a96:	3728      	adds	r7, #40	; 0x28
 8000a98:	46bd      	mov	sp, r7
 8000a9a:	bd80      	pop	{r7, pc}
 8000a9c:	40023800 	.word	0x40023800
 8000aa0:	40020000 	.word	0x40020000
 8000aa4:	40020800 	.word	0x40020800

08000aa8 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8000aa8:	b580      	push	{r7, lr}
 8000aaa:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000aac:	4b12      	ldr	r3, [pc, #72]	; (8000af8 <MX_I2C1_Init+0x50>)
 8000aae:	4a13      	ldr	r2, [pc, #76]	; (8000afc <MX_I2C1_Init+0x54>)
 8000ab0:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8000ab2:	4b11      	ldr	r3, [pc, #68]	; (8000af8 <MX_I2C1_Init+0x50>)
 8000ab4:	4a12      	ldr	r2, [pc, #72]	; (8000b00 <MX_I2C1_Init+0x58>)
 8000ab6:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000ab8:	4b0f      	ldr	r3, [pc, #60]	; (8000af8 <MX_I2C1_Init+0x50>)
 8000aba:	2200      	movs	r2, #0
 8000abc:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000abe:	4b0e      	ldr	r3, [pc, #56]	; (8000af8 <MX_I2C1_Init+0x50>)
 8000ac0:	2200      	movs	r2, #0
 8000ac2:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000ac4:	4b0c      	ldr	r3, [pc, #48]	; (8000af8 <MX_I2C1_Init+0x50>)
 8000ac6:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000aca:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000acc:	4b0a      	ldr	r3, [pc, #40]	; (8000af8 <MX_I2C1_Init+0x50>)
 8000ace:	2200      	movs	r2, #0
 8000ad0:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000ad2:	4b09      	ldr	r3, [pc, #36]	; (8000af8 <MX_I2C1_Init+0x50>)
 8000ad4:	2200      	movs	r2, #0
 8000ad6:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000ad8:	4b07      	ldr	r3, [pc, #28]	; (8000af8 <MX_I2C1_Init+0x50>)
 8000ada:	2200      	movs	r2, #0
 8000adc:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000ade:	4b06      	ldr	r3, [pc, #24]	; (8000af8 <MX_I2C1_Init+0x50>)
 8000ae0:	2200      	movs	r2, #0
 8000ae2:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000ae4:	4804      	ldr	r0, [pc, #16]	; (8000af8 <MX_I2C1_Init+0x50>)
 8000ae6:	f000 ff4f 	bl	8001988 <HAL_I2C_Init>
 8000aea:	4603      	mov	r3, r0
 8000aec:	2b00      	cmp	r3, #0
 8000aee:	d001      	beq.n	8000af4 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000af0:	f000 fb00 	bl	80010f4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000af4:	bf00      	nop
 8000af6:	bd80      	pop	{r7, pc}
 8000af8:	2000008c 	.word	0x2000008c
 8000afc:	40005400 	.word	0x40005400
 8000b00:	000186a0 	.word	0x000186a0

08000b04 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8000b04:	b580      	push	{r7, lr}
 8000b06:	b08a      	sub	sp, #40	; 0x28
 8000b08:	af00      	add	r7, sp, #0
 8000b0a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b0c:	f107 0314 	add.w	r3, r7, #20
 8000b10:	2200      	movs	r2, #0
 8000b12:	601a      	str	r2, [r3, #0]
 8000b14:	605a      	str	r2, [r3, #4]
 8000b16:	609a      	str	r2, [r3, #8]
 8000b18:	60da      	str	r2, [r3, #12]
 8000b1a:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 8000b1c:	687b      	ldr	r3, [r7, #4]
 8000b1e:	681b      	ldr	r3, [r3, #0]
 8000b20:	4a17      	ldr	r2, [pc, #92]	; (8000b80 <HAL_I2C_MspInit+0x7c>)
 8000b22:	4293      	cmp	r3, r2
 8000b24:	d128      	bne.n	8000b78 <HAL_I2C_MspInit+0x74>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b26:	4b17      	ldr	r3, [pc, #92]	; (8000b84 <HAL_I2C_MspInit+0x80>)
 8000b28:	69db      	ldr	r3, [r3, #28]
 8000b2a:	4a16      	ldr	r2, [pc, #88]	; (8000b84 <HAL_I2C_MspInit+0x80>)
 8000b2c:	f043 0302 	orr.w	r3, r3, #2
 8000b30:	61d3      	str	r3, [r2, #28]
 8000b32:	4b14      	ldr	r3, [pc, #80]	; (8000b84 <HAL_I2C_MspInit+0x80>)
 8000b34:	69db      	ldr	r3, [r3, #28]
 8000b36:	f003 0302 	and.w	r3, r3, #2
 8000b3a:	613b      	str	r3, [r7, #16]
 8000b3c:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000b3e:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000b42:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000b44:	2312      	movs	r3, #18
 8000b46:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b48:	2300      	movs	r3, #0
 8000b4a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b4c:	2303      	movs	r3, #3
 8000b4e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000b50:	2304      	movs	r3, #4
 8000b52:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b54:	f107 0314 	add.w	r3, r7, #20
 8000b58:	4619      	mov	r1, r3
 8000b5a:	480b      	ldr	r0, [pc, #44]	; (8000b88 <HAL_I2C_MspInit+0x84>)
 8000b5c:	f000 fd6c 	bl	8001638 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000b60:	4b08      	ldr	r3, [pc, #32]	; (8000b84 <HAL_I2C_MspInit+0x80>)
 8000b62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000b64:	4a07      	ldr	r2, [pc, #28]	; (8000b84 <HAL_I2C_MspInit+0x80>)
 8000b66:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000b6a:	6253      	str	r3, [r2, #36]	; 0x24
 8000b6c:	4b05      	ldr	r3, [pc, #20]	; (8000b84 <HAL_I2C_MspInit+0x80>)
 8000b6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000b70:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000b74:	60fb      	str	r3, [r7, #12]
 8000b76:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8000b78:	bf00      	nop
 8000b7a:	3728      	adds	r7, #40	; 0x28
 8000b7c:	46bd      	mov	sp, r7
 8000b7e:	bd80      	pop	{r7, pc}
 8000b80:	40005400 	.word	0x40005400
 8000b84:	40023800 	.word	0x40023800
 8000b88:	40020400 	.word	0x40020400

08000b8c <lcd_init>:
#include "i2c.h"



void lcd_init(I2C_HandleTypeDef* I2Cx, rgb_lcd* DataStruct)
{
 8000b8c:	b580      	push	{r7, lr}
 8000b8e:	b08a      	sub	sp, #40	; 0x28
 8000b90:	af02      	add	r7, sp, #8
 8000b92:	6078      	str	r0, [r7, #4]
 8000b94:	6039      	str	r1, [r7, #0]
	I2C_HandleTypeDef* Handle = I2Cx;
 8000b96:	687b      	ldr	r3, [r7, #4]
 8000b98:	61fb      	str	r3, [r7, #28]
	DataStruct->_displayfunction |= LCD_2LINE | LCD_5x10DOTS; // MODE 2 LIGNES
 8000b9a:	683b      	ldr	r3, [r7, #0]
 8000b9c:	781b      	ldrb	r3, [r3, #0]
 8000b9e:	f043 030c 	orr.w	r3, r3, #12
 8000ba2:	b2da      	uxtb	r2, r3
 8000ba4:	683b      	ldr	r3, [r7, #0]
 8000ba6:	701a      	strb	r2, [r3, #0]
	uint8_t data[2];
	data[0] = 0x80;
 8000ba8:	2380      	movs	r3, #128	; 0x80
 8000baa:	763b      	strb	r3, [r7, #24]
	data[1] = LCD_FUNCTIONSET | DataStruct->_displayfunction;
 8000bac:	683b      	ldr	r3, [r7, #0]
 8000bae:	781b      	ldrb	r3, [r3, #0]
 8000bb0:	f043 0320 	orr.w	r3, r3, #32
 8000bb4:	b2db      	uxtb	r3, r3
 8000bb6:	767b      	strb	r3, [r7, #25]

	HAL_UART_Transmit(&huart2,(uint8_t *)data,2,10);
 8000bb8:	f107 0118 	add.w	r1, r7, #24
 8000bbc:	230a      	movs	r3, #10
 8000bbe:	2202      	movs	r2, #2
 8000bc0:	486c      	ldr	r0, [pc, #432]	; (8000d74 <lcd_init+0x1e8>)
 8000bc2:	f002 fde6 	bl	8003792 <HAL_UART_Transmit>
	char newline[2] = "\r\n";
 8000bc6:	f640 230d 	movw	r3, #2573	; 0xa0d
 8000bca:	82bb      	strh	r3, [r7, #20]
	HAL_UART_Transmit(&huart2, (uint8_t *) newline, 2, 10);
 8000bcc:	f107 0114 	add.w	r1, r7, #20
 8000bd0:	230a      	movs	r3, #10
 8000bd2:	2202      	movs	r2, #2
 8000bd4:	4867      	ldr	r0, [pc, #412]	; (8000d74 <lcd_init+0x1e8>)
 8000bd6:	f002 fddc 	bl	8003792 <HAL_UART_Transmit>

	HAL_StatusTypeDef status = HAL_I2C_IsDeviceReady(Handle,LCD_ADDRESS,5,100);
 8000bda:	2364      	movs	r3, #100	; 0x64
 8000bdc:	2205      	movs	r2, #5
 8000bde:	217c      	movs	r1, #124	; 0x7c
 8000be0:	69f8      	ldr	r0, [r7, #28]
 8000be2:	f001 fb39 	bl	8002258 <HAL_I2C_IsDeviceReady>
 8000be6:	4603      	mov	r3, r0
 8000be8:	74fb      	strb	r3, [r7, #19]
	HAL_UART_Transmit(&huart2,&status,1,10);
 8000bea:	f107 0113 	add.w	r1, r7, #19
 8000bee:	230a      	movs	r3, #10
 8000bf0:	2201      	movs	r2, #1
 8000bf2:	4860      	ldr	r0, [pc, #384]	; (8000d74 <lcd_init+0x1e8>)
 8000bf4:	f002 fdcd 	bl	8003792 <HAL_UART_Transmit>
	HAL_Delay(50);
 8000bf8:	2032      	movs	r0, #50	; 0x32
 8000bfa:	f000 fc17 	bl	800142c <HAL_Delay>

	HAL_StatusTypeDef status2 = HAL_I2C_Master_Transmit(Handle, LCD_ADDRESS, data,2,5000);
 8000bfe:	f107 0218 	add.w	r2, r7, #24
 8000c02:	f241 3388 	movw	r3, #5000	; 0x1388
 8000c06:	9300      	str	r3, [sp, #0]
 8000c08:	2302      	movs	r3, #2
 8000c0a:	217c      	movs	r1, #124	; 0x7c
 8000c0c:	69f8      	ldr	r0, [r7, #28]
 8000c0e:	f000 ffff 	bl	8001c10 <HAL_I2C_Master_Transmit>
 8000c12:	4603      	mov	r3, r0
 8000c14:	74bb      	strb	r3, [r7, #18]
	HAL_UART_Transmit(&huart2,&status2,1,10);
 8000c16:	f107 0112 	add.w	r1, r7, #18
 8000c1a:	230a      	movs	r3, #10
 8000c1c:	2201      	movs	r2, #1
 8000c1e:	4855      	ldr	r0, [pc, #340]	; (8000d74 <lcd_init+0x1e8>)
 8000c20:	f002 fdb7 	bl	8003792 <HAL_UART_Transmit>
	HAL_Delay(50);
 8000c24:	2032      	movs	r0, #50	; 0x32
 8000c26:	f000 fc01 	bl	800142c <HAL_Delay>

	HAL_I2C_Master_Transmit(Handle,LCD_ADDRESS,data,2,5000);
 8000c2a:	f107 0218 	add.w	r2, r7, #24
 8000c2e:	f241 3388 	movw	r3, #5000	; 0x1388
 8000c32:	9300      	str	r3, [sp, #0]
 8000c34:	2302      	movs	r3, #2
 8000c36:	217c      	movs	r1, #124	; 0x7c
 8000c38:	69f8      	ldr	r0, [r7, #28]
 8000c3a:	f000 ffe9 	bl	8001c10 <HAL_I2C_Master_Transmit>
	HAL_Delay(5);
 8000c3e:	2005      	movs	r0, #5
 8000c40:	f000 fbf4 	bl	800142c <HAL_Delay>

	HAL_I2C_Master_Transmit(Handle,LCD_ADDRESS,data,2,5000);
 8000c44:	f107 0218 	add.w	r2, r7, #24
 8000c48:	f241 3388 	movw	r3, #5000	; 0x1388
 8000c4c:	9300      	str	r3, [sp, #0]
 8000c4e:	2302      	movs	r3, #2
 8000c50:	217c      	movs	r1, #124	; 0x7c
 8000c52:	69f8      	ldr	r0, [r7, #28]
 8000c54:	f000 ffdc 	bl	8001c10 <HAL_I2C_Master_Transmit>

	// CONTROL
	DataStruct->_displaycontrol = LCD_DISPLAYON | LCD_CURSOROFF | LCD_BLINKOFF;
 8000c58:	683b      	ldr	r3, [r7, #0]
 8000c5a:	2204      	movs	r2, #4
 8000c5c:	705a      	strb	r2, [r3, #1]

	data[1] = LCD_DISPLAYCONTROL | DataStruct->_displaycontrol;
 8000c5e:	683b      	ldr	r3, [r7, #0]
 8000c60:	785b      	ldrb	r3, [r3, #1]
 8000c62:	f043 0308 	orr.w	r3, r3, #8
 8000c66:	b2db      	uxtb	r3, r3
 8000c68:	767b      	strb	r3, [r7, #25]
	HAL_I2C_Master_Transmit(Handle,LCD_ADDRESS, data,2,1000);
 8000c6a:	f107 0218 	add.w	r2, r7, #24
 8000c6e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000c72:	9300      	str	r3, [sp, #0]
 8000c74:	2302      	movs	r3, #2
 8000c76:	217c      	movs	r1, #124	; 0x7c
 8000c78:	69f8      	ldr	r0, [r7, #28]
 8000c7a:	f000 ffc9 	bl	8001c10 <HAL_I2C_Master_Transmit>

	data[1] = LCD_CLEARDISPLAY;
 8000c7e:	2301      	movs	r3, #1
 8000c80:	767b      	strb	r3, [r7, #25]
	HAL_I2C_Master_Transmit(Handle, (uint16_t)LCD_ADDRESS, (uint8_t *)data,2,1000);
 8000c82:	f107 0218 	add.w	r2, r7, #24
 8000c86:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000c8a:	9300      	str	r3, [sp, #0]
 8000c8c:	2302      	movs	r3, #2
 8000c8e:	217c      	movs	r1, #124	; 0x7c
 8000c90:	69f8      	ldr	r0, [r7, #28]
 8000c92:	f000 ffbd 	bl	8001c10 <HAL_I2C_Master_Transmit>
	HAL_Delay(2);
 8000c96:	2002      	movs	r0, #2
 8000c98:	f000 fbc8 	bl	800142c <HAL_Delay>

	// MODE
	DataStruct->_displaymode = LCD_ENTRYLEFT | LCD_ENTRYSHIFTDECREMENT;
 8000c9c:	683b      	ldr	r3, [r7, #0]
 8000c9e:	2202      	movs	r2, #2
 8000ca0:	709a      	strb	r2, [r3, #2]
	data[1] = LCD_ENTRYMODESET | DataStruct->_displaymode;
 8000ca2:	683b      	ldr	r3, [r7, #0]
 8000ca4:	789b      	ldrb	r3, [r3, #2]
 8000ca6:	f043 0304 	orr.w	r3, r3, #4
 8000caa:	b2db      	uxtb	r3, r3
 8000cac:	767b      	strb	r3, [r7, #25]
	HAL_I2C_Master_Transmit(Handle, (uint16_t)LCD_ADDRESS, (uint8_t *)data,2,1000);
 8000cae:	f107 0218 	add.w	r2, r7, #24
 8000cb2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000cb6:	9300      	str	r3, [sp, #0]
 8000cb8:	2302      	movs	r3, #2
 8000cba:	217c      	movs	r1, #124	; 0x7c
 8000cbc:	69f8      	ldr	r0, [r7, #28]
 8000cbe:	f000 ffa7 	bl	8001c10 <HAL_I2C_Master_Transmit>

	// initialisation du lcd_rgb_Backight
		uint8_t data_backlight[2];
		data_backlight[0] = REG_MODE1;
 8000cc2:	2300      	movs	r3, #0
 8000cc4:	743b      	strb	r3, [r7, #16]
		data_backlight[1] = 0;
 8000cc6:	2300      	movs	r3, #0
 8000cc8:	747b      	strb	r3, [r7, #17]
		HAL_I2C_Master_Transmit(Handle, (uint16_t)RGB_ADDRESS, (uint8_t *)data_backlight,2,1000);
 8000cca:	f107 0210 	add.w	r2, r7, #16
 8000cce:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000cd2:	9300      	str	r3, [sp, #0]
 8000cd4:	2302      	movs	r3, #2
 8000cd6:	21c4      	movs	r1, #196	; 0xc4
 8000cd8:	69f8      	ldr	r0, [r7, #28]
 8000cda:	f000 ff99 	bl	8001c10 <HAL_I2C_Master_Transmit>

		data_backlight[0] = REG_OUTPUT;
 8000cde:	2308      	movs	r3, #8
 8000ce0:	743b      	strb	r3, [r7, #16]
		data_backlight[1] = 0xFF;
 8000ce2:	23ff      	movs	r3, #255	; 0xff
 8000ce4:	747b      	strb	r3, [r7, #17]
		HAL_I2C_Master_Transmit(Handle, (uint16_t)RGB_ADDRESS, (uint8_t *)data_backlight,2,1000);
 8000ce6:	f107 0210 	add.w	r2, r7, #16
 8000cea:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000cee:	9300      	str	r3, [sp, #0]
 8000cf0:	2302      	movs	r3, #2
 8000cf2:	21c4      	movs	r1, #196	; 0xc4
 8000cf4:	69f8      	ldr	r0, [r7, #28]
 8000cf6:	f000 ff8b 	bl	8001c10 <HAL_I2C_Master_Transmit>

		data_backlight[0] = REG_MODE2;
 8000cfa:	2301      	movs	r3, #1
 8000cfc:	743b      	strb	r3, [r7, #16]
		data_backlight[1] = 0x20;
 8000cfe:	2320      	movs	r3, #32
 8000d00:	747b      	strb	r3, [r7, #17]
		HAL_I2C_Master_Transmit(Handle, (uint16_t)RGB_ADDRESS, (uint8_t *)data_backlight,2,1000);
 8000d02:	f107 0210 	add.w	r2, r7, #16
 8000d06:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000d0a:	9300      	str	r3, [sp, #0]
 8000d0c:	2302      	movs	r3, #2
 8000d0e:	21c4      	movs	r1, #196	; 0xc4
 8000d10:	69f8      	ldr	r0, [r7, #28]
 8000d12:	f000 ff7d 	bl	8001c10 <HAL_I2C_Master_Transmit>

		//couleur du LCD en Blanc
		uint8_t data_rgb[2];
		data_rgb[0] = REG_RED;
 8000d16:	2304      	movs	r3, #4
 8000d18:	733b      	strb	r3, [r7, #12]
		data_rgb[1] = 255;
 8000d1a:	23ff      	movs	r3, #255	; 0xff
 8000d1c:	737b      	strb	r3, [r7, #13]
		HAL_I2C_Master_Transmit(Handle, (uint16_t)RGB_ADDRESS, (uint8_t *)data_rgb,2,1000);
 8000d1e:	f107 020c 	add.w	r2, r7, #12
 8000d22:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000d26:	9300      	str	r3, [sp, #0]
 8000d28:	2302      	movs	r3, #2
 8000d2a:	21c4      	movs	r1, #196	; 0xc4
 8000d2c:	69f8      	ldr	r0, [r7, #28]
 8000d2e:	f000 ff6f 	bl	8001c10 <HAL_I2C_Master_Transmit>

		data_rgb[0] = REG_GREEN;
 8000d32:	2303      	movs	r3, #3
 8000d34:	733b      	strb	r3, [r7, #12]
		data_rgb[1] = 255;
 8000d36:	23ff      	movs	r3, #255	; 0xff
 8000d38:	737b      	strb	r3, [r7, #13]
		HAL_I2C_Master_Transmit(Handle, (uint16_t)RGB_ADDRESS, (uint8_t *)data_rgb,2,1000);
 8000d3a:	f107 020c 	add.w	r2, r7, #12
 8000d3e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000d42:	9300      	str	r3, [sp, #0]
 8000d44:	2302      	movs	r3, #2
 8000d46:	21c4      	movs	r1, #196	; 0xc4
 8000d48:	69f8      	ldr	r0, [r7, #28]
 8000d4a:	f000 ff61 	bl	8001c10 <HAL_I2C_Master_Transmit>

		data_rgb[0] = REG_BLUE;
 8000d4e:	2302      	movs	r3, #2
 8000d50:	733b      	strb	r3, [r7, #12]
		data_rgb[1] = 255;
 8000d52:	23ff      	movs	r3, #255	; 0xff
 8000d54:	737b      	strb	r3, [r7, #13]
		HAL_I2C_Master_Transmit(Handle, (uint16_t)RGB_ADDRESS, (uint8_t *)data_rgb,2,1000);
 8000d56:	f107 020c 	add.w	r2, r7, #12
 8000d5a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000d5e:	9300      	str	r3, [sp, #0]
 8000d60:	2302      	movs	r3, #2
 8000d62:	21c4      	movs	r1, #196	; 0xc4
 8000d64:	69f8      	ldr	r0, [r7, #28]
 8000d66:	f000 ff53 	bl	8001c10 <HAL_I2C_Master_Transmit>


}
 8000d6a:	bf00      	nop
 8000d6c:	3720      	adds	r7, #32
 8000d6e:	46bd      	mov	sp, r7
 8000d70:	bd80      	pop	{r7, pc}
 8000d72:	bf00      	nop
 8000d74:	200000e8 	.word	0x200000e8

08000d78 <lcd_print>:
    unsigned char data[2] = {0x40, value};
    HAL_I2C_Master_Transmit(Handle,LCD_ADDRESS, data,2,1000);
}

void lcd_print(I2C_HandleTypeDef* I2Cx, char *str)
{
 8000d78:	b580      	push	{r7, lr}
 8000d7a:	b088      	sub	sp, #32
 8000d7c:	af02      	add	r7, sp, #8
 8000d7e:	6078      	str	r0, [r7, #4]
 8000d80:	6039      	str	r1, [r7, #0]
	I2C_HandleTypeDef* Handle = I2Cx;
 8000d82:	687b      	ldr	r3, [r7, #4]
 8000d84:	613b      	str	r3, [r7, #16]
    char data[2];
    data[0] = 0x40;
 8000d86:	2340      	movs	r3, #64	; 0x40
 8000d88:	733b      	strb	r3, [r7, #12]
    int i=0;
 8000d8a:	2300      	movs	r3, #0
 8000d8c:	617b      	str	r3, [r7, #20]
    while(str[i] != '\0')
 8000d8e:	e011      	b.n	8000db4 <lcd_print+0x3c>
    {
            data[1] = str[i];
 8000d90:	697b      	ldr	r3, [r7, #20]
 8000d92:	683a      	ldr	r2, [r7, #0]
 8000d94:	4413      	add	r3, r2
 8000d96:	781b      	ldrb	r3, [r3, #0]
 8000d98:	737b      	strb	r3, [r7, #13]
            HAL_I2C_Master_Transmit(Handle,LCD_ADDRESS,(uint8_t *) data, 2,1000);
 8000d9a:	f107 020c 	add.w	r2, r7, #12
 8000d9e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000da2:	9300      	str	r3, [sp, #0]
 8000da4:	2302      	movs	r3, #2
 8000da6:	217c      	movs	r1, #124	; 0x7c
 8000da8:	6938      	ldr	r0, [r7, #16]
 8000daa:	f000 ff31 	bl	8001c10 <HAL_I2C_Master_Transmit>
            i++;
 8000dae:	697b      	ldr	r3, [r7, #20]
 8000db0:	3301      	adds	r3, #1
 8000db2:	617b      	str	r3, [r7, #20]
    while(str[i] != '\0')
 8000db4:	697b      	ldr	r3, [r7, #20]
 8000db6:	683a      	ldr	r2, [r7, #0]
 8000db8:	4413      	add	r3, r2
 8000dba:	781b      	ldrb	r3, [r3, #0]
 8000dbc:	2b00      	cmp	r3, #0
 8000dbe:	d1e7      	bne.n	8000d90 <lcd_print+0x18>
   }
}
 8000dc0:	bf00      	nop
 8000dc2:	bf00      	nop
 8000dc4:	3718      	adds	r7, #24
 8000dc6:	46bd      	mov	sp, r7
 8000dc8:	bd80      	pop	{r7, pc}

08000dca <lcd_position>:

void lcd_position(I2C_HandleTypeDef* I2Cx,char col, char row) // position du curseur le lcd
{
 8000dca:	b580      	push	{r7, lr}
 8000dcc:	b086      	sub	sp, #24
 8000dce:	af02      	add	r7, sp, #8
 8000dd0:	6078      	str	r0, [r7, #4]
 8000dd2:	460b      	mov	r3, r1
 8000dd4:	70fb      	strb	r3, [r7, #3]
 8000dd6:	4613      	mov	r3, r2
 8000dd8:	70bb      	strb	r3, [r7, #2]
	I2C_HandleTypeDef* Handle = I2Cx;
 8000dda:	687b      	ldr	r3, [r7, #4]
 8000ddc:	60fb      	str	r3, [r7, #12]
    if(row == 0)
 8000dde:	78bb      	ldrb	r3, [r7, #2]
 8000de0:	2b00      	cmp	r3, #0
 8000de2:	d104      	bne.n	8000dee <lcd_position+0x24>
    {
        col = col | 0x80;
 8000de4:	78fb      	ldrb	r3, [r7, #3]
 8000de6:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000dea:	70fb      	strb	r3, [r7, #3]
 8000dec:	e003      	b.n	8000df6 <lcd_position+0x2c>
    }
    else
    {
        col = col | 0xc0;
 8000dee:	78fb      	ldrb	r3, [r7, #3]
 8000df0:	f063 033f 	orn	r3, r3, #63	; 0x3f
 8000df4:	70fb      	strb	r3, [r7, #3]
    }

    char data[2];
    data[0] = 0x80;
 8000df6:	2380      	movs	r3, #128	; 0x80
 8000df8:	723b      	strb	r3, [r7, #8]
    data[1] = col;
 8000dfa:	78fb      	ldrb	r3, [r7, #3]
 8000dfc:	727b      	strb	r3, [r7, #9]
    HAL_I2C_Master_Transmit(Handle,LCD_ADDRESS,(uint8_t *) data, 2,1000);
 8000dfe:	f107 0208 	add.w	r2, r7, #8
 8000e02:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000e06:	9300      	str	r3, [sp, #0]
 8000e08:	2302      	movs	r3, #2
 8000e0a:	217c      	movs	r1, #124	; 0x7c
 8000e0c:	68f8      	ldr	r0, [r7, #12]
 8000e0e:	f000 feff 	bl	8001c10 <HAL_I2C_Master_Transmit>
}
 8000e12:	bf00      	nop
 8000e14:	3710      	adds	r7, #16
 8000e16:	46bd      	mov	sp, r7
 8000e18:	bd80      	pop	{r7, pc}
	...

08000e1c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000e1c:	b5b0      	push	{r4, r5, r7, lr}
 8000e1e:	b08c      	sub	sp, #48	; 0x30
 8000e20:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000e22:	f000 fa94 	bl	800134e <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000e26:	f000 f911 	bl	800104c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000e2a:	f7ff fdd7 	bl	80009dc <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000e2e:	f000 f9fb 	bl	8001228 <MX_USART2_UART_Init>
  MX_I2C1_Init();
 8000e32:	f7ff fe39 	bl	8000aa8 <MX_I2C1_Init>

  /* USER CODE BEGIN 2 */

  // Initialisation de LCD
    lcd_init(&hi2c1,&lcdData);
 8000e36:	4977      	ldr	r1, [pc, #476]	; (8001014 <main+0x1f8>)
 8000e38:	4877      	ldr	r0, [pc, #476]	; (8001018 <main+0x1fc>)
 8000e3a:	f7ff fea7 	bl	8000b8c <lcd_init>
    lcd_position(&hi2c1,0,0);
 8000e3e:	2200      	movs	r2, #0
 8000e40:	2100      	movs	r1, #0
 8000e42:	4875      	ldr	r0, [pc, #468]	; (8001018 <main+0x1fc>)
 8000e44:	f7ff ffc1 	bl	8000dca <lcd_position>
  while (1)
  {
    /* USER CODE END WHILE */

	  	  	  // Valeur de bit fort stocké dans le buf [0]
	  	  	buf[0] = CAPTEUR_CMD_MSB;
 8000e48:	2324      	movs	r3, #36	; 0x24
 8000e4a:	733b      	strb	r3, [r7, #12]
	  	  	  // Valeur de bit faible stocké dans le buf [1]
	  		buf[1] = CAPTEUR_CMD_LSB;
 8000e4c:	2316      	movs	r3, #22
 8000e4e:	737b      	strb	r3, [r7, #13]
	  		// Debut de transmission de I2C "WRITE" dans l'I2C avec l'adresse de capteur pour recevoir les données de capteur
	  		ret = HAL_I2C_Master_Transmit( &hi2c1, CAPTEUR_ADRS, buf, 2, HAL_MAX_DELAY);
 8000e50:	2388      	movs	r3, #136	; 0x88
 8000e52:	b299      	uxth	r1, r3
 8000e54:	f107 020c 	add.w	r2, r7, #12
 8000e58:	f04f 33ff 	mov.w	r3, #4294967295
 8000e5c:	9300      	str	r3, [sp, #0]
 8000e5e:	2302      	movs	r3, #2
 8000e60:	486d      	ldr	r0, [pc, #436]	; (8001018 <main+0x1fc>)
 8000e62:	f000 fed5 	bl	8001c10 <HAL_I2C_Master_Transmit>
 8000e66:	4603      	mov	r3, r0
 8000e68:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	  		// Echec de communcation
	  		if ( ret != HAL_OK)
 8000e6c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8000e70:	2b00      	cmp	r3, #0
 8000e72:	d008      	beq.n	8000e86 <main+0x6a>
	  		{
	  			strcpy((char*)buf, "erreur_T!!\r\n");
 8000e74:	f107 030c 	add.w	r3, r7, #12
 8000e78:	4a68      	ldr	r2, [pc, #416]	; (800101c <main+0x200>)
 8000e7a:	461c      	mov	r4, r3
 8000e7c:	4613      	mov	r3, r2
 8000e7e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000e80:	c407      	stmia	r4!, {r0, r1, r2}
 8000e82:	7023      	strb	r3, [r4, #0]
 8000e84:	e0b2      	b.n	8000fec <main+0x1d0>

	  		// Communication reussite
	  			else
	  		{

	  		ret = HAL_I2C_Master_Receive( &hi2c1, CAPTEUR_ADRS, buf, 6, HAL_MAX_DELAY);
 8000e86:	2388      	movs	r3, #136	; 0x88
 8000e88:	b299      	uxth	r1, r3
 8000e8a:	f107 020c 	add.w	r2, r7, #12
 8000e8e:	f04f 33ff 	mov.w	r3, #4294967295
 8000e92:	9300      	str	r3, [sp, #0]
 8000e94:	2306      	movs	r3, #6
 8000e96:	4860      	ldr	r0, [pc, #384]	; (8001018 <main+0x1fc>)
 8000e98:	f000 ffb8 	bl	8001e0c <HAL_I2C_Master_Receive>
 8000e9c:	4603      	mov	r3, r0
 8000e9e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27


	  		// Echec de communcation
	  					if ( ret != HAL_OK)
 8000ea2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8000ea6:	2b00      	cmp	r3, #0
 8000ea8:	d008      	beq.n	8000ebc <main+0xa0>
	  				{
	  					strcpy((char*)buf, "erreur_R!!\r\n");
 8000eaa:	f107 030c 	add.w	r3, r7, #12
 8000eae:	4a5c      	ldr	r2, [pc, #368]	; (8001020 <main+0x204>)
 8000eb0:	461c      	mov	r4, r3
 8000eb2:	4613      	mov	r3, r2
 8000eb4:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000eb6:	c407      	stmia	r4!, {r0, r1, r2}
 8000eb8:	7023      	strb	r3, [r4, #0]
 8000eba:	e097      	b.n	8000fec <main+0x1d0>
	  				}
	  		// Communication reussite
	  		else
	  		{
	  			// Decodage de MSB & LSB et socké dans la valeur
	  			value  =   buf[1] | buf[0] << 8;
 8000ebc:	7b7b      	ldrb	r3, [r7, #13]
 8000ebe:	b21a      	sxth	r2, r3
 8000ec0:	7b3b      	ldrb	r3, [r7, #12]
 8000ec2:	021b      	lsls	r3, r3, #8
 8000ec4:	b21b      	sxth	r3, r3
 8000ec6:	4313      	orrs	r3, r2
 8000ec8:	b21b      	sxth	r3, r3
 8000eca:	b29b      	uxth	r3, r3
 8000ecc:	817b      	strh	r3, [r7, #10]

	  			// Calcul exacte de la valeur de temperature
	  			temp = -45 + 175 * ( (float)value / 65535);
 8000ece:	897b      	ldrh	r3, [r7, #10]
 8000ed0:	b29b      	uxth	r3, r3
 8000ed2:	4618      	mov	r0, r3
 8000ed4:	f7ff fa10 	bl	80002f8 <__aeabi_ui2f>
 8000ed8:	4603      	mov	r3, r0
 8000eda:	4952      	ldr	r1, [pc, #328]	; (8001024 <main+0x208>)
 8000edc:	4618      	mov	r0, r3
 8000ede:	f7ff fb17 	bl	8000510 <__aeabi_fdiv>
 8000ee2:	4603      	mov	r3, r0
 8000ee4:	4950      	ldr	r1, [pc, #320]	; (8001028 <main+0x20c>)
 8000ee6:	4618      	mov	r0, r3
 8000ee8:	f7ff fa5e 	bl	80003a8 <__aeabi_fmul>
 8000eec:	4603      	mov	r3, r0
 8000eee:	494f      	ldr	r1, [pc, #316]	; (800102c <main+0x210>)
 8000ef0:	4618      	mov	r0, r3
 8000ef2:	f7ff f94f 	bl	8000194 <__aeabi_fsub>
 8000ef6:	4603      	mov	r3, r0
 8000ef8:	607b      	str	r3, [r7, #4]

	  			// Transformation de valeur pour la partie entier et decimale
	  			Entier_part = (int) temp;
 8000efa:	687b      	ldr	r3, [r7, #4]
 8000efc:	4618      	mov	r0, r3
 8000efe:	f7ff fba3 	bl	8000648 <__aeabi_f2iz>
 8000f02:	4603      	mov	r3, r0
 8000f04:	4618      	mov	r0, r3
 8000f06:	f7ff f9fb 	bl	8000300 <__aeabi_i2f>
 8000f0a:	4603      	mov	r3, r0
 8000f0c:	623b      	str	r3, [r7, #32]
	  			Decimal_part = temp;
 8000f0e:	687b      	ldr	r3, [r7, #4]
 8000f10:	61fb      	str	r3, [r7, #28]
	  			Decimal_part *= 100;
 8000f12:	4947      	ldr	r1, [pc, #284]	; (8001030 <main+0x214>)
 8000f14:	69f8      	ldr	r0, [r7, #28]
 8000f16:	f7ff fa47 	bl	80003a8 <__aeabi_fmul>
 8000f1a:	4603      	mov	r3, r0
 8000f1c:	61fb      	str	r3, [r7, #28]
	  			Decimal_part = Decimal_part - (Entier_part * 100);
 8000f1e:	4944      	ldr	r1, [pc, #272]	; (8001030 <main+0x214>)
 8000f20:	6a38      	ldr	r0, [r7, #32]
 8000f22:	f7ff fa41 	bl	80003a8 <__aeabi_fmul>
 8000f26:	4603      	mov	r3, r0
 8000f28:	4619      	mov	r1, r3
 8000f2a:	69f8      	ldr	r0, [r7, #28]
 8000f2c:	f7ff f932 	bl	8000194 <__aeabi_fsub>
 8000f30:	4603      	mov	r3, r0
 8000f32:	61fb      	str	r3, [r7, #28]

	  			// On stocke la valeur de temperature dans le byte  buf[4] et buf[3]
	  			value = buf[4] | buf[3] << 8;
 8000f34:	7c3b      	ldrb	r3, [r7, #16]
 8000f36:	b21a      	sxth	r2, r3
 8000f38:	7bfb      	ldrb	r3, [r7, #15]
 8000f3a:	021b      	lsls	r3, r3, #8
 8000f3c:	b21b      	sxth	r3, r3
 8000f3e:	4313      	orrs	r3, r2
 8000f40:	b21b      	sxth	r3, r3
 8000f42:	b29b      	uxth	r3, r3
 8000f44:	817b      	strh	r3, [r7, #10]

	  			// Calcul exacte de la valeur de l'humidité
	  			umid = -49 + 315 *( (float)value / 65535);
 8000f46:	897b      	ldrh	r3, [r7, #10]
 8000f48:	b29b      	uxth	r3, r3
 8000f4a:	4618      	mov	r0, r3
 8000f4c:	f7ff f9d4 	bl	80002f8 <__aeabi_ui2f>
 8000f50:	4603      	mov	r3, r0
 8000f52:	4934      	ldr	r1, [pc, #208]	; (8001024 <main+0x208>)
 8000f54:	4618      	mov	r0, r3
 8000f56:	f7ff fadb 	bl	8000510 <__aeabi_fdiv>
 8000f5a:	4603      	mov	r3, r0
 8000f5c:	4935      	ldr	r1, [pc, #212]	; (8001034 <main+0x218>)
 8000f5e:	4618      	mov	r0, r3
 8000f60:	f7ff fa22 	bl	80003a8 <__aeabi_fmul>
 8000f64:	4603      	mov	r3, r0
 8000f66:	4934      	ldr	r1, [pc, #208]	; (8001038 <main+0x21c>)
 8000f68:	4618      	mov	r0, r3
 8000f6a:	f7ff f913 	bl	8000194 <__aeabi_fsub>
 8000f6e:	4603      	mov	r3, r0
 8000f70:	61bb      	str	r3, [r7, #24]

	  			//:::::::::::::::::::::::::::::::::::::::::: PARTIE LCD ::::::::::::::::::::::::::::::::::::::::::::::::::://

	  			// Affichage des valeurs dans le LCD
	  			sprintf( (char*)buf, "%u.%u C ; %u D", (unsigned int) Entier_part,(unsigned int) Decimal_part,(unsigned int) umid  );
 8000f72:	6a38      	ldr	r0, [r7, #32]
 8000f74:	f7ff fb8e 	bl	8000694 <__aeabi_f2uiz>
 8000f78:	4604      	mov	r4, r0
 8000f7a:	69f8      	ldr	r0, [r7, #28]
 8000f7c:	f7ff fb8a 	bl	8000694 <__aeabi_f2uiz>
 8000f80:	4605      	mov	r5, r0
 8000f82:	69b8      	ldr	r0, [r7, #24]
 8000f84:	f7ff fb86 	bl	8000694 <__aeabi_f2uiz>
 8000f88:	4603      	mov	r3, r0
 8000f8a:	f107 000c 	add.w	r0, r7, #12
 8000f8e:	9300      	str	r3, [sp, #0]
 8000f90:	462b      	mov	r3, r5
 8000f92:	4622      	mov	r2, r4
 8000f94:	4929      	ldr	r1, [pc, #164]	; (800103c <main+0x220>)
 8000f96:	f002 fdef 	bl	8003b78 <siprintf>
	  			lcd_position(&hi2c1,0,0);
 8000f9a:	2200      	movs	r2, #0
 8000f9c:	2100      	movs	r1, #0
 8000f9e:	481e      	ldr	r0, [pc, #120]	; (8001018 <main+0x1fc>)
 8000fa0:	f7ff ff13 	bl	8000dca <lcd_position>
	  			lcd_print(&hi2c1,"Temp : ");
 8000fa4:	4926      	ldr	r1, [pc, #152]	; (8001040 <main+0x224>)
 8000fa6:	481c      	ldr	r0, [pc, #112]	; (8001018 <main+0x1fc>)
 8000fa8:	f7ff fee6 	bl	8000d78 <lcd_print>
	  			lcd_position(&hi2c1,7,0);
 8000fac:	2200      	movs	r2, #0
 8000fae:	2107      	movs	r1, #7
 8000fb0:	4819      	ldr	r0, [pc, #100]	; (8001018 <main+0x1fc>)
 8000fb2:	f7ff ff0a 	bl	8000dca <lcd_position>
	  			lcd_print(&hi2c1,buf);
 8000fb6:	f107 030c 	add.w	r3, r7, #12
 8000fba:	4619      	mov	r1, r3
 8000fbc:	4816      	ldr	r0, [pc, #88]	; (8001018 <main+0x1fc>)
 8000fbe:	f7ff fedb 	bl	8000d78 <lcd_print>
	  			lcd_position(&hi2c1,0,1);
 8000fc2:	2201      	movs	r2, #1
 8000fc4:	2100      	movs	r1, #0
 8000fc6:	4814      	ldr	r0, [pc, #80]	; (8001018 <main+0x1fc>)
 8000fc8:	f7ff feff 	bl	8000dca <lcd_position>
	  			lcd_print(&hi2c1,"Hum: ");
 8000fcc:	491d      	ldr	r1, [pc, #116]	; (8001044 <main+0x228>)
 8000fce:	4812      	ldr	r0, [pc, #72]	; (8001018 <main+0x1fc>)
 8000fd0:	f7ff fed2 	bl	8000d78 <lcd_print>
	  			lcd_position(&hi2c1,7,1);
 8000fd4:	2201      	movs	r2, #1
 8000fd6:	2107      	movs	r1, #7
 8000fd8:	480f      	ldr	r0, [pc, #60]	; (8001018 <main+0x1fc>)
 8000fda:	f7ff fef6 	bl	8000dca <lcd_position>
	  			lcd_print(&hi2c1,&buf[10]);
 8000fde:	f107 030c 	add.w	r3, r7, #12
 8000fe2:	330a      	adds	r3, #10
 8000fe4:	4619      	mov	r1, r3
 8000fe6:	480c      	ldr	r0, [pc, #48]	; (8001018 <main+0x1fc>)
 8000fe8:	f7ff fec6 	bl	8000d78 <lcd_print>

	  		}
	  		}
	  		HAL_UART_Transmit(&huart2, buf, strlen((char*)buf), HAL_MAX_DELAY);
 8000fec:	f107 030c 	add.w	r3, r7, #12
 8000ff0:	4618      	mov	r0, r3
 8000ff2:	f7ff f8c3 	bl	800017c <strlen>
 8000ff6:	4603      	mov	r3, r0
 8000ff8:	b29a      	uxth	r2, r3
 8000ffa:	f107 010c 	add.w	r1, r7, #12
 8000ffe:	f04f 33ff 	mov.w	r3, #4294967295
 8001002:	4811      	ldr	r0, [pc, #68]	; (8001048 <main+0x22c>)
 8001004:	f002 fbc5 	bl	8003792 <HAL_UART_Transmit>
	  		HAL_Delay(1000);
 8001008:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800100c:	f000 fa0e 	bl	800142c <HAL_Delay>
	  	  	buf[0] = CAPTEUR_CMD_MSB;
 8001010:	e71a      	b.n	8000e48 <main+0x2c>
 8001012:	bf00      	nop
 8001014:	200000e0 	.word	0x200000e0
 8001018:	2000008c 	.word	0x2000008c
 800101c:	08004484 	.word	0x08004484
 8001020:	08004494 	.word	0x08004494
 8001024:	477fff00 	.word	0x477fff00
 8001028:	432f0000 	.word	0x432f0000
 800102c:	42340000 	.word	0x42340000
 8001030:	42c80000 	.word	0x42c80000
 8001034:	439d8000 	.word	0x439d8000
 8001038:	42440000 	.word	0x42440000
 800103c:	080044a4 	.word	0x080044a4
 8001040:	080044b4 	.word	0x080044b4
 8001044:	080044bc 	.word	0x080044bc
 8001048:	200000e8 	.word	0x200000e8

0800104c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800104c:	b580      	push	{r7, lr}
 800104e:	b096      	sub	sp, #88	; 0x58
 8001050:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001052:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001056:	2234      	movs	r2, #52	; 0x34
 8001058:	2100      	movs	r1, #0
 800105a:	4618      	mov	r0, r3
 800105c:	f002 fd84 	bl	8003b68 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001060:	f107 0310 	add.w	r3, r7, #16
 8001064:	2200      	movs	r2, #0
 8001066:	601a      	str	r2, [r3, #0]
 8001068:	605a      	str	r2, [r3, #4]
 800106a:	609a      	str	r2, [r3, #8]
 800106c:	60da      	str	r2, [r3, #12]
 800106e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001070:	1d3b      	adds	r3, r7, #4
 8001072:	2200      	movs	r2, #0
 8001074:	601a      	str	r2, [r3, #0]
 8001076:	605a      	str	r2, [r3, #4]
 8001078:	609a      	str	r2, [r3, #8]


  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800107a:	4b1d      	ldr	r3, [pc, #116]	; (80010f0 <SystemClock_Config+0xa4>)
 800107c:	681b      	ldr	r3, [r3, #0]
 800107e:	f423 53c0 	bic.w	r3, r3, #6144	; 0x1800
 8001082:	4a1b      	ldr	r2, [pc, #108]	; (80010f0 <SystemClock_Config+0xa4>)
 8001084:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001088:	6013      	str	r3, [r2, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800108a:	2302      	movs	r3, #2
 800108c:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800108e:	2301      	movs	r3, #1
 8001090:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001092:	2310      	movs	r3, #16
 8001094:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001096:	2302      	movs	r3, #2
 8001098:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800109a:	2300      	movs	r3, #0
 800109c:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 800109e:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 80010a2:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLDIV = RCC_PLL_DIV3;
 80010a4:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 80010a8:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80010aa:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80010ae:	4618      	mov	r0, r3
 80010b0:	f001 fd2c 	bl	8002b0c <HAL_RCC_OscConfig>
 80010b4:	4603      	mov	r3, r0
 80010b6:	2b00      	cmp	r3, #0
 80010b8:	d001      	beq.n	80010be <SystemClock_Config+0x72>
  {
    Error_Handler();
 80010ba:	f000 f81b 	bl	80010f4 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80010be:	230f      	movs	r3, #15
 80010c0:	613b      	str	r3, [r7, #16]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80010c2:	2303      	movs	r3, #3
 80010c4:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80010c6:	2300      	movs	r3, #0
 80010c8:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80010ca:	2300      	movs	r3, #0
 80010cc:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80010ce:	2300      	movs	r3, #0
 80010d0:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80010d2:	f107 0310 	add.w	r3, r7, #16
 80010d6:	2101      	movs	r1, #1
 80010d8:	4618      	mov	r0, r3
 80010da:	f002 f847 	bl	800316c <HAL_RCC_ClockConfig>
 80010de:	4603      	mov	r3, r0
 80010e0:	2b00      	cmp	r3, #0
 80010e2:	d001      	beq.n	80010e8 <SystemClock_Config+0x9c>
  {
    Error_Handler();
 80010e4:	f000 f806 	bl	80010f4 <Error_Handler>
  }
}
 80010e8:	bf00      	nop
 80010ea:	3758      	adds	r7, #88	; 0x58
 80010ec:	46bd      	mov	sp, r7
 80010ee:	bd80      	pop	{r7, pc}
 80010f0:	40007000 	.word	0x40007000

080010f4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80010f4:	b480      	push	{r7}
 80010f6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80010f8:	b672      	cpsid	i
}
 80010fa:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80010fc:	e7fe      	b.n	80010fc <Error_Handler+0x8>
	...

08001100 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001100:	b580      	push	{r7, lr}
 8001102:	b084      	sub	sp, #16
 8001104:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_COMP_CLK_ENABLE();
 8001106:	4b15      	ldr	r3, [pc, #84]	; (800115c <HAL_MspInit+0x5c>)
 8001108:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800110a:	4a14      	ldr	r2, [pc, #80]	; (800115c <HAL_MspInit+0x5c>)
 800110c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8001110:	6253      	str	r3, [r2, #36]	; 0x24
 8001112:	4b12      	ldr	r3, [pc, #72]	; (800115c <HAL_MspInit+0x5c>)
 8001114:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001116:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800111a:	60fb      	str	r3, [r7, #12]
 800111c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800111e:	4b0f      	ldr	r3, [pc, #60]	; (800115c <HAL_MspInit+0x5c>)
 8001120:	6a1b      	ldr	r3, [r3, #32]
 8001122:	4a0e      	ldr	r2, [pc, #56]	; (800115c <HAL_MspInit+0x5c>)
 8001124:	f043 0301 	orr.w	r3, r3, #1
 8001128:	6213      	str	r3, [r2, #32]
 800112a:	4b0c      	ldr	r3, [pc, #48]	; (800115c <HAL_MspInit+0x5c>)
 800112c:	6a1b      	ldr	r3, [r3, #32]
 800112e:	f003 0301 	and.w	r3, r3, #1
 8001132:	60bb      	str	r3, [r7, #8]
 8001134:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001136:	4b09      	ldr	r3, [pc, #36]	; (800115c <HAL_MspInit+0x5c>)
 8001138:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800113a:	4a08      	ldr	r2, [pc, #32]	; (800115c <HAL_MspInit+0x5c>)
 800113c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001140:	6253      	str	r3, [r2, #36]	; 0x24
 8001142:	4b06      	ldr	r3, [pc, #24]	; (800115c <HAL_MspInit+0x5c>)
 8001144:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001146:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800114a:	607b      	str	r3, [r7, #4]
 800114c:	687b      	ldr	r3, [r7, #4]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 800114e:	2007      	movs	r0, #7
 8001150:	f000 fa3e 	bl	80015d0 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001154:	bf00      	nop
 8001156:	3710      	adds	r7, #16
 8001158:	46bd      	mov	sp, r7
 800115a:	bd80      	pop	{r7, pc}
 800115c:	40023800 	.word	0x40023800

08001160 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001160:	b480      	push	{r7}
 8001162:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001164:	e7fe      	b.n	8001164 <NMI_Handler+0x4>

08001166 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001166:	b480      	push	{r7}
 8001168:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800116a:	e7fe      	b.n	800116a <HardFault_Handler+0x4>

0800116c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800116c:	b480      	push	{r7}
 800116e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001170:	e7fe      	b.n	8001170 <MemManage_Handler+0x4>

08001172 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001172:	b480      	push	{r7}
 8001174:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001176:	e7fe      	b.n	8001176 <BusFault_Handler+0x4>

08001178 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001178:	b480      	push	{r7}
 800117a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800117c:	e7fe      	b.n	800117c <UsageFault_Handler+0x4>

0800117e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800117e:	b480      	push	{r7}
 8001180:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8001182:	bf00      	nop
 8001184:	46bd      	mov	sp, r7
 8001186:	bc80      	pop	{r7}
 8001188:	4770      	bx	lr

0800118a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800118a:	b480      	push	{r7}
 800118c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800118e:	bf00      	nop
 8001190:	46bd      	mov	sp, r7
 8001192:	bc80      	pop	{r7}
 8001194:	4770      	bx	lr

08001196 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001196:	b480      	push	{r7}
 8001198:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800119a:	bf00      	nop
 800119c:	46bd      	mov	sp, r7
 800119e:	bc80      	pop	{r7}
 80011a0:	4770      	bx	lr

080011a2 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80011a2:	b580      	push	{r7, lr}
 80011a4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80011a6:	f000 f925 	bl	80013f4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80011aa:	bf00      	nop
 80011ac:	bd80      	pop	{r7, pc}
	...

080011b0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80011b0:	b580      	push	{r7, lr}
 80011b2:	b086      	sub	sp, #24
 80011b4:	af00      	add	r7, sp, #0
 80011b6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80011b8:	4a14      	ldr	r2, [pc, #80]	; (800120c <_sbrk+0x5c>)
 80011ba:	4b15      	ldr	r3, [pc, #84]	; (8001210 <_sbrk+0x60>)
 80011bc:	1ad3      	subs	r3, r2, r3
 80011be:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80011c0:	697b      	ldr	r3, [r7, #20]
 80011c2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80011c4:	4b13      	ldr	r3, [pc, #76]	; (8001214 <_sbrk+0x64>)
 80011c6:	681b      	ldr	r3, [r3, #0]
 80011c8:	2b00      	cmp	r3, #0
 80011ca:	d102      	bne.n	80011d2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80011cc:	4b11      	ldr	r3, [pc, #68]	; (8001214 <_sbrk+0x64>)
 80011ce:	4a12      	ldr	r2, [pc, #72]	; (8001218 <_sbrk+0x68>)
 80011d0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80011d2:	4b10      	ldr	r3, [pc, #64]	; (8001214 <_sbrk+0x64>)
 80011d4:	681a      	ldr	r2, [r3, #0]
 80011d6:	687b      	ldr	r3, [r7, #4]
 80011d8:	4413      	add	r3, r2
 80011da:	693a      	ldr	r2, [r7, #16]
 80011dc:	429a      	cmp	r2, r3
 80011de:	d207      	bcs.n	80011f0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80011e0:	f002 fc98 	bl	8003b14 <__errno>
 80011e4:	4603      	mov	r3, r0
 80011e6:	220c      	movs	r2, #12
 80011e8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80011ea:	f04f 33ff 	mov.w	r3, #4294967295
 80011ee:	e009      	b.n	8001204 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80011f0:	4b08      	ldr	r3, [pc, #32]	; (8001214 <_sbrk+0x64>)
 80011f2:	681b      	ldr	r3, [r3, #0]
 80011f4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80011f6:	4b07      	ldr	r3, [pc, #28]	; (8001214 <_sbrk+0x64>)
 80011f8:	681a      	ldr	r2, [r3, #0]
 80011fa:	687b      	ldr	r3, [r7, #4]
 80011fc:	4413      	add	r3, r2
 80011fe:	4a05      	ldr	r2, [pc, #20]	; (8001214 <_sbrk+0x64>)
 8001200:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001202:	68fb      	ldr	r3, [r7, #12]
}
 8001204:	4618      	mov	r0, r3
 8001206:	3718      	adds	r7, #24
 8001208:	46bd      	mov	sp, r7
 800120a:	bd80      	pop	{r7, pc}
 800120c:	20014000 	.word	0x20014000
 8001210:	00000400 	.word	0x00000400
 8001214:	200000e4 	.word	0x200000e4
 8001218:	20000140 	.word	0x20000140

0800121c <SystemInit>:
  *         SystemCoreClock variable.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800121c:	b480      	push	{r7}
 800121e:	af00      	add	r7, sp, #0
    
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001220:	bf00      	nop
 8001222:	46bd      	mov	sp, r7
 8001224:	bc80      	pop	{r7}
 8001226:	4770      	bx	lr

08001228 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8001228:	b580      	push	{r7, lr}
 800122a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800122c:	4b11      	ldr	r3, [pc, #68]	; (8001274 <MX_USART2_UART_Init+0x4c>)
 800122e:	4a12      	ldr	r2, [pc, #72]	; (8001278 <MX_USART2_UART_Init+0x50>)
 8001230:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001232:	4b10      	ldr	r3, [pc, #64]	; (8001274 <MX_USART2_UART_Init+0x4c>)
 8001234:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001238:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800123a:	4b0e      	ldr	r3, [pc, #56]	; (8001274 <MX_USART2_UART_Init+0x4c>)
 800123c:	2200      	movs	r2, #0
 800123e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001240:	4b0c      	ldr	r3, [pc, #48]	; (8001274 <MX_USART2_UART_Init+0x4c>)
 8001242:	2200      	movs	r2, #0
 8001244:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001246:	4b0b      	ldr	r3, [pc, #44]	; (8001274 <MX_USART2_UART_Init+0x4c>)
 8001248:	2200      	movs	r2, #0
 800124a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800124c:	4b09      	ldr	r3, [pc, #36]	; (8001274 <MX_USART2_UART_Init+0x4c>)
 800124e:	220c      	movs	r2, #12
 8001250:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001252:	4b08      	ldr	r3, [pc, #32]	; (8001274 <MX_USART2_UART_Init+0x4c>)
 8001254:	2200      	movs	r2, #0
 8001256:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001258:	4b06      	ldr	r3, [pc, #24]	; (8001274 <MX_USART2_UART_Init+0x4c>)
 800125a:	2200      	movs	r2, #0
 800125c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800125e:	4805      	ldr	r0, [pc, #20]	; (8001274 <MX_USART2_UART_Init+0x4c>)
 8001260:	f002 fa4a 	bl	80036f8 <HAL_UART_Init>
 8001264:	4603      	mov	r3, r0
 8001266:	2b00      	cmp	r3, #0
 8001268:	d001      	beq.n	800126e <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800126a:	f7ff ff43 	bl	80010f4 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800126e:	bf00      	nop
 8001270:	bd80      	pop	{r7, pc}
 8001272:	bf00      	nop
 8001274:	200000e8 	.word	0x200000e8
 8001278:	40004400 	.word	0x40004400

0800127c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 800127c:	b580      	push	{r7, lr}
 800127e:	b08a      	sub	sp, #40	; 0x28
 8001280:	af00      	add	r7, sp, #0
 8001282:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001284:	f107 0314 	add.w	r3, r7, #20
 8001288:	2200      	movs	r2, #0
 800128a:	601a      	str	r2, [r3, #0]
 800128c:	605a      	str	r2, [r3, #4]
 800128e:	609a      	str	r2, [r3, #8]
 8001290:	60da      	str	r2, [r3, #12]
 8001292:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	681b      	ldr	r3, [r3, #0]
 8001298:	4a17      	ldr	r2, [pc, #92]	; (80012f8 <HAL_UART_MspInit+0x7c>)
 800129a:	4293      	cmp	r3, r2
 800129c:	d127      	bne.n	80012ee <HAL_UART_MspInit+0x72>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800129e:	4b17      	ldr	r3, [pc, #92]	; (80012fc <HAL_UART_MspInit+0x80>)
 80012a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80012a2:	4a16      	ldr	r2, [pc, #88]	; (80012fc <HAL_UART_MspInit+0x80>)
 80012a4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80012a8:	6253      	str	r3, [r2, #36]	; 0x24
 80012aa:	4b14      	ldr	r3, [pc, #80]	; (80012fc <HAL_UART_MspInit+0x80>)
 80012ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80012ae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80012b2:	613b      	str	r3, [r7, #16]
 80012b4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80012b6:	4b11      	ldr	r3, [pc, #68]	; (80012fc <HAL_UART_MspInit+0x80>)
 80012b8:	69db      	ldr	r3, [r3, #28]
 80012ba:	4a10      	ldr	r2, [pc, #64]	; (80012fc <HAL_UART_MspInit+0x80>)
 80012bc:	f043 0301 	orr.w	r3, r3, #1
 80012c0:	61d3      	str	r3, [r2, #28]
 80012c2:	4b0e      	ldr	r3, [pc, #56]	; (80012fc <HAL_UART_MspInit+0x80>)
 80012c4:	69db      	ldr	r3, [r3, #28]
 80012c6:	f003 0301 	and.w	r3, r3, #1
 80012ca:	60fb      	str	r3, [r7, #12]
 80012cc:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80012ce:	230c      	movs	r3, #12
 80012d0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012d2:	2302      	movs	r3, #2
 80012d4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012d6:	2300      	movs	r3, #0
 80012d8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80012da:	2303      	movs	r3, #3
 80012dc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80012de:	2307      	movs	r3, #7
 80012e0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80012e2:	f107 0314 	add.w	r3, r7, #20
 80012e6:	4619      	mov	r1, r3
 80012e8:	4805      	ldr	r0, [pc, #20]	; (8001300 <HAL_UART_MspInit+0x84>)
 80012ea:	f000 f9a5 	bl	8001638 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 80012ee:	bf00      	nop
 80012f0:	3728      	adds	r7, #40	; 0x28
 80012f2:	46bd      	mov	sp, r7
 80012f4:	bd80      	pop	{r7, pc}
 80012f6:	bf00      	nop
 80012f8:	40004400 	.word	0x40004400
 80012fc:	40023800 	.word	0x40023800
 8001300:	40020000 	.word	0x40020000

08001304 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001304:	480c      	ldr	r0, [pc, #48]	; (8001338 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001306:	490d      	ldr	r1, [pc, #52]	; (800133c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001308:	4a0d      	ldr	r2, [pc, #52]	; (8001340 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800130a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800130c:	e002      	b.n	8001314 <LoopCopyDataInit>

0800130e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800130e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001310:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001312:	3304      	adds	r3, #4

08001314 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001314:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001316:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001318:	d3f9      	bcc.n	800130e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800131a:	4a0a      	ldr	r2, [pc, #40]	; (8001344 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 800131c:	4c0a      	ldr	r4, [pc, #40]	; (8001348 <LoopFillZerobss+0x22>)
  movs r3, #0
 800131e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001320:	e001      	b.n	8001326 <LoopFillZerobss>

08001322 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001322:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001324:	3204      	adds	r2, #4

08001326 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001326:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001328:	d3fb      	bcc.n	8001322 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800132a:	f7ff ff77 	bl	800121c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800132e:	f002 fbf7 	bl	8003b20 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001332:	f7ff fd73 	bl	8000e1c <main>
  bx lr
 8001336:	4770      	bx	lr
  ldr r0, =_sdata
 8001338:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800133c:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8001340:	0800452c 	.word	0x0800452c
  ldr r2, =_sbss
 8001344:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8001348:	20000140 	.word	0x20000140

0800134c <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800134c:	e7fe      	b.n	800134c <ADC1_IRQHandler>

0800134e <HAL_Init>:
  *        In the default implementation,Systick is used as source of time base.
  *        the tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800134e:	b580      	push	{r7, lr}
 8001350:	b082      	sub	sp, #8
 8001352:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001354:	2300      	movs	r3, #0
 8001356:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001358:	2003      	movs	r0, #3
 800135a:	f000 f939 	bl	80015d0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800135e:	2000      	movs	r0, #0
 8001360:	f000 f80e 	bl	8001380 <HAL_InitTick>
 8001364:	4603      	mov	r3, r0
 8001366:	2b00      	cmp	r3, #0
 8001368:	d002      	beq.n	8001370 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 800136a:	2301      	movs	r3, #1
 800136c:	71fb      	strb	r3, [r7, #7]
 800136e:	e001      	b.n	8001374 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001370:	f7ff fec6 	bl	8001100 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001374:	79fb      	ldrb	r3, [r7, #7]
}
 8001376:	4618      	mov	r0, r3
 8001378:	3708      	adds	r7, #8
 800137a:	46bd      	mov	sp, r7
 800137c:	bd80      	pop	{r7, pc}
	...

08001380 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001380:	b580      	push	{r7, lr}
 8001382:	b084      	sub	sp, #16
 8001384:	af00      	add	r7, sp, #0
 8001386:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001388:	2300      	movs	r3, #0
 800138a:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 800138c:	4b16      	ldr	r3, [pc, #88]	; (80013e8 <HAL_InitTick+0x68>)
 800138e:	681b      	ldr	r3, [r3, #0]
 8001390:	2b00      	cmp	r3, #0
 8001392:	d022      	beq.n	80013da <HAL_InitTick+0x5a>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8001394:	4b15      	ldr	r3, [pc, #84]	; (80013ec <HAL_InitTick+0x6c>)
 8001396:	681a      	ldr	r2, [r3, #0]
 8001398:	4b13      	ldr	r3, [pc, #76]	; (80013e8 <HAL_InitTick+0x68>)
 800139a:	681b      	ldr	r3, [r3, #0]
 800139c:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80013a0:	fbb1 f3f3 	udiv	r3, r1, r3
 80013a4:	fbb2 f3f3 	udiv	r3, r2, r3
 80013a8:	4618      	mov	r0, r3
 80013aa:	f000 f938 	bl	800161e <HAL_SYSTICK_Config>
 80013ae:	4603      	mov	r3, r0
 80013b0:	2b00      	cmp	r3, #0
 80013b2:	d10f      	bne.n	80013d4 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	2b0f      	cmp	r3, #15
 80013b8:	d809      	bhi.n	80013ce <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80013ba:	2200      	movs	r2, #0
 80013bc:	6879      	ldr	r1, [r7, #4]
 80013be:	f04f 30ff 	mov.w	r0, #4294967295
 80013c2:	f000 f910 	bl	80015e6 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80013c6:	4a0a      	ldr	r2, [pc, #40]	; (80013f0 <HAL_InitTick+0x70>)
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	6013      	str	r3, [r2, #0]
 80013cc:	e007      	b.n	80013de <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 80013ce:	2301      	movs	r3, #1
 80013d0:	73fb      	strb	r3, [r7, #15]
 80013d2:	e004      	b.n	80013de <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 80013d4:	2301      	movs	r3, #1
 80013d6:	73fb      	strb	r3, [r7, #15]
 80013d8:	e001      	b.n	80013de <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 80013da:	2301      	movs	r3, #1
 80013dc:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80013de:	7bfb      	ldrb	r3, [r7, #15]
}
 80013e0:	4618      	mov	r0, r3
 80013e2:	3710      	adds	r7, #16
 80013e4:	46bd      	mov	sp, r7
 80013e6:	bd80      	pop	{r7, pc}
 80013e8:	20000008 	.word	0x20000008
 80013ec:	20000000 	.word	0x20000000
 80013f0:	20000004 	.word	0x20000004

080013f4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80013f4:	b480      	push	{r7}
 80013f6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80013f8:	4b05      	ldr	r3, [pc, #20]	; (8001410 <HAL_IncTick+0x1c>)
 80013fa:	681a      	ldr	r2, [r3, #0]
 80013fc:	4b05      	ldr	r3, [pc, #20]	; (8001414 <HAL_IncTick+0x20>)
 80013fe:	681b      	ldr	r3, [r3, #0]
 8001400:	4413      	add	r3, r2
 8001402:	4a03      	ldr	r2, [pc, #12]	; (8001410 <HAL_IncTick+0x1c>)
 8001404:	6013      	str	r3, [r2, #0]
}
 8001406:	bf00      	nop
 8001408:	46bd      	mov	sp, r7
 800140a:	bc80      	pop	{r7}
 800140c:	4770      	bx	lr
 800140e:	bf00      	nop
 8001410:	2000012c 	.word	0x2000012c
 8001414:	20000008 	.word	0x20000008

08001418 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001418:	b480      	push	{r7}
 800141a:	af00      	add	r7, sp, #0
  return uwTick;
 800141c:	4b02      	ldr	r3, [pc, #8]	; (8001428 <HAL_GetTick+0x10>)
 800141e:	681b      	ldr	r3, [r3, #0]
}
 8001420:	4618      	mov	r0, r3
 8001422:	46bd      	mov	sp, r7
 8001424:	bc80      	pop	{r7}
 8001426:	4770      	bx	lr
 8001428:	2000012c 	.word	0x2000012c

0800142c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800142c:	b580      	push	{r7, lr}
 800142e:	b084      	sub	sp, #16
 8001430:	af00      	add	r7, sp, #0
 8001432:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001434:	f7ff fff0 	bl	8001418 <HAL_GetTick>
 8001438:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 800143e:	68fb      	ldr	r3, [r7, #12]
 8001440:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001444:	d004      	beq.n	8001450 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 8001446:	4b09      	ldr	r3, [pc, #36]	; (800146c <HAL_Delay+0x40>)
 8001448:	681b      	ldr	r3, [r3, #0]
 800144a:	68fa      	ldr	r2, [r7, #12]
 800144c:	4413      	add	r3, r2
 800144e:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001450:	bf00      	nop
 8001452:	f7ff ffe1 	bl	8001418 <HAL_GetTick>
 8001456:	4602      	mov	r2, r0
 8001458:	68bb      	ldr	r3, [r7, #8]
 800145a:	1ad3      	subs	r3, r2, r3
 800145c:	68fa      	ldr	r2, [r7, #12]
 800145e:	429a      	cmp	r2, r3
 8001460:	d8f7      	bhi.n	8001452 <HAL_Delay+0x26>
  {
  }
}
 8001462:	bf00      	nop
 8001464:	bf00      	nop
 8001466:	3710      	adds	r7, #16
 8001468:	46bd      	mov	sp, r7
 800146a:	bd80      	pop	{r7, pc}
 800146c:	20000008 	.word	0x20000008

08001470 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001470:	b480      	push	{r7}
 8001472:	b085      	sub	sp, #20
 8001474:	af00      	add	r7, sp, #0
 8001476:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	f003 0307 	and.w	r3, r3, #7
 800147e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001480:	4b0c      	ldr	r3, [pc, #48]	; (80014b4 <__NVIC_SetPriorityGrouping+0x44>)
 8001482:	68db      	ldr	r3, [r3, #12]
 8001484:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001486:	68ba      	ldr	r2, [r7, #8]
 8001488:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800148c:	4013      	ands	r3, r2
 800148e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001490:	68fb      	ldr	r3, [r7, #12]
 8001492:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001494:	68bb      	ldr	r3, [r7, #8]
 8001496:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001498:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800149c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80014a0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80014a2:	4a04      	ldr	r2, [pc, #16]	; (80014b4 <__NVIC_SetPriorityGrouping+0x44>)
 80014a4:	68bb      	ldr	r3, [r7, #8]
 80014a6:	60d3      	str	r3, [r2, #12]
}
 80014a8:	bf00      	nop
 80014aa:	3714      	adds	r7, #20
 80014ac:	46bd      	mov	sp, r7
 80014ae:	bc80      	pop	{r7}
 80014b0:	4770      	bx	lr
 80014b2:	bf00      	nop
 80014b4:	e000ed00 	.word	0xe000ed00

080014b8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80014b8:	b480      	push	{r7}
 80014ba:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80014bc:	4b04      	ldr	r3, [pc, #16]	; (80014d0 <__NVIC_GetPriorityGrouping+0x18>)
 80014be:	68db      	ldr	r3, [r3, #12]
 80014c0:	0a1b      	lsrs	r3, r3, #8
 80014c2:	f003 0307 	and.w	r3, r3, #7
}
 80014c6:	4618      	mov	r0, r3
 80014c8:	46bd      	mov	sp, r7
 80014ca:	bc80      	pop	{r7}
 80014cc:	4770      	bx	lr
 80014ce:	bf00      	nop
 80014d0:	e000ed00 	.word	0xe000ed00

080014d4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80014d4:	b480      	push	{r7}
 80014d6:	b083      	sub	sp, #12
 80014d8:	af00      	add	r7, sp, #0
 80014da:	4603      	mov	r3, r0
 80014dc:	6039      	str	r1, [r7, #0]
 80014de:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80014e0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014e4:	2b00      	cmp	r3, #0
 80014e6:	db0a      	blt.n	80014fe <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80014e8:	683b      	ldr	r3, [r7, #0]
 80014ea:	b2da      	uxtb	r2, r3
 80014ec:	490c      	ldr	r1, [pc, #48]	; (8001520 <__NVIC_SetPriority+0x4c>)
 80014ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014f2:	0112      	lsls	r2, r2, #4
 80014f4:	b2d2      	uxtb	r2, r2
 80014f6:	440b      	add	r3, r1
 80014f8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80014fc:	e00a      	b.n	8001514 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80014fe:	683b      	ldr	r3, [r7, #0]
 8001500:	b2da      	uxtb	r2, r3
 8001502:	4908      	ldr	r1, [pc, #32]	; (8001524 <__NVIC_SetPriority+0x50>)
 8001504:	79fb      	ldrb	r3, [r7, #7]
 8001506:	f003 030f 	and.w	r3, r3, #15
 800150a:	3b04      	subs	r3, #4
 800150c:	0112      	lsls	r2, r2, #4
 800150e:	b2d2      	uxtb	r2, r2
 8001510:	440b      	add	r3, r1
 8001512:	761a      	strb	r2, [r3, #24]
}
 8001514:	bf00      	nop
 8001516:	370c      	adds	r7, #12
 8001518:	46bd      	mov	sp, r7
 800151a:	bc80      	pop	{r7}
 800151c:	4770      	bx	lr
 800151e:	bf00      	nop
 8001520:	e000e100 	.word	0xe000e100
 8001524:	e000ed00 	.word	0xe000ed00

08001528 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001528:	b480      	push	{r7}
 800152a:	b089      	sub	sp, #36	; 0x24
 800152c:	af00      	add	r7, sp, #0
 800152e:	60f8      	str	r0, [r7, #12]
 8001530:	60b9      	str	r1, [r7, #8]
 8001532:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001534:	68fb      	ldr	r3, [r7, #12]
 8001536:	f003 0307 	and.w	r3, r3, #7
 800153a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800153c:	69fb      	ldr	r3, [r7, #28]
 800153e:	f1c3 0307 	rsb	r3, r3, #7
 8001542:	2b04      	cmp	r3, #4
 8001544:	bf28      	it	cs
 8001546:	2304      	movcs	r3, #4
 8001548:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800154a:	69fb      	ldr	r3, [r7, #28]
 800154c:	3304      	adds	r3, #4
 800154e:	2b06      	cmp	r3, #6
 8001550:	d902      	bls.n	8001558 <NVIC_EncodePriority+0x30>
 8001552:	69fb      	ldr	r3, [r7, #28]
 8001554:	3b03      	subs	r3, #3
 8001556:	e000      	b.n	800155a <NVIC_EncodePriority+0x32>
 8001558:	2300      	movs	r3, #0
 800155a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800155c:	f04f 32ff 	mov.w	r2, #4294967295
 8001560:	69bb      	ldr	r3, [r7, #24]
 8001562:	fa02 f303 	lsl.w	r3, r2, r3
 8001566:	43da      	mvns	r2, r3
 8001568:	68bb      	ldr	r3, [r7, #8]
 800156a:	401a      	ands	r2, r3
 800156c:	697b      	ldr	r3, [r7, #20]
 800156e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001570:	f04f 31ff 	mov.w	r1, #4294967295
 8001574:	697b      	ldr	r3, [r7, #20]
 8001576:	fa01 f303 	lsl.w	r3, r1, r3
 800157a:	43d9      	mvns	r1, r3
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001580:	4313      	orrs	r3, r2
         );
}
 8001582:	4618      	mov	r0, r3
 8001584:	3724      	adds	r7, #36	; 0x24
 8001586:	46bd      	mov	sp, r7
 8001588:	bc80      	pop	{r7}
 800158a:	4770      	bx	lr

0800158c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800158c:	b580      	push	{r7, lr}
 800158e:	b082      	sub	sp, #8
 8001590:	af00      	add	r7, sp, #0
 8001592:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	3b01      	subs	r3, #1
 8001598:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800159c:	d301      	bcc.n	80015a2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800159e:	2301      	movs	r3, #1
 80015a0:	e00f      	b.n	80015c2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80015a2:	4a0a      	ldr	r2, [pc, #40]	; (80015cc <SysTick_Config+0x40>)
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	3b01      	subs	r3, #1
 80015a8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80015aa:	210f      	movs	r1, #15
 80015ac:	f04f 30ff 	mov.w	r0, #4294967295
 80015b0:	f7ff ff90 	bl	80014d4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80015b4:	4b05      	ldr	r3, [pc, #20]	; (80015cc <SysTick_Config+0x40>)
 80015b6:	2200      	movs	r2, #0
 80015b8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80015ba:	4b04      	ldr	r3, [pc, #16]	; (80015cc <SysTick_Config+0x40>)
 80015bc:	2207      	movs	r2, #7
 80015be:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80015c0:	2300      	movs	r3, #0
}
 80015c2:	4618      	mov	r0, r3
 80015c4:	3708      	adds	r7, #8
 80015c6:	46bd      	mov	sp, r7
 80015c8:	bd80      	pop	{r7, pc}
 80015ca:	bf00      	nop
 80015cc:	e000e010 	.word	0xe000e010

080015d0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80015d0:	b580      	push	{r7, lr}
 80015d2:	b082      	sub	sp, #8
 80015d4:	af00      	add	r7, sp, #0
 80015d6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80015d8:	6878      	ldr	r0, [r7, #4]
 80015da:	f7ff ff49 	bl	8001470 <__NVIC_SetPriorityGrouping>
}
 80015de:	bf00      	nop
 80015e0:	3708      	adds	r7, #8
 80015e2:	46bd      	mov	sp, r7
 80015e4:	bd80      	pop	{r7, pc}

080015e6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80015e6:	b580      	push	{r7, lr}
 80015e8:	b086      	sub	sp, #24
 80015ea:	af00      	add	r7, sp, #0
 80015ec:	4603      	mov	r3, r0
 80015ee:	60b9      	str	r1, [r7, #8]
 80015f0:	607a      	str	r2, [r7, #4]
 80015f2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80015f4:	2300      	movs	r3, #0
 80015f6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80015f8:	f7ff ff5e 	bl	80014b8 <__NVIC_GetPriorityGrouping>
 80015fc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80015fe:	687a      	ldr	r2, [r7, #4]
 8001600:	68b9      	ldr	r1, [r7, #8]
 8001602:	6978      	ldr	r0, [r7, #20]
 8001604:	f7ff ff90 	bl	8001528 <NVIC_EncodePriority>
 8001608:	4602      	mov	r2, r0
 800160a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800160e:	4611      	mov	r1, r2
 8001610:	4618      	mov	r0, r3
 8001612:	f7ff ff5f 	bl	80014d4 <__NVIC_SetPriority>
}
 8001616:	bf00      	nop
 8001618:	3718      	adds	r7, #24
 800161a:	46bd      	mov	sp, r7
 800161c:	bd80      	pop	{r7, pc}

0800161e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800161e:	b580      	push	{r7, lr}
 8001620:	b082      	sub	sp, #8
 8001622:	af00      	add	r7, sp, #0
 8001624:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001626:	6878      	ldr	r0, [r7, #4]
 8001628:	f7ff ffb0 	bl	800158c <SysTick_Config>
 800162c:	4603      	mov	r3, r0
}
 800162e:	4618      	mov	r0, r3
 8001630:	3708      	adds	r7, #8
 8001632:	46bd      	mov	sp, r7
 8001634:	bd80      	pop	{r7, pc}
	...

08001638 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001638:	b480      	push	{r7}
 800163a:	b087      	sub	sp, #28
 800163c:	af00      	add	r7, sp, #0
 800163e:	6078      	str	r0, [r7, #4]
 8001640:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8001642:	2300      	movs	r3, #0
 8001644:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8001646:	2300      	movs	r3, #0
 8001648:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00;
 800164a:	2300      	movs	r3, #0
 800164c:	613b      	str	r3, [r7, #16]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0)
 800164e:	e160      	b.n	8001912 <HAL_GPIO_Init+0x2da>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 8001650:	683b      	ldr	r3, [r7, #0]
 8001652:	681a      	ldr	r2, [r3, #0]
 8001654:	2101      	movs	r1, #1
 8001656:	697b      	ldr	r3, [r7, #20]
 8001658:	fa01 f303 	lsl.w	r3, r1, r3
 800165c:	4013      	ands	r3, r2
 800165e:	60fb      	str	r3, [r7, #12]

    if (iocurrent)
 8001660:	68fb      	ldr	r3, [r7, #12]
 8001662:	2b00      	cmp	r3, #0
 8001664:	f000 8152 	beq.w	800190c <HAL_GPIO_Init+0x2d4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001668:	683b      	ldr	r3, [r7, #0]
 800166a:	685b      	ldr	r3, [r3, #4]
 800166c:	f003 0303 	and.w	r3, r3, #3
 8001670:	2b01      	cmp	r3, #1
 8001672:	d005      	beq.n	8001680 <HAL_GPIO_Init+0x48>
          ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001674:	683b      	ldr	r3, [r7, #0]
 8001676:	685b      	ldr	r3, [r3, #4]
 8001678:	f003 0303 	and.w	r3, r3, #3
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 800167c:	2b02      	cmp	r3, #2
 800167e:	d130      	bne.n	80016e2 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	689b      	ldr	r3, [r3, #8]
 8001684:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8001686:	697b      	ldr	r3, [r7, #20]
 8001688:	005b      	lsls	r3, r3, #1
 800168a:	2203      	movs	r2, #3
 800168c:	fa02 f303 	lsl.w	r3, r2, r3
 8001690:	43db      	mvns	r3, r3
 8001692:	693a      	ldr	r2, [r7, #16]
 8001694:	4013      	ands	r3, r2
 8001696:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, GPIO_Init->Speed << (position * 2));
 8001698:	683b      	ldr	r3, [r7, #0]
 800169a:	68da      	ldr	r2, [r3, #12]
 800169c:	697b      	ldr	r3, [r7, #20]
 800169e:	005b      	lsls	r3, r3, #1
 80016a0:	fa02 f303 	lsl.w	r3, r2, r3
 80016a4:	693a      	ldr	r2, [r7, #16]
 80016a6:	4313      	orrs	r3, r2
 80016a8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	693a      	ldr	r2, [r7, #16]
 80016ae:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	685b      	ldr	r3, [r3, #4]
 80016b4:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, GPIO_OTYPER_OT_0 << position) ;
 80016b6:	2201      	movs	r2, #1
 80016b8:	697b      	ldr	r3, [r7, #20]
 80016ba:	fa02 f303 	lsl.w	r3, r2, r3
 80016be:	43db      	mvns	r3, r3
 80016c0:	693a      	ldr	r2, [r7, #16]
 80016c2:	4013      	ands	r3, r2
 80016c4:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, ((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80016c6:	683b      	ldr	r3, [r7, #0]
 80016c8:	685b      	ldr	r3, [r3, #4]
 80016ca:	091b      	lsrs	r3, r3, #4
 80016cc:	f003 0201 	and.w	r2, r3, #1
 80016d0:	697b      	ldr	r3, [r7, #20]
 80016d2:	fa02 f303 	lsl.w	r3, r2, r3
 80016d6:	693a      	ldr	r2, [r7, #16]
 80016d8:	4313      	orrs	r3, r2
 80016da:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	693a      	ldr	r2, [r7, #16]
 80016e0:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80016e2:	683b      	ldr	r3, [r7, #0]
 80016e4:	685b      	ldr	r3, [r3, #4]
 80016e6:	f003 0303 	and.w	r3, r3, #3
 80016ea:	2b03      	cmp	r3, #3
 80016ec:	d017      	beq.n	800171e <HAL_GPIO_Init+0xe6>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	68db      	ldr	r3, [r3, #12]
 80016f2:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, GPIO_PUPDR_PUPDR0 << (position * 2));
 80016f4:	697b      	ldr	r3, [r7, #20]
 80016f6:	005b      	lsls	r3, r3, #1
 80016f8:	2203      	movs	r2, #3
 80016fa:	fa02 f303 	lsl.w	r3, r2, r3
 80016fe:	43db      	mvns	r3, r3
 8001700:	693a      	ldr	r2, [r7, #16]
 8001702:	4013      	ands	r3, r2
 8001704:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_Init->Pull) << (position * 2));
 8001706:	683b      	ldr	r3, [r7, #0]
 8001708:	689a      	ldr	r2, [r3, #8]
 800170a:	697b      	ldr	r3, [r7, #20]
 800170c:	005b      	lsls	r3, r3, #1
 800170e:	fa02 f303 	lsl.w	r3, r2, r3
 8001712:	693a      	ldr	r2, [r7, #16]
 8001714:	4313      	orrs	r3, r2
 8001716:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	693a      	ldr	r2, [r7, #16]
 800171c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800171e:	683b      	ldr	r3, [r7, #0]
 8001720:	685b      	ldr	r3, [r3, #4]
 8001722:	f003 0303 	and.w	r3, r3, #3
 8001726:	2b02      	cmp	r3, #2
 8001728:	d123      	bne.n	8001772 <HAL_GPIO_Init+0x13a>
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        /* Identify AFRL or AFRH register based on IO position*/
        temp = GPIOx->AFR[position >> 3];
 800172a:	697b      	ldr	r3, [r7, #20]
 800172c:	08da      	lsrs	r2, r3, #3
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	3208      	adds	r2, #8
 8001732:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001736:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, 0xFU << ((uint32_t)(position & 0x07U) * 4));
 8001738:	697b      	ldr	r3, [r7, #20]
 800173a:	f003 0307 	and.w	r3, r3, #7
 800173e:	009b      	lsls	r3, r3, #2
 8001740:	220f      	movs	r2, #15
 8001742:	fa02 f303 	lsl.w	r3, r2, r3
 8001746:	43db      	mvns	r3, r3
 8001748:	693a      	ldr	r2, [r7, #16]
 800174a:	4013      	ands	r3, r2
 800174c:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4));
 800174e:	683b      	ldr	r3, [r7, #0]
 8001750:	691a      	ldr	r2, [r3, #16]
 8001752:	697b      	ldr	r3, [r7, #20]
 8001754:	f003 0307 	and.w	r3, r3, #7
 8001758:	009b      	lsls	r3, r3, #2
 800175a:	fa02 f303 	lsl.w	r3, r2, r3
 800175e:	693a      	ldr	r2, [r7, #16]
 8001760:	4313      	orrs	r3, r2
 8001762:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3] = temp;
 8001764:	697b      	ldr	r3, [r7, #20]
 8001766:	08da      	lsrs	r2, r3, #3
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	3208      	adds	r2, #8
 800176c:	6939      	ldr	r1, [r7, #16]
 800176e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	681b      	ldr	r3, [r3, #0]
 8001776:	613b      	str	r3, [r7, #16]
      CLEAR_BIT(temp, GPIO_MODER_MODER0 << (position * 2));
 8001778:	697b      	ldr	r3, [r7, #20]
 800177a:	005b      	lsls	r3, r3, #1
 800177c:	2203      	movs	r2, #3
 800177e:	fa02 f303 	lsl.w	r3, r2, r3
 8001782:	43db      	mvns	r3, r3
 8001784:	693a      	ldr	r2, [r7, #16]
 8001786:	4013      	ands	r3, r2
 8001788:	613b      	str	r3, [r7, #16]
      SET_BIT(temp, (GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 800178a:	683b      	ldr	r3, [r7, #0]
 800178c:	685b      	ldr	r3, [r3, #4]
 800178e:	f003 0203 	and.w	r2, r3, #3
 8001792:	697b      	ldr	r3, [r7, #20]
 8001794:	005b      	lsls	r3, r3, #1
 8001796:	fa02 f303 	lsl.w	r3, r2, r3
 800179a:	693a      	ldr	r2, [r7, #16]
 800179c:	4313      	orrs	r3, r2
 800179e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	693a      	ldr	r2, [r7, #16]
 80017a4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80017a6:	683b      	ldr	r3, [r7, #0]
 80017a8:	685b      	ldr	r3, [r3, #4]
 80017aa:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80017ae:	2b00      	cmp	r3, #0
 80017b0:	f000 80ac 	beq.w	800190c <HAL_GPIO_Init+0x2d4>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80017b4:	4b5e      	ldr	r3, [pc, #376]	; (8001930 <HAL_GPIO_Init+0x2f8>)
 80017b6:	6a1b      	ldr	r3, [r3, #32]
 80017b8:	4a5d      	ldr	r2, [pc, #372]	; (8001930 <HAL_GPIO_Init+0x2f8>)
 80017ba:	f043 0301 	orr.w	r3, r3, #1
 80017be:	6213      	str	r3, [r2, #32]
 80017c0:	4b5b      	ldr	r3, [pc, #364]	; (8001930 <HAL_GPIO_Init+0x2f8>)
 80017c2:	6a1b      	ldr	r3, [r3, #32]
 80017c4:	f003 0301 	and.w	r3, r3, #1
 80017c8:	60bb      	str	r3, [r7, #8]
 80017ca:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2];
 80017cc:	4a59      	ldr	r2, [pc, #356]	; (8001934 <HAL_GPIO_Init+0x2fc>)
 80017ce:	697b      	ldr	r3, [r7, #20]
 80017d0:	089b      	lsrs	r3, r3, #2
 80017d2:	3302      	adds	r3, #2
 80017d4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80017d8:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (0x0FU) << (4 * (position & 0x03)));
 80017da:	697b      	ldr	r3, [r7, #20]
 80017dc:	f003 0303 	and.w	r3, r3, #3
 80017e0:	009b      	lsls	r3, r3, #2
 80017e2:	220f      	movs	r2, #15
 80017e4:	fa02 f303 	lsl.w	r3, r2, r3
 80017e8:	43db      	mvns	r3, r3
 80017ea:	693a      	ldr	r2, [r7, #16]
 80017ec:	4013      	ands	r3, r2
 80017ee:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	4a51      	ldr	r2, [pc, #324]	; (8001938 <HAL_GPIO_Init+0x300>)
 80017f4:	4293      	cmp	r3, r2
 80017f6:	d025      	beq.n	8001844 <HAL_GPIO_Init+0x20c>
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	4a50      	ldr	r2, [pc, #320]	; (800193c <HAL_GPIO_Init+0x304>)
 80017fc:	4293      	cmp	r3, r2
 80017fe:	d01f      	beq.n	8001840 <HAL_GPIO_Init+0x208>
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	4a4f      	ldr	r2, [pc, #316]	; (8001940 <HAL_GPIO_Init+0x308>)
 8001804:	4293      	cmp	r3, r2
 8001806:	d019      	beq.n	800183c <HAL_GPIO_Init+0x204>
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	4a4e      	ldr	r2, [pc, #312]	; (8001944 <HAL_GPIO_Init+0x30c>)
 800180c:	4293      	cmp	r3, r2
 800180e:	d013      	beq.n	8001838 <HAL_GPIO_Init+0x200>
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	4a4d      	ldr	r2, [pc, #308]	; (8001948 <HAL_GPIO_Init+0x310>)
 8001814:	4293      	cmp	r3, r2
 8001816:	d00d      	beq.n	8001834 <HAL_GPIO_Init+0x1fc>
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	4a4c      	ldr	r2, [pc, #304]	; (800194c <HAL_GPIO_Init+0x314>)
 800181c:	4293      	cmp	r3, r2
 800181e:	d007      	beq.n	8001830 <HAL_GPIO_Init+0x1f8>
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	4a4b      	ldr	r2, [pc, #300]	; (8001950 <HAL_GPIO_Init+0x318>)
 8001824:	4293      	cmp	r3, r2
 8001826:	d101      	bne.n	800182c <HAL_GPIO_Init+0x1f4>
 8001828:	2306      	movs	r3, #6
 800182a:	e00c      	b.n	8001846 <HAL_GPIO_Init+0x20e>
 800182c:	2307      	movs	r3, #7
 800182e:	e00a      	b.n	8001846 <HAL_GPIO_Init+0x20e>
 8001830:	2305      	movs	r3, #5
 8001832:	e008      	b.n	8001846 <HAL_GPIO_Init+0x20e>
 8001834:	2304      	movs	r3, #4
 8001836:	e006      	b.n	8001846 <HAL_GPIO_Init+0x20e>
 8001838:	2303      	movs	r3, #3
 800183a:	e004      	b.n	8001846 <HAL_GPIO_Init+0x20e>
 800183c:	2302      	movs	r3, #2
 800183e:	e002      	b.n	8001846 <HAL_GPIO_Init+0x20e>
 8001840:	2301      	movs	r3, #1
 8001842:	e000      	b.n	8001846 <HAL_GPIO_Init+0x20e>
 8001844:	2300      	movs	r3, #0
 8001846:	697a      	ldr	r2, [r7, #20]
 8001848:	f002 0203 	and.w	r2, r2, #3
 800184c:	0092      	lsls	r2, r2, #2
 800184e:	4093      	lsls	r3, r2
 8001850:	693a      	ldr	r2, [r7, #16]
 8001852:	4313      	orrs	r3, r2
 8001854:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2] = temp;
 8001856:	4937      	ldr	r1, [pc, #220]	; (8001934 <HAL_GPIO_Init+0x2fc>)
 8001858:	697b      	ldr	r3, [r7, #20]
 800185a:	089b      	lsrs	r3, r3, #2
 800185c:	3302      	adds	r3, #2
 800185e:	693a      	ldr	r2, [r7, #16]
 8001860:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001864:	4b3b      	ldr	r3, [pc, #236]	; (8001954 <HAL_GPIO_Init+0x31c>)
 8001866:	681b      	ldr	r3, [r3, #0]
 8001868:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 800186a:	68fb      	ldr	r3, [r7, #12]
 800186c:	43db      	mvns	r3, r3
 800186e:	693a      	ldr	r2, [r7, #16]
 8001870:	4013      	ands	r3, r2
 8001872:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001874:	683b      	ldr	r3, [r7, #0]
 8001876:	685b      	ldr	r3, [r3, #4]
 8001878:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800187c:	2b00      	cmp	r3, #0
 800187e:	d003      	beq.n	8001888 <HAL_GPIO_Init+0x250>
        {
          SET_BIT(temp, iocurrent);
 8001880:	693a      	ldr	r2, [r7, #16]
 8001882:	68fb      	ldr	r3, [r7, #12]
 8001884:	4313      	orrs	r3, r2
 8001886:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8001888:	4a32      	ldr	r2, [pc, #200]	; (8001954 <HAL_GPIO_Init+0x31c>)
 800188a:	693b      	ldr	r3, [r7, #16]
 800188c:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 800188e:	4b31      	ldr	r3, [pc, #196]	; (8001954 <HAL_GPIO_Init+0x31c>)
 8001890:	685b      	ldr	r3, [r3, #4]
 8001892:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 8001894:	68fb      	ldr	r3, [r7, #12]
 8001896:	43db      	mvns	r3, r3
 8001898:	693a      	ldr	r2, [r7, #16]
 800189a:	4013      	ands	r3, r2
 800189c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800189e:	683b      	ldr	r3, [r7, #0]
 80018a0:	685b      	ldr	r3, [r3, #4]
 80018a2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80018a6:	2b00      	cmp	r3, #0
 80018a8:	d003      	beq.n	80018b2 <HAL_GPIO_Init+0x27a>
        {
          SET_BIT(temp, iocurrent);
 80018aa:	693a      	ldr	r2, [r7, #16]
 80018ac:	68fb      	ldr	r3, [r7, #12]
 80018ae:	4313      	orrs	r3, r2
 80018b0:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 80018b2:	4a28      	ldr	r2, [pc, #160]	; (8001954 <HAL_GPIO_Init+0x31c>)
 80018b4:	693b      	ldr	r3, [r7, #16]
 80018b6:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80018b8:	4b26      	ldr	r3, [pc, #152]	; (8001954 <HAL_GPIO_Init+0x31c>)
 80018ba:	689b      	ldr	r3, [r3, #8]
 80018bc:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 80018be:	68fb      	ldr	r3, [r7, #12]
 80018c0:	43db      	mvns	r3, r3
 80018c2:	693a      	ldr	r2, [r7, #16]
 80018c4:	4013      	ands	r3, r2
 80018c6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80018c8:	683b      	ldr	r3, [r7, #0]
 80018ca:	685b      	ldr	r3, [r3, #4]
 80018cc:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80018d0:	2b00      	cmp	r3, #0
 80018d2:	d003      	beq.n	80018dc <HAL_GPIO_Init+0x2a4>
        {
          SET_BIT(temp, iocurrent);
 80018d4:	693a      	ldr	r2, [r7, #16]
 80018d6:	68fb      	ldr	r3, [r7, #12]
 80018d8:	4313      	orrs	r3, r2
 80018da:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 80018dc:	4a1d      	ldr	r2, [pc, #116]	; (8001954 <HAL_GPIO_Init+0x31c>)
 80018de:	693b      	ldr	r3, [r7, #16]
 80018e0:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80018e2:	4b1c      	ldr	r3, [pc, #112]	; (8001954 <HAL_GPIO_Init+0x31c>)
 80018e4:	68db      	ldr	r3, [r3, #12]
 80018e6:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 80018e8:	68fb      	ldr	r3, [r7, #12]
 80018ea:	43db      	mvns	r3, r3
 80018ec:	693a      	ldr	r2, [r7, #16]
 80018ee:	4013      	ands	r3, r2
 80018f0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80018f2:	683b      	ldr	r3, [r7, #0]
 80018f4:	685b      	ldr	r3, [r3, #4]
 80018f6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80018fa:	2b00      	cmp	r3, #0
 80018fc:	d003      	beq.n	8001906 <HAL_GPIO_Init+0x2ce>
        {
          SET_BIT(temp, iocurrent);
 80018fe:	693a      	ldr	r2, [r7, #16]
 8001900:	68fb      	ldr	r3, [r7, #12]
 8001902:	4313      	orrs	r3, r2
 8001904:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8001906:	4a13      	ldr	r2, [pc, #76]	; (8001954 <HAL_GPIO_Init+0x31c>)
 8001908:	693b      	ldr	r3, [r7, #16]
 800190a:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 800190c:	697b      	ldr	r3, [r7, #20]
 800190e:	3301      	adds	r3, #1
 8001910:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0)
 8001912:	683b      	ldr	r3, [r7, #0]
 8001914:	681a      	ldr	r2, [r3, #0]
 8001916:	697b      	ldr	r3, [r7, #20]
 8001918:	fa22 f303 	lsr.w	r3, r2, r3
 800191c:	2b00      	cmp	r3, #0
 800191e:	f47f ae97 	bne.w	8001650 <HAL_GPIO_Init+0x18>
  }
}
 8001922:	bf00      	nop
 8001924:	bf00      	nop
 8001926:	371c      	adds	r7, #28
 8001928:	46bd      	mov	sp, r7
 800192a:	bc80      	pop	{r7}
 800192c:	4770      	bx	lr
 800192e:	bf00      	nop
 8001930:	40023800 	.word	0x40023800
 8001934:	40010000 	.word	0x40010000
 8001938:	40020000 	.word	0x40020000
 800193c:	40020400 	.word	0x40020400
 8001940:	40020800 	.word	0x40020800
 8001944:	40020c00 	.word	0x40020c00
 8001948:	40021000 	.word	0x40021000
 800194c:	40021400 	.word	0x40021400
 8001950:	40021800 	.word	0x40021800
 8001954:	40010400 	.word	0x40010400

08001958 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001958:	b480      	push	{r7}
 800195a:	b083      	sub	sp, #12
 800195c:	af00      	add	r7, sp, #0
 800195e:	6078      	str	r0, [r7, #4]
 8001960:	460b      	mov	r3, r1
 8001962:	807b      	strh	r3, [r7, #2]
 8001964:	4613      	mov	r3, r2
 8001966:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001968:	787b      	ldrb	r3, [r7, #1]
 800196a:	2b00      	cmp	r3, #0
 800196c:	d003      	beq.n	8001976 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800196e:	887a      	ldrh	r2, [r7, #2]
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16 ;
  }
}
 8001974:	e003      	b.n	800197e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16 ;
 8001976:	887b      	ldrh	r3, [r7, #2]
 8001978:	041a      	lsls	r2, r3, #16
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	619a      	str	r2, [r3, #24]
}
 800197e:	bf00      	nop
 8001980:	370c      	adds	r7, #12
 8001982:	46bd      	mov	sp, r7
 8001984:	bc80      	pop	{r7}
 8001986:	4770      	bx	lr

08001988 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001988:	b580      	push	{r7, lr}
 800198a:	b084      	sub	sp, #16
 800198c:	af00      	add	r7, sp, #0
 800198e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	2b00      	cmp	r3, #0
 8001994:	d101      	bne.n	800199a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001996:	2301      	movs	r3, #1
 8001998:	e12b      	b.n	8001bf2 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80019a0:	b2db      	uxtb	r3, r3
 80019a2:	2b00      	cmp	r3, #0
 80019a4:	d106      	bne.n	80019b4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	2200      	movs	r2, #0
 80019aa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80019ae:	6878      	ldr	r0, [r7, #4]
 80019b0:	f7ff f8a8 	bl	8000b04 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	2224      	movs	r2, #36	; 0x24
 80019b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	681b      	ldr	r3, [r3, #0]
 80019c0:	681a      	ldr	r2, [r3, #0]
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	681b      	ldr	r3, [r3, #0]
 80019c6:	f022 0201 	bic.w	r2, r2, #1
 80019ca:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	681b      	ldr	r3, [r3, #0]
 80019d0:	681a      	ldr	r2, [r3, #0]
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	681b      	ldr	r3, [r3, #0]
 80019d6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80019da:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	681b      	ldr	r3, [r3, #0]
 80019e0:	681a      	ldr	r2, [r3, #0]
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	681b      	ldr	r3, [r3, #0]
 80019e6:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80019ea:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80019ec:	f001 fdfc 	bl	80035e8 <HAL_RCC_GetPCLK1Freq>
 80019f0:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	685b      	ldr	r3, [r3, #4]
 80019f6:	4a81      	ldr	r2, [pc, #516]	; (8001bfc <HAL_I2C_Init+0x274>)
 80019f8:	4293      	cmp	r3, r2
 80019fa:	d807      	bhi.n	8001a0c <HAL_I2C_Init+0x84>
 80019fc:	68fb      	ldr	r3, [r7, #12]
 80019fe:	4a80      	ldr	r2, [pc, #512]	; (8001c00 <HAL_I2C_Init+0x278>)
 8001a00:	4293      	cmp	r3, r2
 8001a02:	bf94      	ite	ls
 8001a04:	2301      	movls	r3, #1
 8001a06:	2300      	movhi	r3, #0
 8001a08:	b2db      	uxtb	r3, r3
 8001a0a:	e006      	b.n	8001a1a <HAL_I2C_Init+0x92>
 8001a0c:	68fb      	ldr	r3, [r7, #12]
 8001a0e:	4a7d      	ldr	r2, [pc, #500]	; (8001c04 <HAL_I2C_Init+0x27c>)
 8001a10:	4293      	cmp	r3, r2
 8001a12:	bf94      	ite	ls
 8001a14:	2301      	movls	r3, #1
 8001a16:	2300      	movhi	r3, #0
 8001a18:	b2db      	uxtb	r3, r3
 8001a1a:	2b00      	cmp	r3, #0
 8001a1c:	d001      	beq.n	8001a22 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8001a1e:	2301      	movs	r3, #1
 8001a20:	e0e7      	b.n	8001bf2 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8001a22:	68fb      	ldr	r3, [r7, #12]
 8001a24:	4a78      	ldr	r2, [pc, #480]	; (8001c08 <HAL_I2C_Init+0x280>)
 8001a26:	fba2 2303 	umull	r2, r3, r2, r3
 8001a2a:	0c9b      	lsrs	r3, r3, #18
 8001a2c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	681b      	ldr	r3, [r3, #0]
 8001a32:	685b      	ldr	r3, [r3, #4]
 8001a34:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	681b      	ldr	r3, [r3, #0]
 8001a3c:	68ba      	ldr	r2, [r7, #8]
 8001a3e:	430a      	orrs	r2, r1
 8001a40:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	681b      	ldr	r3, [r3, #0]
 8001a46:	6a1b      	ldr	r3, [r3, #32]
 8001a48:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	685b      	ldr	r3, [r3, #4]
 8001a50:	4a6a      	ldr	r2, [pc, #424]	; (8001bfc <HAL_I2C_Init+0x274>)
 8001a52:	4293      	cmp	r3, r2
 8001a54:	d802      	bhi.n	8001a5c <HAL_I2C_Init+0xd4>
 8001a56:	68bb      	ldr	r3, [r7, #8]
 8001a58:	3301      	adds	r3, #1
 8001a5a:	e009      	b.n	8001a70 <HAL_I2C_Init+0xe8>
 8001a5c:	68bb      	ldr	r3, [r7, #8]
 8001a5e:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8001a62:	fb02 f303 	mul.w	r3, r2, r3
 8001a66:	4a69      	ldr	r2, [pc, #420]	; (8001c0c <HAL_I2C_Init+0x284>)
 8001a68:	fba2 2303 	umull	r2, r3, r2, r3
 8001a6c:	099b      	lsrs	r3, r3, #6
 8001a6e:	3301      	adds	r3, #1
 8001a70:	687a      	ldr	r2, [r7, #4]
 8001a72:	6812      	ldr	r2, [r2, #0]
 8001a74:	430b      	orrs	r3, r1
 8001a76:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	681b      	ldr	r3, [r3, #0]
 8001a7c:	69db      	ldr	r3, [r3, #28]
 8001a7e:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8001a82:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	685b      	ldr	r3, [r3, #4]
 8001a8a:	495c      	ldr	r1, [pc, #368]	; (8001bfc <HAL_I2C_Init+0x274>)
 8001a8c:	428b      	cmp	r3, r1
 8001a8e:	d819      	bhi.n	8001ac4 <HAL_I2C_Init+0x13c>
 8001a90:	68fb      	ldr	r3, [r7, #12]
 8001a92:	1e59      	subs	r1, r3, #1
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	685b      	ldr	r3, [r3, #4]
 8001a98:	005b      	lsls	r3, r3, #1
 8001a9a:	fbb1 f3f3 	udiv	r3, r1, r3
 8001a9e:	1c59      	adds	r1, r3, #1
 8001aa0:	f640 73fc 	movw	r3, #4092	; 0xffc
 8001aa4:	400b      	ands	r3, r1
 8001aa6:	2b00      	cmp	r3, #0
 8001aa8:	d00a      	beq.n	8001ac0 <HAL_I2C_Init+0x138>
 8001aaa:	68fb      	ldr	r3, [r7, #12]
 8001aac:	1e59      	subs	r1, r3, #1
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	685b      	ldr	r3, [r3, #4]
 8001ab2:	005b      	lsls	r3, r3, #1
 8001ab4:	fbb1 f3f3 	udiv	r3, r1, r3
 8001ab8:	3301      	adds	r3, #1
 8001aba:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001abe:	e051      	b.n	8001b64 <HAL_I2C_Init+0x1dc>
 8001ac0:	2304      	movs	r3, #4
 8001ac2:	e04f      	b.n	8001b64 <HAL_I2C_Init+0x1dc>
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	689b      	ldr	r3, [r3, #8]
 8001ac8:	2b00      	cmp	r3, #0
 8001aca:	d111      	bne.n	8001af0 <HAL_I2C_Init+0x168>
 8001acc:	68fb      	ldr	r3, [r7, #12]
 8001ace:	1e58      	subs	r0, r3, #1
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	6859      	ldr	r1, [r3, #4]
 8001ad4:	460b      	mov	r3, r1
 8001ad6:	005b      	lsls	r3, r3, #1
 8001ad8:	440b      	add	r3, r1
 8001ada:	fbb0 f3f3 	udiv	r3, r0, r3
 8001ade:	3301      	adds	r3, #1
 8001ae0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001ae4:	2b00      	cmp	r3, #0
 8001ae6:	bf0c      	ite	eq
 8001ae8:	2301      	moveq	r3, #1
 8001aea:	2300      	movne	r3, #0
 8001aec:	b2db      	uxtb	r3, r3
 8001aee:	e012      	b.n	8001b16 <HAL_I2C_Init+0x18e>
 8001af0:	68fb      	ldr	r3, [r7, #12]
 8001af2:	1e58      	subs	r0, r3, #1
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	6859      	ldr	r1, [r3, #4]
 8001af8:	460b      	mov	r3, r1
 8001afa:	009b      	lsls	r3, r3, #2
 8001afc:	440b      	add	r3, r1
 8001afe:	0099      	lsls	r1, r3, #2
 8001b00:	440b      	add	r3, r1
 8001b02:	fbb0 f3f3 	udiv	r3, r0, r3
 8001b06:	3301      	adds	r3, #1
 8001b08:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001b0c:	2b00      	cmp	r3, #0
 8001b0e:	bf0c      	ite	eq
 8001b10:	2301      	moveq	r3, #1
 8001b12:	2300      	movne	r3, #0
 8001b14:	b2db      	uxtb	r3, r3
 8001b16:	2b00      	cmp	r3, #0
 8001b18:	d001      	beq.n	8001b1e <HAL_I2C_Init+0x196>
 8001b1a:	2301      	movs	r3, #1
 8001b1c:	e022      	b.n	8001b64 <HAL_I2C_Init+0x1dc>
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	689b      	ldr	r3, [r3, #8]
 8001b22:	2b00      	cmp	r3, #0
 8001b24:	d10e      	bne.n	8001b44 <HAL_I2C_Init+0x1bc>
 8001b26:	68fb      	ldr	r3, [r7, #12]
 8001b28:	1e58      	subs	r0, r3, #1
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	6859      	ldr	r1, [r3, #4]
 8001b2e:	460b      	mov	r3, r1
 8001b30:	005b      	lsls	r3, r3, #1
 8001b32:	440b      	add	r3, r1
 8001b34:	fbb0 f3f3 	udiv	r3, r0, r3
 8001b38:	3301      	adds	r3, #1
 8001b3a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001b3e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001b42:	e00f      	b.n	8001b64 <HAL_I2C_Init+0x1dc>
 8001b44:	68fb      	ldr	r3, [r7, #12]
 8001b46:	1e58      	subs	r0, r3, #1
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	6859      	ldr	r1, [r3, #4]
 8001b4c:	460b      	mov	r3, r1
 8001b4e:	009b      	lsls	r3, r3, #2
 8001b50:	440b      	add	r3, r1
 8001b52:	0099      	lsls	r1, r3, #2
 8001b54:	440b      	add	r3, r1
 8001b56:	fbb0 f3f3 	udiv	r3, r0, r3
 8001b5a:	3301      	adds	r3, #1
 8001b5c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001b60:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001b64:	6879      	ldr	r1, [r7, #4]
 8001b66:	6809      	ldr	r1, [r1, #0]
 8001b68:	4313      	orrs	r3, r2
 8001b6a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	681b      	ldr	r3, [r3, #0]
 8001b70:	681b      	ldr	r3, [r3, #0]
 8001b72:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	69da      	ldr	r2, [r3, #28]
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	6a1b      	ldr	r3, [r3, #32]
 8001b7e:	431a      	orrs	r2, r3
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	681b      	ldr	r3, [r3, #0]
 8001b84:	430a      	orrs	r2, r1
 8001b86:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	681b      	ldr	r3, [r3, #0]
 8001b8c:	689b      	ldr	r3, [r3, #8]
 8001b8e:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8001b92:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8001b96:	687a      	ldr	r2, [r7, #4]
 8001b98:	6911      	ldr	r1, [r2, #16]
 8001b9a:	687a      	ldr	r2, [r7, #4]
 8001b9c:	68d2      	ldr	r2, [r2, #12]
 8001b9e:	4311      	orrs	r1, r2
 8001ba0:	687a      	ldr	r2, [r7, #4]
 8001ba2:	6812      	ldr	r2, [r2, #0]
 8001ba4:	430b      	orrs	r3, r1
 8001ba6:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	681b      	ldr	r3, [r3, #0]
 8001bac:	68db      	ldr	r3, [r3, #12]
 8001bae:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	695a      	ldr	r2, [r3, #20]
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	699b      	ldr	r3, [r3, #24]
 8001bba:	431a      	orrs	r2, r3
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	681b      	ldr	r3, [r3, #0]
 8001bc0:	430a      	orrs	r2, r1
 8001bc2:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	681b      	ldr	r3, [r3, #0]
 8001bc8:	681a      	ldr	r2, [r3, #0]
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	681b      	ldr	r3, [r3, #0]
 8001bce:	f042 0201 	orr.w	r2, r2, #1
 8001bd2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	2200      	movs	r2, #0
 8001bd8:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	2220      	movs	r2, #32
 8001bde:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	2200      	movs	r2, #0
 8001be6:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	2200      	movs	r2, #0
 8001bec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8001bf0:	2300      	movs	r3, #0
}
 8001bf2:	4618      	mov	r0, r3
 8001bf4:	3710      	adds	r7, #16
 8001bf6:	46bd      	mov	sp, r7
 8001bf8:	bd80      	pop	{r7, pc}
 8001bfa:	bf00      	nop
 8001bfc:	000186a0 	.word	0x000186a0
 8001c00:	001e847f 	.word	0x001e847f
 8001c04:	003d08ff 	.word	0x003d08ff
 8001c08:	431bde83 	.word	0x431bde83
 8001c0c:	10624dd3 	.word	0x10624dd3

08001c10 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001c10:	b580      	push	{r7, lr}
 8001c12:	b088      	sub	sp, #32
 8001c14:	af02      	add	r7, sp, #8
 8001c16:	60f8      	str	r0, [r7, #12]
 8001c18:	607a      	str	r2, [r7, #4]
 8001c1a:	461a      	mov	r2, r3
 8001c1c:	460b      	mov	r3, r1
 8001c1e:	817b      	strh	r3, [r7, #10]
 8001c20:	4613      	mov	r3, r2
 8001c22:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8001c24:	f7ff fbf8 	bl	8001418 <HAL_GetTick>
 8001c28:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001c2a:	68fb      	ldr	r3, [r7, #12]
 8001c2c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001c30:	b2db      	uxtb	r3, r3
 8001c32:	2b20      	cmp	r3, #32
 8001c34:	f040 80e0 	bne.w	8001df8 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001c38:	697b      	ldr	r3, [r7, #20]
 8001c3a:	9300      	str	r3, [sp, #0]
 8001c3c:	2319      	movs	r3, #25
 8001c3e:	2201      	movs	r2, #1
 8001c40:	4970      	ldr	r1, [pc, #448]	; (8001e04 <HAL_I2C_Master_Transmit+0x1f4>)
 8001c42:	68f8      	ldr	r0, [r7, #12]
 8001c44:	f000 fd86 	bl	8002754 <I2C_WaitOnFlagUntilTimeout>
 8001c48:	4603      	mov	r3, r0
 8001c4a:	2b00      	cmp	r3, #0
 8001c4c:	d001      	beq.n	8001c52 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8001c4e:	2302      	movs	r3, #2
 8001c50:	e0d3      	b.n	8001dfa <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001c52:	68fb      	ldr	r3, [r7, #12]
 8001c54:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001c58:	2b01      	cmp	r3, #1
 8001c5a:	d101      	bne.n	8001c60 <HAL_I2C_Master_Transmit+0x50>
 8001c5c:	2302      	movs	r3, #2
 8001c5e:	e0cc      	b.n	8001dfa <HAL_I2C_Master_Transmit+0x1ea>
 8001c60:	68fb      	ldr	r3, [r7, #12]
 8001c62:	2201      	movs	r2, #1
 8001c64:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001c68:	68fb      	ldr	r3, [r7, #12]
 8001c6a:	681b      	ldr	r3, [r3, #0]
 8001c6c:	681b      	ldr	r3, [r3, #0]
 8001c6e:	f003 0301 	and.w	r3, r3, #1
 8001c72:	2b01      	cmp	r3, #1
 8001c74:	d007      	beq.n	8001c86 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8001c76:	68fb      	ldr	r3, [r7, #12]
 8001c78:	681b      	ldr	r3, [r3, #0]
 8001c7a:	681a      	ldr	r2, [r3, #0]
 8001c7c:	68fb      	ldr	r3, [r7, #12]
 8001c7e:	681b      	ldr	r3, [r3, #0]
 8001c80:	f042 0201 	orr.w	r2, r2, #1
 8001c84:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001c86:	68fb      	ldr	r3, [r7, #12]
 8001c88:	681b      	ldr	r3, [r3, #0]
 8001c8a:	681a      	ldr	r2, [r3, #0]
 8001c8c:	68fb      	ldr	r3, [r7, #12]
 8001c8e:	681b      	ldr	r3, [r3, #0]
 8001c90:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001c94:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8001c96:	68fb      	ldr	r3, [r7, #12]
 8001c98:	2221      	movs	r2, #33	; 0x21
 8001c9a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8001c9e:	68fb      	ldr	r3, [r7, #12]
 8001ca0:	2210      	movs	r2, #16
 8001ca2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8001ca6:	68fb      	ldr	r3, [r7, #12]
 8001ca8:	2200      	movs	r2, #0
 8001caa:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8001cac:	68fb      	ldr	r3, [r7, #12]
 8001cae:	687a      	ldr	r2, [r7, #4]
 8001cb0:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8001cb2:	68fb      	ldr	r3, [r7, #12]
 8001cb4:	893a      	ldrh	r2, [r7, #8]
 8001cb6:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8001cb8:	68fb      	ldr	r3, [r7, #12]
 8001cba:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001cbc:	b29a      	uxth	r2, r3
 8001cbe:	68fb      	ldr	r3, [r7, #12]
 8001cc0:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001cc2:	68fb      	ldr	r3, [r7, #12]
 8001cc4:	4a50      	ldr	r2, [pc, #320]	; (8001e08 <HAL_I2C_Master_Transmit+0x1f8>)
 8001cc6:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8001cc8:	8979      	ldrh	r1, [r7, #10]
 8001cca:	697b      	ldr	r3, [r7, #20]
 8001ccc:	6a3a      	ldr	r2, [r7, #32]
 8001cce:	68f8      	ldr	r0, [r7, #12]
 8001cd0:	f000 fbf0 	bl	80024b4 <I2C_MasterRequestWrite>
 8001cd4:	4603      	mov	r3, r0
 8001cd6:	2b00      	cmp	r3, #0
 8001cd8:	d001      	beq.n	8001cde <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8001cda:	2301      	movs	r3, #1
 8001cdc:	e08d      	b.n	8001dfa <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001cde:	2300      	movs	r3, #0
 8001ce0:	613b      	str	r3, [r7, #16]
 8001ce2:	68fb      	ldr	r3, [r7, #12]
 8001ce4:	681b      	ldr	r3, [r3, #0]
 8001ce6:	695b      	ldr	r3, [r3, #20]
 8001ce8:	613b      	str	r3, [r7, #16]
 8001cea:	68fb      	ldr	r3, [r7, #12]
 8001cec:	681b      	ldr	r3, [r3, #0]
 8001cee:	699b      	ldr	r3, [r3, #24]
 8001cf0:	613b      	str	r3, [r7, #16]
 8001cf2:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8001cf4:	e066      	b.n	8001dc4 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001cf6:	697a      	ldr	r2, [r7, #20]
 8001cf8:	6a39      	ldr	r1, [r7, #32]
 8001cfa:	68f8      	ldr	r0, [r7, #12]
 8001cfc:	f000 fe00 	bl	8002900 <I2C_WaitOnTXEFlagUntilTimeout>
 8001d00:	4603      	mov	r3, r0
 8001d02:	2b00      	cmp	r3, #0
 8001d04:	d00d      	beq.n	8001d22 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001d06:	68fb      	ldr	r3, [r7, #12]
 8001d08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d0a:	2b04      	cmp	r3, #4
 8001d0c:	d107      	bne.n	8001d1e <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001d0e:	68fb      	ldr	r3, [r7, #12]
 8001d10:	681b      	ldr	r3, [r3, #0]
 8001d12:	681a      	ldr	r2, [r3, #0]
 8001d14:	68fb      	ldr	r3, [r7, #12]
 8001d16:	681b      	ldr	r3, [r3, #0]
 8001d18:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001d1c:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8001d1e:	2301      	movs	r3, #1
 8001d20:	e06b      	b.n	8001dfa <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001d22:	68fb      	ldr	r3, [r7, #12]
 8001d24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d26:	781a      	ldrb	r2, [r3, #0]
 8001d28:	68fb      	ldr	r3, [r7, #12]
 8001d2a:	681b      	ldr	r3, [r3, #0]
 8001d2c:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001d2e:	68fb      	ldr	r3, [r7, #12]
 8001d30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d32:	1c5a      	adds	r2, r3, #1
 8001d34:	68fb      	ldr	r3, [r7, #12]
 8001d36:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8001d38:	68fb      	ldr	r3, [r7, #12]
 8001d3a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001d3c:	b29b      	uxth	r3, r3
 8001d3e:	3b01      	subs	r3, #1
 8001d40:	b29a      	uxth	r2, r3
 8001d42:	68fb      	ldr	r3, [r7, #12]
 8001d44:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8001d46:	68fb      	ldr	r3, [r7, #12]
 8001d48:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001d4a:	3b01      	subs	r3, #1
 8001d4c:	b29a      	uxth	r2, r3
 8001d4e:	68fb      	ldr	r3, [r7, #12]
 8001d50:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8001d52:	68fb      	ldr	r3, [r7, #12]
 8001d54:	681b      	ldr	r3, [r3, #0]
 8001d56:	695b      	ldr	r3, [r3, #20]
 8001d58:	f003 0304 	and.w	r3, r3, #4
 8001d5c:	2b04      	cmp	r3, #4
 8001d5e:	d11b      	bne.n	8001d98 <HAL_I2C_Master_Transmit+0x188>
 8001d60:	68fb      	ldr	r3, [r7, #12]
 8001d62:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001d64:	2b00      	cmp	r3, #0
 8001d66:	d017      	beq.n	8001d98 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001d68:	68fb      	ldr	r3, [r7, #12]
 8001d6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d6c:	781a      	ldrb	r2, [r3, #0]
 8001d6e:	68fb      	ldr	r3, [r7, #12]
 8001d70:	681b      	ldr	r3, [r3, #0]
 8001d72:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8001d74:	68fb      	ldr	r3, [r7, #12]
 8001d76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d78:	1c5a      	adds	r2, r3, #1
 8001d7a:	68fb      	ldr	r3, [r7, #12]
 8001d7c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8001d7e:	68fb      	ldr	r3, [r7, #12]
 8001d80:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001d82:	b29b      	uxth	r3, r3
 8001d84:	3b01      	subs	r3, #1
 8001d86:	b29a      	uxth	r2, r3
 8001d88:	68fb      	ldr	r3, [r7, #12]
 8001d8a:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8001d8c:	68fb      	ldr	r3, [r7, #12]
 8001d8e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001d90:	3b01      	subs	r3, #1
 8001d92:	b29a      	uxth	r2, r3
 8001d94:	68fb      	ldr	r3, [r7, #12]
 8001d96:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001d98:	697a      	ldr	r2, [r7, #20]
 8001d9a:	6a39      	ldr	r1, [r7, #32]
 8001d9c:	68f8      	ldr	r0, [r7, #12]
 8001d9e:	f000 fdf0 	bl	8002982 <I2C_WaitOnBTFFlagUntilTimeout>
 8001da2:	4603      	mov	r3, r0
 8001da4:	2b00      	cmp	r3, #0
 8001da6:	d00d      	beq.n	8001dc4 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001da8:	68fb      	ldr	r3, [r7, #12]
 8001daa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001dac:	2b04      	cmp	r3, #4
 8001dae:	d107      	bne.n	8001dc0 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001db0:	68fb      	ldr	r3, [r7, #12]
 8001db2:	681b      	ldr	r3, [r3, #0]
 8001db4:	681a      	ldr	r2, [r3, #0]
 8001db6:	68fb      	ldr	r3, [r7, #12]
 8001db8:	681b      	ldr	r3, [r3, #0]
 8001dba:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001dbe:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8001dc0:	2301      	movs	r3, #1
 8001dc2:	e01a      	b.n	8001dfa <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8001dc4:	68fb      	ldr	r3, [r7, #12]
 8001dc6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001dc8:	2b00      	cmp	r3, #0
 8001dca:	d194      	bne.n	8001cf6 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001dcc:	68fb      	ldr	r3, [r7, #12]
 8001dce:	681b      	ldr	r3, [r3, #0]
 8001dd0:	681a      	ldr	r2, [r3, #0]
 8001dd2:	68fb      	ldr	r3, [r7, #12]
 8001dd4:	681b      	ldr	r3, [r3, #0]
 8001dd6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001dda:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001ddc:	68fb      	ldr	r3, [r7, #12]
 8001dde:	2220      	movs	r2, #32
 8001de0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001de4:	68fb      	ldr	r3, [r7, #12]
 8001de6:	2200      	movs	r2, #0
 8001de8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001dec:	68fb      	ldr	r3, [r7, #12]
 8001dee:	2200      	movs	r2, #0
 8001df0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8001df4:	2300      	movs	r3, #0
 8001df6:	e000      	b.n	8001dfa <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8001df8:	2302      	movs	r3, #2
  }
}
 8001dfa:	4618      	mov	r0, r3
 8001dfc:	3718      	adds	r7, #24
 8001dfe:	46bd      	mov	sp, r7
 8001e00:	bd80      	pop	{r7, pc}
 8001e02:	bf00      	nop
 8001e04:	00100002 	.word	0x00100002
 8001e08:	ffff0000 	.word	0xffff0000

08001e0c <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001e0c:	b580      	push	{r7, lr}
 8001e0e:	b08c      	sub	sp, #48	; 0x30
 8001e10:	af02      	add	r7, sp, #8
 8001e12:	60f8      	str	r0, [r7, #12]
 8001e14:	607a      	str	r2, [r7, #4]
 8001e16:	461a      	mov	r2, r3
 8001e18:	460b      	mov	r3, r1
 8001e1a:	817b      	strh	r3, [r7, #10]
 8001e1c:	4613      	mov	r3, r2
 8001e1e:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8001e20:	f7ff fafa 	bl	8001418 <HAL_GetTick>
 8001e24:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001e26:	68fb      	ldr	r3, [r7, #12]
 8001e28:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001e2c:	b2db      	uxtb	r3, r3
 8001e2e:	2b20      	cmp	r3, #32
 8001e30:	f040 820b 	bne.w	800224a <HAL_I2C_Master_Receive+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001e34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e36:	9300      	str	r3, [sp, #0]
 8001e38:	2319      	movs	r3, #25
 8001e3a:	2201      	movs	r2, #1
 8001e3c:	497c      	ldr	r1, [pc, #496]	; (8002030 <HAL_I2C_Master_Receive+0x224>)
 8001e3e:	68f8      	ldr	r0, [r7, #12]
 8001e40:	f000 fc88 	bl	8002754 <I2C_WaitOnFlagUntilTimeout>
 8001e44:	4603      	mov	r3, r0
 8001e46:	2b00      	cmp	r3, #0
 8001e48:	d001      	beq.n	8001e4e <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 8001e4a:	2302      	movs	r3, #2
 8001e4c:	e1fe      	b.n	800224c <HAL_I2C_Master_Receive+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001e4e:	68fb      	ldr	r3, [r7, #12]
 8001e50:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001e54:	2b01      	cmp	r3, #1
 8001e56:	d101      	bne.n	8001e5c <HAL_I2C_Master_Receive+0x50>
 8001e58:	2302      	movs	r3, #2
 8001e5a:	e1f7      	b.n	800224c <HAL_I2C_Master_Receive+0x440>
 8001e5c:	68fb      	ldr	r3, [r7, #12]
 8001e5e:	2201      	movs	r2, #1
 8001e60:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001e64:	68fb      	ldr	r3, [r7, #12]
 8001e66:	681b      	ldr	r3, [r3, #0]
 8001e68:	681b      	ldr	r3, [r3, #0]
 8001e6a:	f003 0301 	and.w	r3, r3, #1
 8001e6e:	2b01      	cmp	r3, #1
 8001e70:	d007      	beq.n	8001e82 <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8001e72:	68fb      	ldr	r3, [r7, #12]
 8001e74:	681b      	ldr	r3, [r3, #0]
 8001e76:	681a      	ldr	r2, [r3, #0]
 8001e78:	68fb      	ldr	r3, [r7, #12]
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	f042 0201 	orr.w	r2, r2, #1
 8001e80:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001e82:	68fb      	ldr	r3, [r7, #12]
 8001e84:	681b      	ldr	r3, [r3, #0]
 8001e86:	681a      	ldr	r2, [r3, #0]
 8001e88:	68fb      	ldr	r3, [r7, #12]
 8001e8a:	681b      	ldr	r3, [r3, #0]
 8001e8c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001e90:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8001e92:	68fb      	ldr	r3, [r7, #12]
 8001e94:	2222      	movs	r2, #34	; 0x22
 8001e96:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8001e9a:	68fb      	ldr	r3, [r7, #12]
 8001e9c:	2210      	movs	r2, #16
 8001e9e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8001ea2:	68fb      	ldr	r3, [r7, #12]
 8001ea4:	2200      	movs	r2, #0
 8001ea6:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8001ea8:	68fb      	ldr	r3, [r7, #12]
 8001eaa:	687a      	ldr	r2, [r7, #4]
 8001eac:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8001eae:	68fb      	ldr	r3, [r7, #12]
 8001eb0:	893a      	ldrh	r2, [r7, #8]
 8001eb2:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8001eb4:	68fb      	ldr	r3, [r7, #12]
 8001eb6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001eb8:	b29a      	uxth	r2, r3
 8001eba:	68fb      	ldr	r3, [r7, #12]
 8001ebc:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001ebe:	68fb      	ldr	r3, [r7, #12]
 8001ec0:	4a5c      	ldr	r2, [pc, #368]	; (8002034 <HAL_I2C_Master_Receive+0x228>)
 8001ec2:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8001ec4:	8979      	ldrh	r1, [r7, #10]
 8001ec6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ec8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001eca:	68f8      	ldr	r0, [r7, #12]
 8001ecc:	f000 fb74 	bl	80025b8 <I2C_MasterRequestRead>
 8001ed0:	4603      	mov	r3, r0
 8001ed2:	2b00      	cmp	r3, #0
 8001ed4:	d001      	beq.n	8001eda <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 8001ed6:	2301      	movs	r3, #1
 8001ed8:	e1b8      	b.n	800224c <HAL_I2C_Master_Receive+0x440>
    }

    if (hi2c->XferSize == 0U)
 8001eda:	68fb      	ldr	r3, [r7, #12]
 8001edc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001ede:	2b00      	cmp	r3, #0
 8001ee0:	d113      	bne.n	8001f0a <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001ee2:	2300      	movs	r3, #0
 8001ee4:	623b      	str	r3, [r7, #32]
 8001ee6:	68fb      	ldr	r3, [r7, #12]
 8001ee8:	681b      	ldr	r3, [r3, #0]
 8001eea:	695b      	ldr	r3, [r3, #20]
 8001eec:	623b      	str	r3, [r7, #32]
 8001eee:	68fb      	ldr	r3, [r7, #12]
 8001ef0:	681b      	ldr	r3, [r3, #0]
 8001ef2:	699b      	ldr	r3, [r3, #24]
 8001ef4:	623b      	str	r3, [r7, #32]
 8001ef6:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001ef8:	68fb      	ldr	r3, [r7, #12]
 8001efa:	681b      	ldr	r3, [r3, #0]
 8001efc:	681a      	ldr	r2, [r3, #0]
 8001efe:	68fb      	ldr	r3, [r7, #12]
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001f06:	601a      	str	r2, [r3, #0]
 8001f08:	e18c      	b.n	8002224 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 1U)
 8001f0a:	68fb      	ldr	r3, [r7, #12]
 8001f0c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001f0e:	2b01      	cmp	r3, #1
 8001f10:	d11b      	bne.n	8001f4a <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001f12:	68fb      	ldr	r3, [r7, #12]
 8001f14:	681b      	ldr	r3, [r3, #0]
 8001f16:	681a      	ldr	r2, [r3, #0]
 8001f18:	68fb      	ldr	r3, [r7, #12]
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001f20:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001f22:	2300      	movs	r3, #0
 8001f24:	61fb      	str	r3, [r7, #28]
 8001f26:	68fb      	ldr	r3, [r7, #12]
 8001f28:	681b      	ldr	r3, [r3, #0]
 8001f2a:	695b      	ldr	r3, [r3, #20]
 8001f2c:	61fb      	str	r3, [r7, #28]
 8001f2e:	68fb      	ldr	r3, [r7, #12]
 8001f30:	681b      	ldr	r3, [r3, #0]
 8001f32:	699b      	ldr	r3, [r3, #24]
 8001f34:	61fb      	str	r3, [r7, #28]
 8001f36:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001f38:	68fb      	ldr	r3, [r7, #12]
 8001f3a:	681b      	ldr	r3, [r3, #0]
 8001f3c:	681a      	ldr	r2, [r3, #0]
 8001f3e:	68fb      	ldr	r3, [r7, #12]
 8001f40:	681b      	ldr	r3, [r3, #0]
 8001f42:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001f46:	601a      	str	r2, [r3, #0]
 8001f48:	e16c      	b.n	8002224 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 2U)
 8001f4a:	68fb      	ldr	r3, [r7, #12]
 8001f4c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001f4e:	2b02      	cmp	r3, #2
 8001f50:	d11b      	bne.n	8001f8a <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001f52:	68fb      	ldr	r3, [r7, #12]
 8001f54:	681b      	ldr	r3, [r3, #0]
 8001f56:	681a      	ldr	r2, [r3, #0]
 8001f58:	68fb      	ldr	r3, [r7, #12]
 8001f5a:	681b      	ldr	r3, [r3, #0]
 8001f5c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001f60:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001f62:	68fb      	ldr	r3, [r7, #12]
 8001f64:	681b      	ldr	r3, [r3, #0]
 8001f66:	681a      	ldr	r2, [r3, #0]
 8001f68:	68fb      	ldr	r3, [r7, #12]
 8001f6a:	681b      	ldr	r3, [r3, #0]
 8001f6c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001f70:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001f72:	2300      	movs	r3, #0
 8001f74:	61bb      	str	r3, [r7, #24]
 8001f76:	68fb      	ldr	r3, [r7, #12]
 8001f78:	681b      	ldr	r3, [r3, #0]
 8001f7a:	695b      	ldr	r3, [r3, #20]
 8001f7c:	61bb      	str	r3, [r7, #24]
 8001f7e:	68fb      	ldr	r3, [r7, #12]
 8001f80:	681b      	ldr	r3, [r3, #0]
 8001f82:	699b      	ldr	r3, [r3, #24]
 8001f84:	61bb      	str	r3, [r7, #24]
 8001f86:	69bb      	ldr	r3, [r7, #24]
 8001f88:	e14c      	b.n	8002224 <HAL_I2C_Master_Receive+0x418>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001f8a:	68fb      	ldr	r3, [r7, #12]
 8001f8c:	681b      	ldr	r3, [r3, #0]
 8001f8e:	681a      	ldr	r2, [r3, #0]
 8001f90:	68fb      	ldr	r3, [r7, #12]
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8001f98:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001f9a:	2300      	movs	r3, #0
 8001f9c:	617b      	str	r3, [r7, #20]
 8001f9e:	68fb      	ldr	r3, [r7, #12]
 8001fa0:	681b      	ldr	r3, [r3, #0]
 8001fa2:	695b      	ldr	r3, [r3, #20]
 8001fa4:	617b      	str	r3, [r7, #20]
 8001fa6:	68fb      	ldr	r3, [r7, #12]
 8001fa8:	681b      	ldr	r3, [r3, #0]
 8001faa:	699b      	ldr	r3, [r3, #24]
 8001fac:	617b      	str	r3, [r7, #20]
 8001fae:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8001fb0:	e138      	b.n	8002224 <HAL_I2C_Master_Receive+0x418>
    {
      if (hi2c->XferSize <= 3U)
 8001fb2:	68fb      	ldr	r3, [r7, #12]
 8001fb4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001fb6:	2b03      	cmp	r3, #3
 8001fb8:	f200 80f1 	bhi.w	800219e <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8001fbc:	68fb      	ldr	r3, [r7, #12]
 8001fbe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001fc0:	2b01      	cmp	r3, #1
 8001fc2:	d123      	bne.n	800200c <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001fc4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001fc6:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8001fc8:	68f8      	ldr	r0, [r7, #12]
 8001fca:	f000 fd1b 	bl	8002a04 <I2C_WaitOnRXNEFlagUntilTimeout>
 8001fce:	4603      	mov	r3, r0
 8001fd0:	2b00      	cmp	r3, #0
 8001fd2:	d001      	beq.n	8001fd8 <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 8001fd4:	2301      	movs	r3, #1
 8001fd6:	e139      	b.n	800224c <HAL_I2C_Master_Receive+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001fd8:	68fb      	ldr	r3, [r7, #12]
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	691a      	ldr	r2, [r3, #16]
 8001fde:	68fb      	ldr	r3, [r7, #12]
 8001fe0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001fe2:	b2d2      	uxtb	r2, r2
 8001fe4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001fe6:	68fb      	ldr	r3, [r7, #12]
 8001fe8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001fea:	1c5a      	adds	r2, r3, #1
 8001fec:	68fb      	ldr	r3, [r7, #12]
 8001fee:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001ff0:	68fb      	ldr	r3, [r7, #12]
 8001ff2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001ff4:	3b01      	subs	r3, #1
 8001ff6:	b29a      	uxth	r2, r3
 8001ff8:	68fb      	ldr	r3, [r7, #12]
 8001ffa:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001ffc:	68fb      	ldr	r3, [r7, #12]
 8001ffe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002000:	b29b      	uxth	r3, r3
 8002002:	3b01      	subs	r3, #1
 8002004:	b29a      	uxth	r2, r3
 8002006:	68fb      	ldr	r3, [r7, #12]
 8002008:	855a      	strh	r2, [r3, #42]	; 0x2a
 800200a:	e10b      	b.n	8002224 <HAL_I2C_Master_Receive+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 800200c:	68fb      	ldr	r3, [r7, #12]
 800200e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002010:	2b02      	cmp	r3, #2
 8002012:	d14e      	bne.n	80020b2 <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002014:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002016:	9300      	str	r3, [sp, #0]
 8002018:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800201a:	2200      	movs	r2, #0
 800201c:	4906      	ldr	r1, [pc, #24]	; (8002038 <HAL_I2C_Master_Receive+0x22c>)
 800201e:	68f8      	ldr	r0, [r7, #12]
 8002020:	f000 fb98 	bl	8002754 <I2C_WaitOnFlagUntilTimeout>
 8002024:	4603      	mov	r3, r0
 8002026:	2b00      	cmp	r3, #0
 8002028:	d008      	beq.n	800203c <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 800202a:	2301      	movs	r3, #1
 800202c:	e10e      	b.n	800224c <HAL_I2C_Master_Receive+0x440>
 800202e:	bf00      	nop
 8002030:	00100002 	.word	0x00100002
 8002034:	ffff0000 	.word	0xffff0000
 8002038:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800203c:	68fb      	ldr	r3, [r7, #12]
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	681a      	ldr	r2, [r3, #0]
 8002042:	68fb      	ldr	r3, [r7, #12]
 8002044:	681b      	ldr	r3, [r3, #0]
 8002046:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800204a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800204c:	68fb      	ldr	r3, [r7, #12]
 800204e:	681b      	ldr	r3, [r3, #0]
 8002050:	691a      	ldr	r2, [r3, #16]
 8002052:	68fb      	ldr	r3, [r7, #12]
 8002054:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002056:	b2d2      	uxtb	r2, r2
 8002058:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800205a:	68fb      	ldr	r3, [r7, #12]
 800205c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800205e:	1c5a      	adds	r2, r3, #1
 8002060:	68fb      	ldr	r3, [r7, #12]
 8002062:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002064:	68fb      	ldr	r3, [r7, #12]
 8002066:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002068:	3b01      	subs	r3, #1
 800206a:	b29a      	uxth	r2, r3
 800206c:	68fb      	ldr	r3, [r7, #12]
 800206e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002070:	68fb      	ldr	r3, [r7, #12]
 8002072:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002074:	b29b      	uxth	r3, r3
 8002076:	3b01      	subs	r3, #1
 8002078:	b29a      	uxth	r2, r3
 800207a:	68fb      	ldr	r3, [r7, #12]
 800207c:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800207e:	68fb      	ldr	r3, [r7, #12]
 8002080:	681b      	ldr	r3, [r3, #0]
 8002082:	691a      	ldr	r2, [r3, #16]
 8002084:	68fb      	ldr	r3, [r7, #12]
 8002086:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002088:	b2d2      	uxtb	r2, r2
 800208a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800208c:	68fb      	ldr	r3, [r7, #12]
 800208e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002090:	1c5a      	adds	r2, r3, #1
 8002092:	68fb      	ldr	r3, [r7, #12]
 8002094:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002096:	68fb      	ldr	r3, [r7, #12]
 8002098:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800209a:	3b01      	subs	r3, #1
 800209c:	b29a      	uxth	r2, r3
 800209e:	68fb      	ldr	r3, [r7, #12]
 80020a0:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80020a2:	68fb      	ldr	r3, [r7, #12]
 80020a4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80020a6:	b29b      	uxth	r3, r3
 80020a8:	3b01      	subs	r3, #1
 80020aa:	b29a      	uxth	r2, r3
 80020ac:	68fb      	ldr	r3, [r7, #12]
 80020ae:	855a      	strh	r2, [r3, #42]	; 0x2a
 80020b0:	e0b8      	b.n	8002224 <HAL_I2C_Master_Receive+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80020b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020b4:	9300      	str	r3, [sp, #0]
 80020b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80020b8:	2200      	movs	r2, #0
 80020ba:	4966      	ldr	r1, [pc, #408]	; (8002254 <HAL_I2C_Master_Receive+0x448>)
 80020bc:	68f8      	ldr	r0, [r7, #12]
 80020be:	f000 fb49 	bl	8002754 <I2C_WaitOnFlagUntilTimeout>
 80020c2:	4603      	mov	r3, r0
 80020c4:	2b00      	cmp	r3, #0
 80020c6:	d001      	beq.n	80020cc <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 80020c8:	2301      	movs	r3, #1
 80020ca:	e0bf      	b.n	800224c <HAL_I2C_Master_Receive+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80020cc:	68fb      	ldr	r3, [r7, #12]
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	681a      	ldr	r2, [r3, #0]
 80020d2:	68fb      	ldr	r3, [r7, #12]
 80020d4:	681b      	ldr	r3, [r3, #0]
 80020d6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80020da:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80020dc:	68fb      	ldr	r3, [r7, #12]
 80020de:	681b      	ldr	r3, [r3, #0]
 80020e0:	691a      	ldr	r2, [r3, #16]
 80020e2:	68fb      	ldr	r3, [r7, #12]
 80020e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020e6:	b2d2      	uxtb	r2, r2
 80020e8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80020ea:	68fb      	ldr	r3, [r7, #12]
 80020ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020ee:	1c5a      	adds	r2, r3, #1
 80020f0:	68fb      	ldr	r3, [r7, #12]
 80020f2:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80020f4:	68fb      	ldr	r3, [r7, #12]
 80020f6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80020f8:	3b01      	subs	r3, #1
 80020fa:	b29a      	uxth	r2, r3
 80020fc:	68fb      	ldr	r3, [r7, #12]
 80020fe:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002100:	68fb      	ldr	r3, [r7, #12]
 8002102:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002104:	b29b      	uxth	r3, r3
 8002106:	3b01      	subs	r3, #1
 8002108:	b29a      	uxth	r2, r3
 800210a:	68fb      	ldr	r3, [r7, #12]
 800210c:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800210e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002110:	9300      	str	r3, [sp, #0]
 8002112:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002114:	2200      	movs	r2, #0
 8002116:	494f      	ldr	r1, [pc, #316]	; (8002254 <HAL_I2C_Master_Receive+0x448>)
 8002118:	68f8      	ldr	r0, [r7, #12]
 800211a:	f000 fb1b 	bl	8002754 <I2C_WaitOnFlagUntilTimeout>
 800211e:	4603      	mov	r3, r0
 8002120:	2b00      	cmp	r3, #0
 8002122:	d001      	beq.n	8002128 <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 8002124:	2301      	movs	r3, #1
 8002126:	e091      	b.n	800224c <HAL_I2C_Master_Receive+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002128:	68fb      	ldr	r3, [r7, #12]
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	681a      	ldr	r2, [r3, #0]
 800212e:	68fb      	ldr	r3, [r7, #12]
 8002130:	681b      	ldr	r3, [r3, #0]
 8002132:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002136:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002138:	68fb      	ldr	r3, [r7, #12]
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	691a      	ldr	r2, [r3, #16]
 800213e:	68fb      	ldr	r3, [r7, #12]
 8002140:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002142:	b2d2      	uxtb	r2, r2
 8002144:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002146:	68fb      	ldr	r3, [r7, #12]
 8002148:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800214a:	1c5a      	adds	r2, r3, #1
 800214c:	68fb      	ldr	r3, [r7, #12]
 800214e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002150:	68fb      	ldr	r3, [r7, #12]
 8002152:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002154:	3b01      	subs	r3, #1
 8002156:	b29a      	uxth	r2, r3
 8002158:	68fb      	ldr	r3, [r7, #12]
 800215a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800215c:	68fb      	ldr	r3, [r7, #12]
 800215e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002160:	b29b      	uxth	r3, r3
 8002162:	3b01      	subs	r3, #1
 8002164:	b29a      	uxth	r2, r3
 8002166:	68fb      	ldr	r3, [r7, #12]
 8002168:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800216a:	68fb      	ldr	r3, [r7, #12]
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	691a      	ldr	r2, [r3, #16]
 8002170:	68fb      	ldr	r3, [r7, #12]
 8002172:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002174:	b2d2      	uxtb	r2, r2
 8002176:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002178:	68fb      	ldr	r3, [r7, #12]
 800217a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800217c:	1c5a      	adds	r2, r3, #1
 800217e:	68fb      	ldr	r3, [r7, #12]
 8002180:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002182:	68fb      	ldr	r3, [r7, #12]
 8002184:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002186:	3b01      	subs	r3, #1
 8002188:	b29a      	uxth	r2, r3
 800218a:	68fb      	ldr	r3, [r7, #12]
 800218c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800218e:	68fb      	ldr	r3, [r7, #12]
 8002190:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002192:	b29b      	uxth	r3, r3
 8002194:	3b01      	subs	r3, #1
 8002196:	b29a      	uxth	r2, r3
 8002198:	68fb      	ldr	r3, [r7, #12]
 800219a:	855a      	strh	r2, [r3, #42]	; 0x2a
 800219c:	e042      	b.n	8002224 <HAL_I2C_Master_Receive+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800219e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80021a0:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80021a2:	68f8      	ldr	r0, [r7, #12]
 80021a4:	f000 fc2e 	bl	8002a04 <I2C_WaitOnRXNEFlagUntilTimeout>
 80021a8:	4603      	mov	r3, r0
 80021aa:	2b00      	cmp	r3, #0
 80021ac:	d001      	beq.n	80021b2 <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 80021ae:	2301      	movs	r3, #1
 80021b0:	e04c      	b.n	800224c <HAL_I2C_Master_Receive+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80021b2:	68fb      	ldr	r3, [r7, #12]
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	691a      	ldr	r2, [r3, #16]
 80021b8:	68fb      	ldr	r3, [r7, #12]
 80021ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021bc:	b2d2      	uxtb	r2, r2
 80021be:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80021c0:	68fb      	ldr	r3, [r7, #12]
 80021c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021c4:	1c5a      	adds	r2, r3, #1
 80021c6:	68fb      	ldr	r3, [r7, #12]
 80021c8:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 80021ca:	68fb      	ldr	r3, [r7, #12]
 80021cc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80021ce:	3b01      	subs	r3, #1
 80021d0:	b29a      	uxth	r2, r3
 80021d2:	68fb      	ldr	r3, [r7, #12]
 80021d4:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 80021d6:	68fb      	ldr	r3, [r7, #12]
 80021d8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80021da:	b29b      	uxth	r3, r3
 80021dc:	3b01      	subs	r3, #1
 80021de:	b29a      	uxth	r2, r3
 80021e0:	68fb      	ldr	r3, [r7, #12]
 80021e2:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80021e4:	68fb      	ldr	r3, [r7, #12]
 80021e6:	681b      	ldr	r3, [r3, #0]
 80021e8:	695b      	ldr	r3, [r3, #20]
 80021ea:	f003 0304 	and.w	r3, r3, #4
 80021ee:	2b04      	cmp	r3, #4
 80021f0:	d118      	bne.n	8002224 <HAL_I2C_Master_Receive+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80021f2:	68fb      	ldr	r3, [r7, #12]
 80021f4:	681b      	ldr	r3, [r3, #0]
 80021f6:	691a      	ldr	r2, [r3, #16]
 80021f8:	68fb      	ldr	r3, [r7, #12]
 80021fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021fc:	b2d2      	uxtb	r2, r2
 80021fe:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002200:	68fb      	ldr	r3, [r7, #12]
 8002202:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002204:	1c5a      	adds	r2, r3, #1
 8002206:	68fb      	ldr	r3, [r7, #12]
 8002208:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800220a:	68fb      	ldr	r3, [r7, #12]
 800220c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800220e:	3b01      	subs	r3, #1
 8002210:	b29a      	uxth	r2, r3
 8002212:	68fb      	ldr	r3, [r7, #12]
 8002214:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002216:	68fb      	ldr	r3, [r7, #12]
 8002218:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800221a:	b29b      	uxth	r3, r3
 800221c:	3b01      	subs	r3, #1
 800221e:	b29a      	uxth	r2, r3
 8002220:	68fb      	ldr	r3, [r7, #12]
 8002222:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8002224:	68fb      	ldr	r3, [r7, #12]
 8002226:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002228:	2b00      	cmp	r3, #0
 800222a:	f47f aec2 	bne.w	8001fb2 <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 800222e:	68fb      	ldr	r3, [r7, #12]
 8002230:	2220      	movs	r2, #32
 8002232:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002236:	68fb      	ldr	r3, [r7, #12]
 8002238:	2200      	movs	r2, #0
 800223a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800223e:	68fb      	ldr	r3, [r7, #12]
 8002240:	2200      	movs	r2, #0
 8002242:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8002246:	2300      	movs	r3, #0
 8002248:	e000      	b.n	800224c <HAL_I2C_Master_Receive+0x440>
  }
  else
  {
    return HAL_BUSY;
 800224a:	2302      	movs	r3, #2
  }
}
 800224c:	4618      	mov	r0, r3
 800224e:	3728      	adds	r7, #40	; 0x28
 8002250:	46bd      	mov	sp, r7
 8002252:	bd80      	pop	{r7, pc}
 8002254:	00010004 	.word	0x00010004

08002258 <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 8002258:	b580      	push	{r7, lr}
 800225a:	b08a      	sub	sp, #40	; 0x28
 800225c:	af02      	add	r7, sp, #8
 800225e:	60f8      	str	r0, [r7, #12]
 8002260:	607a      	str	r2, [r7, #4]
 8002262:	603b      	str	r3, [r7, #0]
 8002264:	460b      	mov	r3, r1
 8002266:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 8002268:	f7ff f8d6 	bl	8001418 <HAL_GetTick>
 800226c:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 1U;
 800226e:	2301      	movs	r3, #1
 8002270:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002272:	68fb      	ldr	r3, [r7, #12]
 8002274:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002278:	b2db      	uxtb	r3, r3
 800227a:	2b20      	cmp	r3, #32
 800227c:	f040 8111 	bne.w	80024a2 <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002280:	69fb      	ldr	r3, [r7, #28]
 8002282:	9300      	str	r3, [sp, #0]
 8002284:	2319      	movs	r3, #25
 8002286:	2201      	movs	r2, #1
 8002288:	4988      	ldr	r1, [pc, #544]	; (80024ac <HAL_I2C_IsDeviceReady+0x254>)
 800228a:	68f8      	ldr	r0, [r7, #12]
 800228c:	f000 fa62 	bl	8002754 <I2C_WaitOnFlagUntilTimeout>
 8002290:	4603      	mov	r3, r0
 8002292:	2b00      	cmp	r3, #0
 8002294:	d001      	beq.n	800229a <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 8002296:	2302      	movs	r3, #2
 8002298:	e104      	b.n	80024a4 <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800229a:	68fb      	ldr	r3, [r7, #12]
 800229c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80022a0:	2b01      	cmp	r3, #1
 80022a2:	d101      	bne.n	80022a8 <HAL_I2C_IsDeviceReady+0x50>
 80022a4:	2302      	movs	r3, #2
 80022a6:	e0fd      	b.n	80024a4 <HAL_I2C_IsDeviceReady+0x24c>
 80022a8:	68fb      	ldr	r3, [r7, #12]
 80022aa:	2201      	movs	r2, #1
 80022ac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80022b0:	68fb      	ldr	r3, [r7, #12]
 80022b2:	681b      	ldr	r3, [r3, #0]
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	f003 0301 	and.w	r3, r3, #1
 80022ba:	2b01      	cmp	r3, #1
 80022bc:	d007      	beq.n	80022ce <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80022be:	68fb      	ldr	r3, [r7, #12]
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	681a      	ldr	r2, [r3, #0]
 80022c4:	68fb      	ldr	r3, [r7, #12]
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	f042 0201 	orr.w	r2, r2, #1
 80022cc:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80022ce:	68fb      	ldr	r3, [r7, #12]
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	681a      	ldr	r2, [r3, #0]
 80022d4:	68fb      	ldr	r3, [r7, #12]
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80022dc:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 80022de:	68fb      	ldr	r3, [r7, #12]
 80022e0:	2224      	movs	r2, #36	; 0x24
 80022e2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80022e6:	68fb      	ldr	r3, [r7, #12]
 80022e8:	2200      	movs	r2, #0
 80022ea:	641a      	str	r2, [r3, #64]	; 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80022ec:	68fb      	ldr	r3, [r7, #12]
 80022ee:	4a70      	ldr	r2, [pc, #448]	; (80024b0 <HAL_I2C_IsDeviceReady+0x258>)
 80022f0:	62da      	str	r2, [r3, #44]	; 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80022f2:	68fb      	ldr	r3, [r7, #12]
 80022f4:	681b      	ldr	r3, [r3, #0]
 80022f6:	681a      	ldr	r2, [r3, #0]
 80022f8:	68fb      	ldr	r3, [r7, #12]
 80022fa:	681b      	ldr	r3, [r3, #0]
 80022fc:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002300:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 8002302:	69fb      	ldr	r3, [r7, #28]
 8002304:	9300      	str	r3, [sp, #0]
 8002306:	683b      	ldr	r3, [r7, #0]
 8002308:	2200      	movs	r2, #0
 800230a:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800230e:	68f8      	ldr	r0, [r7, #12]
 8002310:	f000 fa20 	bl	8002754 <I2C_WaitOnFlagUntilTimeout>
 8002314:	4603      	mov	r3, r0
 8002316:	2b00      	cmp	r3, #0
 8002318:	d00d      	beq.n	8002336 <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800231a:	68fb      	ldr	r3, [r7, #12]
 800231c:	681b      	ldr	r3, [r3, #0]
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002324:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002328:	d103      	bne.n	8002332 <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800232a:	68fb      	ldr	r3, [r7, #12]
 800232c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002330:	641a      	str	r2, [r3, #64]	; 0x40
        }
        return HAL_TIMEOUT;
 8002332:	2303      	movs	r3, #3
 8002334:	e0b6      	b.n	80024a4 <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002336:	897b      	ldrh	r3, [r7, #10]
 8002338:	b2db      	uxtb	r3, r3
 800233a:	461a      	mov	r2, r3
 800233c:	68fb      	ldr	r3, [r7, #12]
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8002344:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 8002346:	f7ff f867 	bl	8001418 <HAL_GetTick>
 800234a:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 800234c:	68fb      	ldr	r3, [r7, #12]
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	695b      	ldr	r3, [r3, #20]
 8002352:	f003 0302 	and.w	r3, r3, #2
 8002356:	2b02      	cmp	r3, #2
 8002358:	bf0c      	ite	eq
 800235a:	2301      	moveq	r3, #1
 800235c:	2300      	movne	r3, #0
 800235e:	b2db      	uxtb	r3, r3
 8002360:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8002362:	68fb      	ldr	r3, [r7, #12]
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	695b      	ldr	r3, [r3, #20]
 8002368:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800236c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002370:	bf0c      	ite	eq
 8002372:	2301      	moveq	r3, #1
 8002374:	2300      	movne	r3, #0
 8002376:	b2db      	uxtb	r3, r3
 8002378:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 800237a:	e025      	b.n	80023c8 <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800237c:	f7ff f84c 	bl	8001418 <HAL_GetTick>
 8002380:	4602      	mov	r2, r0
 8002382:	69fb      	ldr	r3, [r7, #28]
 8002384:	1ad3      	subs	r3, r2, r3
 8002386:	683a      	ldr	r2, [r7, #0]
 8002388:	429a      	cmp	r2, r3
 800238a:	d302      	bcc.n	8002392 <HAL_I2C_IsDeviceReady+0x13a>
 800238c:	683b      	ldr	r3, [r7, #0]
 800238e:	2b00      	cmp	r3, #0
 8002390:	d103      	bne.n	800239a <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 8002392:	68fb      	ldr	r3, [r7, #12]
 8002394:	22a0      	movs	r2, #160	; 0xa0
 8002396:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 800239a:	68fb      	ldr	r3, [r7, #12]
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	695b      	ldr	r3, [r3, #20]
 80023a0:	f003 0302 	and.w	r3, r3, #2
 80023a4:	2b02      	cmp	r3, #2
 80023a6:	bf0c      	ite	eq
 80023a8:	2301      	moveq	r3, #1
 80023aa:	2300      	movne	r3, #0
 80023ac:	b2db      	uxtb	r3, r3
 80023ae:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 80023b0:	68fb      	ldr	r3, [r7, #12]
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	695b      	ldr	r3, [r3, #20]
 80023b6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80023ba:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80023be:	bf0c      	ite	eq
 80023c0:	2301      	moveq	r3, #1
 80023c2:	2300      	movne	r3, #0
 80023c4:	b2db      	uxtb	r3, r3
 80023c6:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 80023c8:	68fb      	ldr	r3, [r7, #12]
 80023ca:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80023ce:	b2db      	uxtb	r3, r3
 80023d0:	2ba0      	cmp	r3, #160	; 0xa0
 80023d2:	d005      	beq.n	80023e0 <HAL_I2C_IsDeviceReady+0x188>
 80023d4:	7dfb      	ldrb	r3, [r7, #23]
 80023d6:	2b00      	cmp	r3, #0
 80023d8:	d102      	bne.n	80023e0 <HAL_I2C_IsDeviceReady+0x188>
 80023da:	7dbb      	ldrb	r3, [r7, #22]
 80023dc:	2b00      	cmp	r3, #0
 80023de:	d0cd      	beq.n	800237c <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 80023e0:	68fb      	ldr	r3, [r7, #12]
 80023e2:	2220      	movs	r2, #32
 80023e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 80023e8:	68fb      	ldr	r3, [r7, #12]
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	695b      	ldr	r3, [r3, #20]
 80023ee:	f003 0302 	and.w	r3, r3, #2
 80023f2:	2b02      	cmp	r3, #2
 80023f4:	d129      	bne.n	800244a <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80023f6:	68fb      	ldr	r3, [r7, #12]
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	681a      	ldr	r2, [r3, #0]
 80023fc:	68fb      	ldr	r3, [r7, #12]
 80023fe:	681b      	ldr	r3, [r3, #0]
 8002400:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002404:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002406:	2300      	movs	r3, #0
 8002408:	613b      	str	r3, [r7, #16]
 800240a:	68fb      	ldr	r3, [r7, #12]
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	695b      	ldr	r3, [r3, #20]
 8002410:	613b      	str	r3, [r7, #16]
 8002412:	68fb      	ldr	r3, [r7, #12]
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	699b      	ldr	r3, [r3, #24]
 8002418:	613b      	str	r3, [r7, #16]
 800241a:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800241c:	69fb      	ldr	r3, [r7, #28]
 800241e:	9300      	str	r3, [sp, #0]
 8002420:	2319      	movs	r3, #25
 8002422:	2201      	movs	r2, #1
 8002424:	4921      	ldr	r1, [pc, #132]	; (80024ac <HAL_I2C_IsDeviceReady+0x254>)
 8002426:	68f8      	ldr	r0, [r7, #12]
 8002428:	f000 f994 	bl	8002754 <I2C_WaitOnFlagUntilTimeout>
 800242c:	4603      	mov	r3, r0
 800242e:	2b00      	cmp	r3, #0
 8002430:	d001      	beq.n	8002436 <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 8002432:	2301      	movs	r3, #1
 8002434:	e036      	b.n	80024a4 <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 8002436:	68fb      	ldr	r3, [r7, #12]
 8002438:	2220      	movs	r2, #32
 800243a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800243e:	68fb      	ldr	r3, [r7, #12]
 8002440:	2200      	movs	r2, #0
 8002442:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_OK;
 8002446:	2300      	movs	r3, #0
 8002448:	e02c      	b.n	80024a4 <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800244a:	68fb      	ldr	r3, [r7, #12]
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	681a      	ldr	r2, [r3, #0]
 8002450:	68fb      	ldr	r3, [r7, #12]
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002458:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800245a:	68fb      	ldr	r3, [r7, #12]
 800245c:	681b      	ldr	r3, [r3, #0]
 800245e:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002462:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002464:	69fb      	ldr	r3, [r7, #28]
 8002466:	9300      	str	r3, [sp, #0]
 8002468:	2319      	movs	r3, #25
 800246a:	2201      	movs	r2, #1
 800246c:	490f      	ldr	r1, [pc, #60]	; (80024ac <HAL_I2C_IsDeviceReady+0x254>)
 800246e:	68f8      	ldr	r0, [r7, #12]
 8002470:	f000 f970 	bl	8002754 <I2C_WaitOnFlagUntilTimeout>
 8002474:	4603      	mov	r3, r0
 8002476:	2b00      	cmp	r3, #0
 8002478:	d001      	beq.n	800247e <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 800247a:	2301      	movs	r3, #1
 800247c:	e012      	b.n	80024a4 <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 800247e:	69bb      	ldr	r3, [r7, #24]
 8002480:	3301      	adds	r3, #1
 8002482:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 8002484:	69ba      	ldr	r2, [r7, #24]
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	429a      	cmp	r2, r3
 800248a:	f4ff af32 	bcc.w	80022f2 <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 800248e:	68fb      	ldr	r3, [r7, #12]
 8002490:	2220      	movs	r2, #32
 8002492:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002496:	68fb      	ldr	r3, [r7, #12]
 8002498:	2200      	movs	r2, #0
 800249a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 800249e:	2301      	movs	r3, #1
 80024a0:	e000      	b.n	80024a4 <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 80024a2:	2302      	movs	r3, #2
  }
}
 80024a4:	4618      	mov	r0, r3
 80024a6:	3720      	adds	r7, #32
 80024a8:	46bd      	mov	sp, r7
 80024aa:	bd80      	pop	{r7, pc}
 80024ac:	00100002 	.word	0x00100002
 80024b0:	ffff0000 	.word	0xffff0000

080024b4 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 80024b4:	b580      	push	{r7, lr}
 80024b6:	b088      	sub	sp, #32
 80024b8:	af02      	add	r7, sp, #8
 80024ba:	60f8      	str	r0, [r7, #12]
 80024bc:	607a      	str	r2, [r7, #4]
 80024be:	603b      	str	r3, [r7, #0]
 80024c0:	460b      	mov	r3, r1
 80024c2:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80024c4:	68fb      	ldr	r3, [r7, #12]
 80024c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80024c8:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80024ca:	697b      	ldr	r3, [r7, #20]
 80024cc:	2b08      	cmp	r3, #8
 80024ce:	d006      	beq.n	80024de <I2C_MasterRequestWrite+0x2a>
 80024d0:	697b      	ldr	r3, [r7, #20]
 80024d2:	2b01      	cmp	r3, #1
 80024d4:	d003      	beq.n	80024de <I2C_MasterRequestWrite+0x2a>
 80024d6:	697b      	ldr	r3, [r7, #20]
 80024d8:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80024dc:	d108      	bne.n	80024f0 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80024de:	68fb      	ldr	r3, [r7, #12]
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	681a      	ldr	r2, [r3, #0]
 80024e4:	68fb      	ldr	r3, [r7, #12]
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80024ec:	601a      	str	r2, [r3, #0]
 80024ee:	e00b      	b.n	8002508 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 80024f0:	68fb      	ldr	r3, [r7, #12]
 80024f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024f4:	2b12      	cmp	r3, #18
 80024f6:	d107      	bne.n	8002508 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80024f8:	68fb      	ldr	r3, [r7, #12]
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	681a      	ldr	r2, [r3, #0]
 80024fe:	68fb      	ldr	r3, [r7, #12]
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002506:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002508:	683b      	ldr	r3, [r7, #0]
 800250a:	9300      	str	r3, [sp, #0]
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	2200      	movs	r2, #0
 8002510:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002514:	68f8      	ldr	r0, [r7, #12]
 8002516:	f000 f91d 	bl	8002754 <I2C_WaitOnFlagUntilTimeout>
 800251a:	4603      	mov	r3, r0
 800251c:	2b00      	cmp	r3, #0
 800251e:	d00d      	beq.n	800253c <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002520:	68fb      	ldr	r3, [r7, #12]
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800252a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800252e:	d103      	bne.n	8002538 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002530:	68fb      	ldr	r3, [r7, #12]
 8002532:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002536:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8002538:	2303      	movs	r3, #3
 800253a:	e035      	b.n	80025a8 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800253c:	68fb      	ldr	r3, [r7, #12]
 800253e:	691b      	ldr	r3, [r3, #16]
 8002540:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002544:	d108      	bne.n	8002558 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002546:	897b      	ldrh	r3, [r7, #10]
 8002548:	b2db      	uxtb	r3, r3
 800254a:	461a      	mov	r2, r3
 800254c:	68fb      	ldr	r3, [r7, #12]
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8002554:	611a      	str	r2, [r3, #16]
 8002556:	e01b      	b.n	8002590 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8002558:	897b      	ldrh	r3, [r7, #10]
 800255a:	11db      	asrs	r3, r3, #7
 800255c:	b2db      	uxtb	r3, r3
 800255e:	f003 0306 	and.w	r3, r3, #6
 8002562:	b2db      	uxtb	r3, r3
 8002564:	f063 030f 	orn	r3, r3, #15
 8002568:	b2da      	uxtb	r2, r3
 800256a:	68fb      	ldr	r3, [r7, #12]
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8002570:	683b      	ldr	r3, [r7, #0]
 8002572:	687a      	ldr	r2, [r7, #4]
 8002574:	490e      	ldr	r1, [pc, #56]	; (80025b0 <I2C_MasterRequestWrite+0xfc>)
 8002576:	68f8      	ldr	r0, [r7, #12]
 8002578:	f000 f943 	bl	8002802 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800257c:	4603      	mov	r3, r0
 800257e:	2b00      	cmp	r3, #0
 8002580:	d001      	beq.n	8002586 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8002582:	2301      	movs	r3, #1
 8002584:	e010      	b.n	80025a8 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8002586:	897b      	ldrh	r3, [r7, #10]
 8002588:	b2da      	uxtb	r2, r3
 800258a:	68fb      	ldr	r3, [r7, #12]
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002590:	683b      	ldr	r3, [r7, #0]
 8002592:	687a      	ldr	r2, [r7, #4]
 8002594:	4907      	ldr	r1, [pc, #28]	; (80025b4 <I2C_MasterRequestWrite+0x100>)
 8002596:	68f8      	ldr	r0, [r7, #12]
 8002598:	f000 f933 	bl	8002802 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800259c:	4603      	mov	r3, r0
 800259e:	2b00      	cmp	r3, #0
 80025a0:	d001      	beq.n	80025a6 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 80025a2:	2301      	movs	r3, #1
 80025a4:	e000      	b.n	80025a8 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 80025a6:	2300      	movs	r3, #0
}
 80025a8:	4618      	mov	r0, r3
 80025aa:	3718      	adds	r7, #24
 80025ac:	46bd      	mov	sp, r7
 80025ae:	bd80      	pop	{r7, pc}
 80025b0:	00010008 	.word	0x00010008
 80025b4:	00010002 	.word	0x00010002

080025b8 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 80025b8:	b580      	push	{r7, lr}
 80025ba:	b088      	sub	sp, #32
 80025bc:	af02      	add	r7, sp, #8
 80025be:	60f8      	str	r0, [r7, #12]
 80025c0:	607a      	str	r2, [r7, #4]
 80025c2:	603b      	str	r3, [r7, #0]
 80025c4:	460b      	mov	r3, r1
 80025c6:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80025c8:	68fb      	ldr	r3, [r7, #12]
 80025ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80025cc:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80025ce:	68fb      	ldr	r3, [r7, #12]
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	681a      	ldr	r2, [r3, #0]
 80025d4:	68fb      	ldr	r3, [r7, #12]
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80025dc:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80025de:	697b      	ldr	r3, [r7, #20]
 80025e0:	2b08      	cmp	r3, #8
 80025e2:	d006      	beq.n	80025f2 <I2C_MasterRequestRead+0x3a>
 80025e4:	697b      	ldr	r3, [r7, #20]
 80025e6:	2b01      	cmp	r3, #1
 80025e8:	d003      	beq.n	80025f2 <I2C_MasterRequestRead+0x3a>
 80025ea:	697b      	ldr	r3, [r7, #20]
 80025ec:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80025f0:	d108      	bne.n	8002604 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80025f2:	68fb      	ldr	r3, [r7, #12]
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	681a      	ldr	r2, [r3, #0]
 80025f8:	68fb      	ldr	r3, [r7, #12]
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002600:	601a      	str	r2, [r3, #0]
 8002602:	e00b      	b.n	800261c <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 8002604:	68fb      	ldr	r3, [r7, #12]
 8002606:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002608:	2b11      	cmp	r3, #17
 800260a:	d107      	bne.n	800261c <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800260c:	68fb      	ldr	r3, [r7, #12]
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	681a      	ldr	r2, [r3, #0]
 8002612:	68fb      	ldr	r3, [r7, #12]
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800261a:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800261c:	683b      	ldr	r3, [r7, #0]
 800261e:	9300      	str	r3, [sp, #0]
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	2200      	movs	r2, #0
 8002624:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002628:	68f8      	ldr	r0, [r7, #12]
 800262a:	f000 f893 	bl	8002754 <I2C_WaitOnFlagUntilTimeout>
 800262e:	4603      	mov	r3, r0
 8002630:	2b00      	cmp	r3, #0
 8002632:	d00d      	beq.n	8002650 <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002634:	68fb      	ldr	r3, [r7, #12]
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800263e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002642:	d103      	bne.n	800264c <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002644:	68fb      	ldr	r3, [r7, #12]
 8002646:	f44f 7200 	mov.w	r2, #512	; 0x200
 800264a:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800264c:	2303      	movs	r3, #3
 800264e:	e079      	b.n	8002744 <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002650:	68fb      	ldr	r3, [r7, #12]
 8002652:	691b      	ldr	r3, [r3, #16]
 8002654:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002658:	d108      	bne.n	800266c <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 800265a:	897b      	ldrh	r3, [r7, #10]
 800265c:	b2db      	uxtb	r3, r3
 800265e:	f043 0301 	orr.w	r3, r3, #1
 8002662:	b2da      	uxtb	r2, r3
 8002664:	68fb      	ldr	r3, [r7, #12]
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	611a      	str	r2, [r3, #16]
 800266a:	e05f      	b.n	800272c <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 800266c:	897b      	ldrh	r3, [r7, #10]
 800266e:	11db      	asrs	r3, r3, #7
 8002670:	b2db      	uxtb	r3, r3
 8002672:	f003 0306 	and.w	r3, r3, #6
 8002676:	b2db      	uxtb	r3, r3
 8002678:	f063 030f 	orn	r3, r3, #15
 800267c:	b2da      	uxtb	r2, r3
 800267e:	68fb      	ldr	r3, [r7, #12]
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8002684:	683b      	ldr	r3, [r7, #0]
 8002686:	687a      	ldr	r2, [r7, #4]
 8002688:	4930      	ldr	r1, [pc, #192]	; (800274c <I2C_MasterRequestRead+0x194>)
 800268a:	68f8      	ldr	r0, [r7, #12]
 800268c:	f000 f8b9 	bl	8002802 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002690:	4603      	mov	r3, r0
 8002692:	2b00      	cmp	r3, #0
 8002694:	d001      	beq.n	800269a <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 8002696:	2301      	movs	r3, #1
 8002698:	e054      	b.n	8002744 <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800269a:	897b      	ldrh	r3, [r7, #10]
 800269c:	b2da      	uxtb	r2, r3
 800269e:	68fb      	ldr	r3, [r7, #12]
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80026a4:	683b      	ldr	r3, [r7, #0]
 80026a6:	687a      	ldr	r2, [r7, #4]
 80026a8:	4929      	ldr	r1, [pc, #164]	; (8002750 <I2C_MasterRequestRead+0x198>)
 80026aa:	68f8      	ldr	r0, [r7, #12]
 80026ac:	f000 f8a9 	bl	8002802 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80026b0:	4603      	mov	r3, r0
 80026b2:	2b00      	cmp	r3, #0
 80026b4:	d001      	beq.n	80026ba <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 80026b6:	2301      	movs	r3, #1
 80026b8:	e044      	b.n	8002744 <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80026ba:	2300      	movs	r3, #0
 80026bc:	613b      	str	r3, [r7, #16]
 80026be:	68fb      	ldr	r3, [r7, #12]
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	695b      	ldr	r3, [r3, #20]
 80026c4:	613b      	str	r3, [r7, #16]
 80026c6:	68fb      	ldr	r3, [r7, #12]
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	699b      	ldr	r3, [r3, #24]
 80026cc:	613b      	str	r3, [r7, #16]
 80026ce:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80026d0:	68fb      	ldr	r3, [r7, #12]
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	681a      	ldr	r2, [r3, #0]
 80026d6:	68fb      	ldr	r3, [r7, #12]
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80026de:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80026e0:	683b      	ldr	r3, [r7, #0]
 80026e2:	9300      	str	r3, [sp, #0]
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	2200      	movs	r2, #0
 80026e8:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80026ec:	68f8      	ldr	r0, [r7, #12]
 80026ee:	f000 f831 	bl	8002754 <I2C_WaitOnFlagUntilTimeout>
 80026f2:	4603      	mov	r3, r0
 80026f4:	2b00      	cmp	r3, #0
 80026f6:	d00d      	beq.n	8002714 <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80026f8:	68fb      	ldr	r3, [r7, #12]
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002702:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002706:	d103      	bne.n	8002710 <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002708:	68fb      	ldr	r3, [r7, #12]
 800270a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800270e:	641a      	str	r2, [r3, #64]	; 0x40
      }
      return HAL_TIMEOUT;
 8002710:	2303      	movs	r3, #3
 8002712:	e017      	b.n	8002744 <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 8002714:	897b      	ldrh	r3, [r7, #10]
 8002716:	11db      	asrs	r3, r3, #7
 8002718:	b2db      	uxtb	r3, r3
 800271a:	f003 0306 	and.w	r3, r3, #6
 800271e:	b2db      	uxtb	r3, r3
 8002720:	f063 030e 	orn	r3, r3, #14
 8002724:	b2da      	uxtb	r2, r3
 8002726:	68fb      	ldr	r3, [r7, #12]
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800272c:	683b      	ldr	r3, [r7, #0]
 800272e:	687a      	ldr	r2, [r7, #4]
 8002730:	4907      	ldr	r1, [pc, #28]	; (8002750 <I2C_MasterRequestRead+0x198>)
 8002732:	68f8      	ldr	r0, [r7, #12]
 8002734:	f000 f865 	bl	8002802 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002738:	4603      	mov	r3, r0
 800273a:	2b00      	cmp	r3, #0
 800273c:	d001      	beq.n	8002742 <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 800273e:	2301      	movs	r3, #1
 8002740:	e000      	b.n	8002744 <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 8002742:	2300      	movs	r3, #0
}
 8002744:	4618      	mov	r0, r3
 8002746:	3718      	adds	r7, #24
 8002748:	46bd      	mov	sp, r7
 800274a:	bd80      	pop	{r7, pc}
 800274c:	00010008 	.word	0x00010008
 8002750:	00010002 	.word	0x00010002

08002754 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8002754:	b580      	push	{r7, lr}
 8002756:	b084      	sub	sp, #16
 8002758:	af00      	add	r7, sp, #0
 800275a:	60f8      	str	r0, [r7, #12]
 800275c:	60b9      	str	r1, [r7, #8]
 800275e:	603b      	str	r3, [r7, #0]
 8002760:	4613      	mov	r3, r2
 8002762:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002764:	e025      	b.n	80027b2 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002766:	683b      	ldr	r3, [r7, #0]
 8002768:	f1b3 3fff 	cmp.w	r3, #4294967295
 800276c:	d021      	beq.n	80027b2 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800276e:	f7fe fe53 	bl	8001418 <HAL_GetTick>
 8002772:	4602      	mov	r2, r0
 8002774:	69bb      	ldr	r3, [r7, #24]
 8002776:	1ad3      	subs	r3, r2, r3
 8002778:	683a      	ldr	r2, [r7, #0]
 800277a:	429a      	cmp	r2, r3
 800277c:	d302      	bcc.n	8002784 <I2C_WaitOnFlagUntilTimeout+0x30>
 800277e:	683b      	ldr	r3, [r7, #0]
 8002780:	2b00      	cmp	r3, #0
 8002782:	d116      	bne.n	80027b2 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8002784:	68fb      	ldr	r3, [r7, #12]
 8002786:	2200      	movs	r2, #0
 8002788:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 800278a:	68fb      	ldr	r3, [r7, #12]
 800278c:	2220      	movs	r2, #32
 800278e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8002792:	68fb      	ldr	r3, [r7, #12]
 8002794:	2200      	movs	r2, #0
 8002796:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800279a:	68fb      	ldr	r3, [r7, #12]
 800279c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800279e:	f043 0220 	orr.w	r2, r3, #32
 80027a2:	68fb      	ldr	r3, [r7, #12]
 80027a4:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80027a6:	68fb      	ldr	r3, [r7, #12]
 80027a8:	2200      	movs	r2, #0
 80027aa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80027ae:	2301      	movs	r3, #1
 80027b0:	e023      	b.n	80027fa <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80027b2:	68bb      	ldr	r3, [r7, #8]
 80027b4:	0c1b      	lsrs	r3, r3, #16
 80027b6:	b2db      	uxtb	r3, r3
 80027b8:	2b01      	cmp	r3, #1
 80027ba:	d10d      	bne.n	80027d8 <I2C_WaitOnFlagUntilTimeout+0x84>
 80027bc:	68fb      	ldr	r3, [r7, #12]
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	695b      	ldr	r3, [r3, #20]
 80027c2:	43da      	mvns	r2, r3
 80027c4:	68bb      	ldr	r3, [r7, #8]
 80027c6:	4013      	ands	r3, r2
 80027c8:	b29b      	uxth	r3, r3
 80027ca:	2b00      	cmp	r3, #0
 80027cc:	bf0c      	ite	eq
 80027ce:	2301      	moveq	r3, #1
 80027d0:	2300      	movne	r3, #0
 80027d2:	b2db      	uxtb	r3, r3
 80027d4:	461a      	mov	r2, r3
 80027d6:	e00c      	b.n	80027f2 <I2C_WaitOnFlagUntilTimeout+0x9e>
 80027d8:	68fb      	ldr	r3, [r7, #12]
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	699b      	ldr	r3, [r3, #24]
 80027de:	43da      	mvns	r2, r3
 80027e0:	68bb      	ldr	r3, [r7, #8]
 80027e2:	4013      	ands	r3, r2
 80027e4:	b29b      	uxth	r3, r3
 80027e6:	2b00      	cmp	r3, #0
 80027e8:	bf0c      	ite	eq
 80027ea:	2301      	moveq	r3, #1
 80027ec:	2300      	movne	r3, #0
 80027ee:	b2db      	uxtb	r3, r3
 80027f0:	461a      	mov	r2, r3
 80027f2:	79fb      	ldrb	r3, [r7, #7]
 80027f4:	429a      	cmp	r2, r3
 80027f6:	d0b6      	beq.n	8002766 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80027f8:	2300      	movs	r3, #0
}
 80027fa:	4618      	mov	r0, r3
 80027fc:	3710      	adds	r7, #16
 80027fe:	46bd      	mov	sp, r7
 8002800:	bd80      	pop	{r7, pc}

08002802 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8002802:	b580      	push	{r7, lr}
 8002804:	b084      	sub	sp, #16
 8002806:	af00      	add	r7, sp, #0
 8002808:	60f8      	str	r0, [r7, #12]
 800280a:	60b9      	str	r1, [r7, #8]
 800280c:	607a      	str	r2, [r7, #4]
 800280e:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002810:	e051      	b.n	80028b6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002812:	68fb      	ldr	r3, [r7, #12]
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	695b      	ldr	r3, [r3, #20]
 8002818:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800281c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002820:	d123      	bne.n	800286a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002822:	68fb      	ldr	r3, [r7, #12]
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	681a      	ldr	r2, [r3, #0]
 8002828:	68fb      	ldr	r3, [r7, #12]
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002830:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002832:	68fb      	ldr	r3, [r7, #12]
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800283a:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800283c:	68fb      	ldr	r3, [r7, #12]
 800283e:	2200      	movs	r2, #0
 8002840:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002842:	68fb      	ldr	r3, [r7, #12]
 8002844:	2220      	movs	r2, #32
 8002846:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800284a:	68fb      	ldr	r3, [r7, #12]
 800284c:	2200      	movs	r2, #0
 800284e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002852:	68fb      	ldr	r3, [r7, #12]
 8002854:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002856:	f043 0204 	orr.w	r2, r3, #4
 800285a:	68fb      	ldr	r3, [r7, #12]
 800285c:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800285e:	68fb      	ldr	r3, [r7, #12]
 8002860:	2200      	movs	r2, #0
 8002862:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8002866:	2301      	movs	r3, #1
 8002868:	e046      	b.n	80028f8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002870:	d021      	beq.n	80028b6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002872:	f7fe fdd1 	bl	8001418 <HAL_GetTick>
 8002876:	4602      	mov	r2, r0
 8002878:	683b      	ldr	r3, [r7, #0]
 800287a:	1ad3      	subs	r3, r2, r3
 800287c:	687a      	ldr	r2, [r7, #4]
 800287e:	429a      	cmp	r2, r3
 8002880:	d302      	bcc.n	8002888 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	2b00      	cmp	r3, #0
 8002886:	d116      	bne.n	80028b6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002888:	68fb      	ldr	r3, [r7, #12]
 800288a:	2200      	movs	r2, #0
 800288c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800288e:	68fb      	ldr	r3, [r7, #12]
 8002890:	2220      	movs	r2, #32
 8002892:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002896:	68fb      	ldr	r3, [r7, #12]
 8002898:	2200      	movs	r2, #0
 800289a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800289e:	68fb      	ldr	r3, [r7, #12]
 80028a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028a2:	f043 0220 	orr.w	r2, r3, #32
 80028a6:	68fb      	ldr	r3, [r7, #12]
 80028a8:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80028aa:	68fb      	ldr	r3, [r7, #12]
 80028ac:	2200      	movs	r2, #0
 80028ae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80028b2:	2301      	movs	r3, #1
 80028b4:	e020      	b.n	80028f8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80028b6:	68bb      	ldr	r3, [r7, #8]
 80028b8:	0c1b      	lsrs	r3, r3, #16
 80028ba:	b2db      	uxtb	r3, r3
 80028bc:	2b01      	cmp	r3, #1
 80028be:	d10c      	bne.n	80028da <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 80028c0:	68fb      	ldr	r3, [r7, #12]
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	695b      	ldr	r3, [r3, #20]
 80028c6:	43da      	mvns	r2, r3
 80028c8:	68bb      	ldr	r3, [r7, #8]
 80028ca:	4013      	ands	r3, r2
 80028cc:	b29b      	uxth	r3, r3
 80028ce:	2b00      	cmp	r3, #0
 80028d0:	bf14      	ite	ne
 80028d2:	2301      	movne	r3, #1
 80028d4:	2300      	moveq	r3, #0
 80028d6:	b2db      	uxtb	r3, r3
 80028d8:	e00b      	b.n	80028f2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 80028da:	68fb      	ldr	r3, [r7, #12]
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	699b      	ldr	r3, [r3, #24]
 80028e0:	43da      	mvns	r2, r3
 80028e2:	68bb      	ldr	r3, [r7, #8]
 80028e4:	4013      	ands	r3, r2
 80028e6:	b29b      	uxth	r3, r3
 80028e8:	2b00      	cmp	r3, #0
 80028ea:	bf14      	ite	ne
 80028ec:	2301      	movne	r3, #1
 80028ee:	2300      	moveq	r3, #0
 80028f0:	b2db      	uxtb	r3, r3
 80028f2:	2b00      	cmp	r3, #0
 80028f4:	d18d      	bne.n	8002812 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 80028f6:	2300      	movs	r3, #0
}
 80028f8:	4618      	mov	r0, r3
 80028fa:	3710      	adds	r7, #16
 80028fc:	46bd      	mov	sp, r7
 80028fe:	bd80      	pop	{r7, pc}

08002900 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002900:	b580      	push	{r7, lr}
 8002902:	b084      	sub	sp, #16
 8002904:	af00      	add	r7, sp, #0
 8002906:	60f8      	str	r0, [r7, #12]
 8002908:	60b9      	str	r1, [r7, #8]
 800290a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800290c:	e02d      	b.n	800296a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800290e:	68f8      	ldr	r0, [r7, #12]
 8002910:	f000 f8ce 	bl	8002ab0 <I2C_IsAcknowledgeFailed>
 8002914:	4603      	mov	r3, r0
 8002916:	2b00      	cmp	r3, #0
 8002918:	d001      	beq.n	800291e <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800291a:	2301      	movs	r3, #1
 800291c:	e02d      	b.n	800297a <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800291e:	68bb      	ldr	r3, [r7, #8]
 8002920:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002924:	d021      	beq.n	800296a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002926:	f7fe fd77 	bl	8001418 <HAL_GetTick>
 800292a:	4602      	mov	r2, r0
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	1ad3      	subs	r3, r2, r3
 8002930:	68ba      	ldr	r2, [r7, #8]
 8002932:	429a      	cmp	r2, r3
 8002934:	d302      	bcc.n	800293c <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8002936:	68bb      	ldr	r3, [r7, #8]
 8002938:	2b00      	cmp	r3, #0
 800293a:	d116      	bne.n	800296a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800293c:	68fb      	ldr	r3, [r7, #12]
 800293e:	2200      	movs	r2, #0
 8002940:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002942:	68fb      	ldr	r3, [r7, #12]
 8002944:	2220      	movs	r2, #32
 8002946:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800294a:	68fb      	ldr	r3, [r7, #12]
 800294c:	2200      	movs	r2, #0
 800294e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002952:	68fb      	ldr	r3, [r7, #12]
 8002954:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002956:	f043 0220 	orr.w	r2, r3, #32
 800295a:	68fb      	ldr	r3, [r7, #12]
 800295c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800295e:	68fb      	ldr	r3, [r7, #12]
 8002960:	2200      	movs	r2, #0
 8002962:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002966:	2301      	movs	r3, #1
 8002968:	e007      	b.n	800297a <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800296a:	68fb      	ldr	r3, [r7, #12]
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	695b      	ldr	r3, [r3, #20]
 8002970:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002974:	2b80      	cmp	r3, #128	; 0x80
 8002976:	d1ca      	bne.n	800290e <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002978:	2300      	movs	r3, #0
}
 800297a:	4618      	mov	r0, r3
 800297c:	3710      	adds	r7, #16
 800297e:	46bd      	mov	sp, r7
 8002980:	bd80      	pop	{r7, pc}

08002982 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002982:	b580      	push	{r7, lr}
 8002984:	b084      	sub	sp, #16
 8002986:	af00      	add	r7, sp, #0
 8002988:	60f8      	str	r0, [r7, #12]
 800298a:	60b9      	str	r1, [r7, #8]
 800298c:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800298e:	e02d      	b.n	80029ec <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002990:	68f8      	ldr	r0, [r7, #12]
 8002992:	f000 f88d 	bl	8002ab0 <I2C_IsAcknowledgeFailed>
 8002996:	4603      	mov	r3, r0
 8002998:	2b00      	cmp	r3, #0
 800299a:	d001      	beq.n	80029a0 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800299c:	2301      	movs	r3, #1
 800299e:	e02d      	b.n	80029fc <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80029a0:	68bb      	ldr	r3, [r7, #8]
 80029a2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80029a6:	d021      	beq.n	80029ec <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80029a8:	f7fe fd36 	bl	8001418 <HAL_GetTick>
 80029ac:	4602      	mov	r2, r0
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	1ad3      	subs	r3, r2, r3
 80029b2:	68ba      	ldr	r2, [r7, #8]
 80029b4:	429a      	cmp	r2, r3
 80029b6:	d302      	bcc.n	80029be <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80029b8:	68bb      	ldr	r3, [r7, #8]
 80029ba:	2b00      	cmp	r3, #0
 80029bc:	d116      	bne.n	80029ec <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80029be:	68fb      	ldr	r3, [r7, #12]
 80029c0:	2200      	movs	r2, #0
 80029c2:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80029c4:	68fb      	ldr	r3, [r7, #12]
 80029c6:	2220      	movs	r2, #32
 80029c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80029cc:	68fb      	ldr	r3, [r7, #12]
 80029ce:	2200      	movs	r2, #0
 80029d0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80029d4:	68fb      	ldr	r3, [r7, #12]
 80029d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029d8:	f043 0220 	orr.w	r2, r3, #32
 80029dc:	68fb      	ldr	r3, [r7, #12]
 80029de:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80029e0:	68fb      	ldr	r3, [r7, #12]
 80029e2:	2200      	movs	r2, #0
 80029e4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80029e8:	2301      	movs	r3, #1
 80029ea:	e007      	b.n	80029fc <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80029ec:	68fb      	ldr	r3, [r7, #12]
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	695b      	ldr	r3, [r3, #20]
 80029f2:	f003 0304 	and.w	r3, r3, #4
 80029f6:	2b04      	cmp	r3, #4
 80029f8:	d1ca      	bne.n	8002990 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80029fa:	2300      	movs	r3, #0
}
 80029fc:	4618      	mov	r0, r3
 80029fe:	3710      	adds	r7, #16
 8002a00:	46bd      	mov	sp, r7
 8002a02:	bd80      	pop	{r7, pc}

08002a04 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002a04:	b580      	push	{r7, lr}
 8002a06:	b084      	sub	sp, #16
 8002a08:	af00      	add	r7, sp, #0
 8002a0a:	60f8      	str	r0, [r7, #12]
 8002a0c:	60b9      	str	r1, [r7, #8]
 8002a0e:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8002a10:	e042      	b.n	8002a98 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8002a12:	68fb      	ldr	r3, [r7, #12]
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	695b      	ldr	r3, [r3, #20]
 8002a18:	f003 0310 	and.w	r3, r3, #16
 8002a1c:	2b10      	cmp	r3, #16
 8002a1e:	d119      	bne.n	8002a54 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002a20:	68fb      	ldr	r3, [r7, #12]
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	f06f 0210 	mvn.w	r2, #16
 8002a28:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8002a2a:	68fb      	ldr	r3, [r7, #12]
 8002a2c:	2200      	movs	r2, #0
 8002a2e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002a30:	68fb      	ldr	r3, [r7, #12]
 8002a32:	2220      	movs	r2, #32
 8002a34:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002a38:	68fb      	ldr	r3, [r7, #12]
 8002a3a:	2200      	movs	r2, #0
 8002a3c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8002a40:	68fb      	ldr	r3, [r7, #12]
 8002a42:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002a44:	68fb      	ldr	r3, [r7, #12]
 8002a46:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002a48:	68fb      	ldr	r3, [r7, #12]
 8002a4a:	2200      	movs	r2, #0
 8002a4c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8002a50:	2301      	movs	r3, #1
 8002a52:	e029      	b.n	8002aa8 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002a54:	f7fe fce0 	bl	8001418 <HAL_GetTick>
 8002a58:	4602      	mov	r2, r0
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	1ad3      	subs	r3, r2, r3
 8002a5e:	68ba      	ldr	r2, [r7, #8]
 8002a60:	429a      	cmp	r2, r3
 8002a62:	d302      	bcc.n	8002a6a <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8002a64:	68bb      	ldr	r3, [r7, #8]
 8002a66:	2b00      	cmp	r3, #0
 8002a68:	d116      	bne.n	8002a98 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8002a6a:	68fb      	ldr	r3, [r7, #12]
 8002a6c:	2200      	movs	r2, #0
 8002a6e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002a70:	68fb      	ldr	r3, [r7, #12]
 8002a72:	2220      	movs	r2, #32
 8002a74:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002a78:	68fb      	ldr	r3, [r7, #12]
 8002a7a:	2200      	movs	r2, #0
 8002a7c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002a80:	68fb      	ldr	r3, [r7, #12]
 8002a82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a84:	f043 0220 	orr.w	r2, r3, #32
 8002a88:	68fb      	ldr	r3, [r7, #12]
 8002a8a:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002a8c:	68fb      	ldr	r3, [r7, #12]
 8002a8e:	2200      	movs	r2, #0
 8002a90:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8002a94:	2301      	movs	r3, #1
 8002a96:	e007      	b.n	8002aa8 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8002a98:	68fb      	ldr	r3, [r7, #12]
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	695b      	ldr	r3, [r3, #20]
 8002a9e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002aa2:	2b40      	cmp	r3, #64	; 0x40
 8002aa4:	d1b5      	bne.n	8002a12 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8002aa6:	2300      	movs	r3, #0
}
 8002aa8:	4618      	mov	r0, r3
 8002aaa:	3710      	adds	r7, #16
 8002aac:	46bd      	mov	sp, r7
 8002aae:	bd80      	pop	{r7, pc}

08002ab0 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8002ab0:	b480      	push	{r7}
 8002ab2:	b083      	sub	sp, #12
 8002ab4:	af00      	add	r7, sp, #0
 8002ab6:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	695b      	ldr	r3, [r3, #20]
 8002abe:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002ac2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002ac6:	d11b      	bne.n	8002b00 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002ad0:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	2200      	movs	r2, #0
 8002ad6:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	2220      	movs	r2, #32
 8002adc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	2200      	movs	r2, #0
 8002ae4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002aec:	f043 0204 	orr.w	r2, r3, #4
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	2200      	movs	r2, #0
 8002af8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8002afc:	2301      	movs	r3, #1
 8002afe:	e000      	b.n	8002b02 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8002b00:	2300      	movs	r3, #0
}
 8002b02:	4618      	mov	r0, r3
 8002b04:	370c      	adds	r7, #12
 8002b06:	46bd      	mov	sp, r7
 8002b08:	bc80      	pop	{r7}
 8002b0a:	4770      	bx	lr

08002b0c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002b0c:	b580      	push	{r7, lr}
 8002b0e:	b088      	sub	sp, #32
 8002b10:	af00      	add	r7, sp, #0
 8002b12:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check the parameters */
  if(RCC_OscInitStruct == NULL)
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	2b00      	cmp	r3, #0
 8002b18:	d101      	bne.n	8002b1e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002b1a:	2301      	movs	r3, #1
 8002b1c:	e31d      	b.n	800315a <HAL_RCC_OscConfig+0x64e>
  }

  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002b1e:	4b94      	ldr	r3, [pc, #592]	; (8002d70 <HAL_RCC_OscConfig+0x264>)
 8002b20:	689b      	ldr	r3, [r3, #8]
 8002b22:	f003 030c 	and.w	r3, r3, #12
 8002b26:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002b28:	4b91      	ldr	r3, [pc, #580]	; (8002d70 <HAL_RCC_OscConfig+0x264>)
 8002b2a:	689b      	ldr	r3, [r3, #8]
 8002b2c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002b30:	617b      	str	r3, [r7, #20]

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	f003 0301 	and.w	r3, r3, #1
 8002b3a:	2b00      	cmp	r3, #0
 8002b3c:	d07b      	beq.n	8002c36 <HAL_RCC_OscConfig+0x12a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002b3e:	69bb      	ldr	r3, [r7, #24]
 8002b40:	2b08      	cmp	r3, #8
 8002b42:	d006      	beq.n	8002b52 <HAL_RCC_OscConfig+0x46>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8002b44:	69bb      	ldr	r3, [r7, #24]
 8002b46:	2b0c      	cmp	r3, #12
 8002b48:	d10f      	bne.n	8002b6a <HAL_RCC_OscConfig+0x5e>
 8002b4a:	697b      	ldr	r3, [r7, #20]
 8002b4c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002b50:	d10b      	bne.n	8002b6a <HAL_RCC_OscConfig+0x5e>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002b52:	4b87      	ldr	r3, [pc, #540]	; (8002d70 <HAL_RCC_OscConfig+0x264>)
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b5a:	2b00      	cmp	r3, #0
 8002b5c:	d06a      	beq.n	8002c34 <HAL_RCC_OscConfig+0x128>
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	685b      	ldr	r3, [r3, #4]
 8002b62:	2b00      	cmp	r3, #0
 8002b64:	d166      	bne.n	8002c34 <HAL_RCC_OscConfig+0x128>
      {
        return HAL_ERROR;
 8002b66:	2301      	movs	r3, #1
 8002b68:	e2f7      	b.n	800315a <HAL_RCC_OscConfig+0x64e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	685b      	ldr	r3, [r3, #4]
 8002b6e:	2b01      	cmp	r3, #1
 8002b70:	d106      	bne.n	8002b80 <HAL_RCC_OscConfig+0x74>
 8002b72:	4b7f      	ldr	r3, [pc, #508]	; (8002d70 <HAL_RCC_OscConfig+0x264>)
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	4a7e      	ldr	r2, [pc, #504]	; (8002d70 <HAL_RCC_OscConfig+0x264>)
 8002b78:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002b7c:	6013      	str	r3, [r2, #0]
 8002b7e:	e02d      	b.n	8002bdc <HAL_RCC_OscConfig+0xd0>
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	685b      	ldr	r3, [r3, #4]
 8002b84:	2b00      	cmp	r3, #0
 8002b86:	d10c      	bne.n	8002ba2 <HAL_RCC_OscConfig+0x96>
 8002b88:	4b79      	ldr	r3, [pc, #484]	; (8002d70 <HAL_RCC_OscConfig+0x264>)
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	4a78      	ldr	r2, [pc, #480]	; (8002d70 <HAL_RCC_OscConfig+0x264>)
 8002b8e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002b92:	6013      	str	r3, [r2, #0]
 8002b94:	4b76      	ldr	r3, [pc, #472]	; (8002d70 <HAL_RCC_OscConfig+0x264>)
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	4a75      	ldr	r2, [pc, #468]	; (8002d70 <HAL_RCC_OscConfig+0x264>)
 8002b9a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002b9e:	6013      	str	r3, [r2, #0]
 8002ba0:	e01c      	b.n	8002bdc <HAL_RCC_OscConfig+0xd0>
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	685b      	ldr	r3, [r3, #4]
 8002ba6:	2b05      	cmp	r3, #5
 8002ba8:	d10c      	bne.n	8002bc4 <HAL_RCC_OscConfig+0xb8>
 8002baa:	4b71      	ldr	r3, [pc, #452]	; (8002d70 <HAL_RCC_OscConfig+0x264>)
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	4a70      	ldr	r2, [pc, #448]	; (8002d70 <HAL_RCC_OscConfig+0x264>)
 8002bb0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002bb4:	6013      	str	r3, [r2, #0]
 8002bb6:	4b6e      	ldr	r3, [pc, #440]	; (8002d70 <HAL_RCC_OscConfig+0x264>)
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	4a6d      	ldr	r2, [pc, #436]	; (8002d70 <HAL_RCC_OscConfig+0x264>)
 8002bbc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002bc0:	6013      	str	r3, [r2, #0]
 8002bc2:	e00b      	b.n	8002bdc <HAL_RCC_OscConfig+0xd0>
 8002bc4:	4b6a      	ldr	r3, [pc, #424]	; (8002d70 <HAL_RCC_OscConfig+0x264>)
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	4a69      	ldr	r2, [pc, #420]	; (8002d70 <HAL_RCC_OscConfig+0x264>)
 8002bca:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002bce:	6013      	str	r3, [r2, #0]
 8002bd0:	4b67      	ldr	r3, [pc, #412]	; (8002d70 <HAL_RCC_OscConfig+0x264>)
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	4a66      	ldr	r2, [pc, #408]	; (8002d70 <HAL_RCC_OscConfig+0x264>)
 8002bd6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002bda:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	685b      	ldr	r3, [r3, #4]
 8002be0:	2b00      	cmp	r3, #0
 8002be2:	d013      	beq.n	8002c0c <HAL_RCC_OscConfig+0x100>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002be4:	f7fe fc18 	bl	8001418 <HAL_GetTick>
 8002be8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002bea:	e008      	b.n	8002bfe <HAL_RCC_OscConfig+0xf2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002bec:	f7fe fc14 	bl	8001418 <HAL_GetTick>
 8002bf0:	4602      	mov	r2, r0
 8002bf2:	693b      	ldr	r3, [r7, #16]
 8002bf4:	1ad3      	subs	r3, r2, r3
 8002bf6:	2b64      	cmp	r3, #100	; 0x64
 8002bf8:	d901      	bls.n	8002bfe <HAL_RCC_OscConfig+0xf2>
          {
            return HAL_TIMEOUT;
 8002bfa:	2303      	movs	r3, #3
 8002bfc:	e2ad      	b.n	800315a <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002bfe:	4b5c      	ldr	r3, [pc, #368]	; (8002d70 <HAL_RCC_OscConfig+0x264>)
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c06:	2b00      	cmp	r3, #0
 8002c08:	d0f0      	beq.n	8002bec <HAL_RCC_OscConfig+0xe0>
 8002c0a:	e014      	b.n	8002c36 <HAL_RCC_OscConfig+0x12a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c0c:	f7fe fc04 	bl	8001418 <HAL_GetTick>
 8002c10:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8002c12:	e008      	b.n	8002c26 <HAL_RCC_OscConfig+0x11a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002c14:	f7fe fc00 	bl	8001418 <HAL_GetTick>
 8002c18:	4602      	mov	r2, r0
 8002c1a:	693b      	ldr	r3, [r7, #16]
 8002c1c:	1ad3      	subs	r3, r2, r3
 8002c1e:	2b64      	cmp	r3, #100	; 0x64
 8002c20:	d901      	bls.n	8002c26 <HAL_RCC_OscConfig+0x11a>
          {
            return HAL_TIMEOUT;
 8002c22:	2303      	movs	r3, #3
 8002c24:	e299      	b.n	800315a <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8002c26:	4b52      	ldr	r3, [pc, #328]	; (8002d70 <HAL_RCC_OscConfig+0x264>)
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c2e:	2b00      	cmp	r3, #0
 8002c30:	d1f0      	bne.n	8002c14 <HAL_RCC_OscConfig+0x108>
 8002c32:	e000      	b.n	8002c36 <HAL_RCC_OscConfig+0x12a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002c34:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	f003 0302 	and.w	r3, r3, #2
 8002c3e:	2b00      	cmp	r3, #0
 8002c40:	d05a      	beq.n	8002cf8 <HAL_RCC_OscConfig+0x1ec>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002c42:	69bb      	ldr	r3, [r7, #24]
 8002c44:	2b04      	cmp	r3, #4
 8002c46:	d005      	beq.n	8002c54 <HAL_RCC_OscConfig+0x148>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8002c48:	69bb      	ldr	r3, [r7, #24]
 8002c4a:	2b0c      	cmp	r3, #12
 8002c4c:	d119      	bne.n	8002c82 <HAL_RCC_OscConfig+0x176>
 8002c4e:	697b      	ldr	r3, [r7, #20]
 8002c50:	2b00      	cmp	r3, #0
 8002c52:	d116      	bne.n	8002c82 <HAL_RCC_OscConfig+0x176>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002c54:	4b46      	ldr	r3, [pc, #280]	; (8002d70 <HAL_RCC_OscConfig+0x264>)
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	f003 0302 	and.w	r3, r3, #2
 8002c5c:	2b00      	cmp	r3, #0
 8002c5e:	d005      	beq.n	8002c6c <HAL_RCC_OscConfig+0x160>
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	68db      	ldr	r3, [r3, #12]
 8002c64:	2b01      	cmp	r3, #1
 8002c66:	d001      	beq.n	8002c6c <HAL_RCC_OscConfig+0x160>
      {
        return HAL_ERROR;
 8002c68:	2301      	movs	r3, #1
 8002c6a:	e276      	b.n	800315a <HAL_RCC_OscConfig+0x64e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002c6c:	4b40      	ldr	r3, [pc, #256]	; (8002d70 <HAL_RCC_OscConfig+0x264>)
 8002c6e:	685b      	ldr	r3, [r3, #4]
 8002c70:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	691b      	ldr	r3, [r3, #16]
 8002c78:	021b      	lsls	r3, r3, #8
 8002c7a:	493d      	ldr	r1, [pc, #244]	; (8002d70 <HAL_RCC_OscConfig+0x264>)
 8002c7c:	4313      	orrs	r3, r2
 8002c7e:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002c80:	e03a      	b.n	8002cf8 <HAL_RCC_OscConfig+0x1ec>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	68db      	ldr	r3, [r3, #12]
 8002c86:	2b00      	cmp	r3, #0
 8002c88:	d020      	beq.n	8002ccc <HAL_RCC_OscConfig+0x1c0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002c8a:	4b3a      	ldr	r3, [pc, #232]	; (8002d74 <HAL_RCC_OscConfig+0x268>)
 8002c8c:	2201      	movs	r2, #1
 8002c8e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c90:	f7fe fbc2 	bl	8001418 <HAL_GetTick>
 8002c94:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002c96:	e008      	b.n	8002caa <HAL_RCC_OscConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002c98:	f7fe fbbe 	bl	8001418 <HAL_GetTick>
 8002c9c:	4602      	mov	r2, r0
 8002c9e:	693b      	ldr	r3, [r7, #16]
 8002ca0:	1ad3      	subs	r3, r2, r3
 8002ca2:	2b02      	cmp	r3, #2
 8002ca4:	d901      	bls.n	8002caa <HAL_RCC_OscConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8002ca6:	2303      	movs	r3, #3
 8002ca8:	e257      	b.n	800315a <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002caa:	4b31      	ldr	r3, [pc, #196]	; (8002d70 <HAL_RCC_OscConfig+0x264>)
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	f003 0302 	and.w	r3, r3, #2
 8002cb2:	2b00      	cmp	r3, #0
 8002cb4:	d0f0      	beq.n	8002c98 <HAL_RCC_OscConfig+0x18c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002cb6:	4b2e      	ldr	r3, [pc, #184]	; (8002d70 <HAL_RCC_OscConfig+0x264>)
 8002cb8:	685b      	ldr	r3, [r3, #4]
 8002cba:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	691b      	ldr	r3, [r3, #16]
 8002cc2:	021b      	lsls	r3, r3, #8
 8002cc4:	492a      	ldr	r1, [pc, #168]	; (8002d70 <HAL_RCC_OscConfig+0x264>)
 8002cc6:	4313      	orrs	r3, r2
 8002cc8:	604b      	str	r3, [r1, #4]
 8002cca:	e015      	b.n	8002cf8 <HAL_RCC_OscConfig+0x1ec>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002ccc:	4b29      	ldr	r3, [pc, #164]	; (8002d74 <HAL_RCC_OscConfig+0x268>)
 8002cce:	2200      	movs	r2, #0
 8002cd0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002cd2:	f7fe fba1 	bl	8001418 <HAL_GetTick>
 8002cd6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8002cd8:	e008      	b.n	8002cec <HAL_RCC_OscConfig+0x1e0>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002cda:	f7fe fb9d 	bl	8001418 <HAL_GetTick>
 8002cde:	4602      	mov	r2, r0
 8002ce0:	693b      	ldr	r3, [r7, #16]
 8002ce2:	1ad3      	subs	r3, r2, r3
 8002ce4:	2b02      	cmp	r3, #2
 8002ce6:	d901      	bls.n	8002cec <HAL_RCC_OscConfig+0x1e0>
          {
            return HAL_TIMEOUT;
 8002ce8:	2303      	movs	r3, #3
 8002cea:	e236      	b.n	800315a <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8002cec:	4b20      	ldr	r3, [pc, #128]	; (8002d70 <HAL_RCC_OscConfig+0x264>)
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	f003 0302 	and.w	r3, r3, #2
 8002cf4:	2b00      	cmp	r3, #0
 8002cf6:	d1f0      	bne.n	8002cda <HAL_RCC_OscConfig+0x1ce>
        }
      }
    }
  }
  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	f003 0310 	and.w	r3, r3, #16
 8002d00:	2b00      	cmp	r3, #0
 8002d02:	f000 80b8 	beq.w	8002e76 <HAL_RCC_OscConfig+0x36a>
  {
    /* When the MSI is used as system clock it will not be disabled */
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002d06:	69bb      	ldr	r3, [r7, #24]
 8002d08:	2b00      	cmp	r3, #0
 8002d0a:	d170      	bne.n	8002dee <HAL_RCC_OscConfig+0x2e2>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002d0c:	4b18      	ldr	r3, [pc, #96]	; (8002d70 <HAL_RCC_OscConfig+0x264>)
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002d14:	2b00      	cmp	r3, #0
 8002d16:	d005      	beq.n	8002d24 <HAL_RCC_OscConfig+0x218>
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	699b      	ldr	r3, [r3, #24]
 8002d1c:	2b00      	cmp	r3, #0
 8002d1e:	d101      	bne.n	8002d24 <HAL_RCC_OscConfig+0x218>
      {
        return HAL_ERROR;
 8002d20:	2301      	movs	r3, #1
 8002d22:	e21a      	b.n	800315a <HAL_RCC_OscConfig+0x64e>
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	6a1a      	ldr	r2, [r3, #32]
 8002d28:	4b11      	ldr	r3, [pc, #68]	; (8002d70 <HAL_RCC_OscConfig+0x264>)
 8002d2a:	685b      	ldr	r3, [r3, #4]
 8002d2c:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 8002d30:	429a      	cmp	r2, r3
 8002d32:	d921      	bls.n	8002d78 <HAL_RCC_OscConfig+0x26c>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	6a1b      	ldr	r3, [r3, #32]
 8002d38:	4618      	mov	r0, r3
 8002d3a:	f000 fc7d 	bl	8003638 <RCC_SetFlashLatencyFromMSIRange>
 8002d3e:	4603      	mov	r3, r0
 8002d40:	2b00      	cmp	r3, #0
 8002d42:	d001      	beq.n	8002d48 <HAL_RCC_OscConfig+0x23c>
          {
            return HAL_ERROR;
 8002d44:	2301      	movs	r3, #1
 8002d46:	e208      	b.n	800315a <HAL_RCC_OscConfig+0x64e>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002d48:	4b09      	ldr	r3, [pc, #36]	; (8002d70 <HAL_RCC_OscConfig+0x264>)
 8002d4a:	685b      	ldr	r3, [r3, #4]
 8002d4c:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	6a1b      	ldr	r3, [r3, #32]
 8002d54:	4906      	ldr	r1, [pc, #24]	; (8002d70 <HAL_RCC_OscConfig+0x264>)
 8002d56:	4313      	orrs	r3, r2
 8002d58:	604b      	str	r3, [r1, #4]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002d5a:	4b05      	ldr	r3, [pc, #20]	; (8002d70 <HAL_RCC_OscConfig+0x264>)
 8002d5c:	685b      	ldr	r3, [r3, #4]
 8002d5e:	f023 427f 	bic.w	r2, r3, #4278190080	; 0xff000000
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	69db      	ldr	r3, [r3, #28]
 8002d66:	061b      	lsls	r3, r3, #24
 8002d68:	4901      	ldr	r1, [pc, #4]	; (8002d70 <HAL_RCC_OscConfig+0x264>)
 8002d6a:	4313      	orrs	r3, r2
 8002d6c:	604b      	str	r3, [r1, #4]
 8002d6e:	e020      	b.n	8002db2 <HAL_RCC_OscConfig+0x2a6>
 8002d70:	40023800 	.word	0x40023800
 8002d74:	42470000 	.word	0x42470000
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002d78:	4b99      	ldr	r3, [pc, #612]	; (8002fe0 <HAL_RCC_OscConfig+0x4d4>)
 8002d7a:	685b      	ldr	r3, [r3, #4]
 8002d7c:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	6a1b      	ldr	r3, [r3, #32]
 8002d84:	4996      	ldr	r1, [pc, #600]	; (8002fe0 <HAL_RCC_OscConfig+0x4d4>)
 8002d86:	4313      	orrs	r3, r2
 8002d88:	604b      	str	r3, [r1, #4]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002d8a:	4b95      	ldr	r3, [pc, #596]	; (8002fe0 <HAL_RCC_OscConfig+0x4d4>)
 8002d8c:	685b      	ldr	r3, [r3, #4]
 8002d8e:	f023 427f 	bic.w	r2, r3, #4278190080	; 0xff000000
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	69db      	ldr	r3, [r3, #28]
 8002d96:	061b      	lsls	r3, r3, #24
 8002d98:	4991      	ldr	r1, [pc, #580]	; (8002fe0 <HAL_RCC_OscConfig+0x4d4>)
 8002d9a:	4313      	orrs	r3, r2
 8002d9c:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	6a1b      	ldr	r3, [r3, #32]
 8002da2:	4618      	mov	r0, r3
 8002da4:	f000 fc48 	bl	8003638 <RCC_SetFlashLatencyFromMSIRange>
 8002da8:	4603      	mov	r3, r0
 8002daa:	2b00      	cmp	r3, #0
 8002dac:	d001      	beq.n	8002db2 <HAL_RCC_OscConfig+0x2a6>
          {
            return HAL_ERROR;
 8002dae:	2301      	movs	r3, #1
 8002db0:	e1d3      	b.n	800315a <HAL_RCC_OscConfig+0x64e>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	6a1b      	ldr	r3, [r3, #32]
 8002db6:	0b5b      	lsrs	r3, r3, #13
 8002db8:	3301      	adds	r3, #1
 8002dba:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8002dbe:	fa02 f303 	lsl.w	r3, r2, r3
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 8002dc2:	4a87      	ldr	r2, [pc, #540]	; (8002fe0 <HAL_RCC_OscConfig+0x4d4>)
 8002dc4:	6892      	ldr	r2, [r2, #8]
 8002dc6:	0912      	lsrs	r2, r2, #4
 8002dc8:	f002 020f 	and.w	r2, r2, #15
 8002dcc:	4985      	ldr	r1, [pc, #532]	; (8002fe4 <HAL_RCC_OscConfig+0x4d8>)
 8002dce:	5c8a      	ldrb	r2, [r1, r2]
 8002dd0:	40d3      	lsrs	r3, r2
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8002dd2:	4a85      	ldr	r2, [pc, #532]	; (8002fe8 <HAL_RCC_OscConfig+0x4dc>)
 8002dd4:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8002dd6:	4b85      	ldr	r3, [pc, #532]	; (8002fec <HAL_RCC_OscConfig+0x4e0>)
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	4618      	mov	r0, r3
 8002ddc:	f7fe fad0 	bl	8001380 <HAL_InitTick>
 8002de0:	4603      	mov	r3, r0
 8002de2:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8002de4:	7bfb      	ldrb	r3, [r7, #15]
 8002de6:	2b00      	cmp	r3, #0
 8002de8:	d045      	beq.n	8002e76 <HAL_RCC_OscConfig+0x36a>
        {
          return status;
 8002dea:	7bfb      	ldrb	r3, [r7, #15]
 8002dec:	e1b5      	b.n	800315a <HAL_RCC_OscConfig+0x64e>
    {
      /* Check MSI State */
      assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));

      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	699b      	ldr	r3, [r3, #24]
 8002df2:	2b00      	cmp	r3, #0
 8002df4:	d029      	beq.n	8002e4a <HAL_RCC_OscConfig+0x33e>
      {
        /* Enable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8002df6:	4b7e      	ldr	r3, [pc, #504]	; (8002ff0 <HAL_RCC_OscConfig+0x4e4>)
 8002df8:	2201      	movs	r2, #1
 8002dfa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002dfc:	f7fe fb0c 	bl	8001418 <HAL_GetTick>
 8002e00:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8002e02:	e008      	b.n	8002e16 <HAL_RCC_OscConfig+0x30a>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002e04:	f7fe fb08 	bl	8001418 <HAL_GetTick>
 8002e08:	4602      	mov	r2, r0
 8002e0a:	693b      	ldr	r3, [r7, #16]
 8002e0c:	1ad3      	subs	r3, r2, r3
 8002e0e:	2b02      	cmp	r3, #2
 8002e10:	d901      	bls.n	8002e16 <HAL_RCC_OscConfig+0x30a>
          {
            return HAL_TIMEOUT;
 8002e12:	2303      	movs	r3, #3
 8002e14:	e1a1      	b.n	800315a <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8002e16:	4b72      	ldr	r3, [pc, #456]	; (8002fe0 <HAL_RCC_OscConfig+0x4d4>)
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002e1e:	2b00      	cmp	r3, #0
 8002e20:	d0f0      	beq.n	8002e04 <HAL_RCC_OscConfig+0x2f8>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002e22:	4b6f      	ldr	r3, [pc, #444]	; (8002fe0 <HAL_RCC_OscConfig+0x4d4>)
 8002e24:	685b      	ldr	r3, [r3, #4]
 8002e26:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	6a1b      	ldr	r3, [r3, #32]
 8002e2e:	496c      	ldr	r1, [pc, #432]	; (8002fe0 <HAL_RCC_OscConfig+0x4d4>)
 8002e30:	4313      	orrs	r3, r2
 8002e32:	604b      	str	r3, [r1, #4]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002e34:	4b6a      	ldr	r3, [pc, #424]	; (8002fe0 <HAL_RCC_OscConfig+0x4d4>)
 8002e36:	685b      	ldr	r3, [r3, #4]
 8002e38:	f023 427f 	bic.w	r2, r3, #4278190080	; 0xff000000
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	69db      	ldr	r3, [r3, #28]
 8002e40:	061b      	lsls	r3, r3, #24
 8002e42:	4967      	ldr	r1, [pc, #412]	; (8002fe0 <HAL_RCC_OscConfig+0x4d4>)
 8002e44:	4313      	orrs	r3, r2
 8002e46:	604b      	str	r3, [r1, #4]
 8002e48:	e015      	b.n	8002e76 <HAL_RCC_OscConfig+0x36a>

      }
      else
      {
        /* Disable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8002e4a:	4b69      	ldr	r3, [pc, #420]	; (8002ff0 <HAL_RCC_OscConfig+0x4e4>)
 8002e4c:	2200      	movs	r2, #0
 8002e4e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e50:	f7fe fae2 	bl	8001418 <HAL_GetTick>
 8002e54:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8002e56:	e008      	b.n	8002e6a <HAL_RCC_OscConfig+0x35e>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002e58:	f7fe fade 	bl	8001418 <HAL_GetTick>
 8002e5c:	4602      	mov	r2, r0
 8002e5e:	693b      	ldr	r3, [r7, #16]
 8002e60:	1ad3      	subs	r3, r2, r3
 8002e62:	2b02      	cmp	r3, #2
 8002e64:	d901      	bls.n	8002e6a <HAL_RCC_OscConfig+0x35e>
          {
            return HAL_TIMEOUT;
 8002e66:	2303      	movs	r3, #3
 8002e68:	e177      	b.n	800315a <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8002e6a:	4b5d      	ldr	r3, [pc, #372]	; (8002fe0 <HAL_RCC_OscConfig+0x4d4>)
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002e72:	2b00      	cmp	r3, #0
 8002e74:	d1f0      	bne.n	8002e58 <HAL_RCC_OscConfig+0x34c>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	f003 0308 	and.w	r3, r3, #8
 8002e7e:	2b00      	cmp	r3, #0
 8002e80:	d030      	beq.n	8002ee4 <HAL_RCC_OscConfig+0x3d8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	695b      	ldr	r3, [r3, #20]
 8002e86:	2b00      	cmp	r3, #0
 8002e88:	d016      	beq.n	8002eb8 <HAL_RCC_OscConfig+0x3ac>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002e8a:	4b5a      	ldr	r3, [pc, #360]	; (8002ff4 <HAL_RCC_OscConfig+0x4e8>)
 8002e8c:	2201      	movs	r2, #1
 8002e8e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002e90:	f7fe fac2 	bl	8001418 <HAL_GetTick>
 8002e94:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8002e96:	e008      	b.n	8002eaa <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002e98:	f7fe fabe 	bl	8001418 <HAL_GetTick>
 8002e9c:	4602      	mov	r2, r0
 8002e9e:	693b      	ldr	r3, [r7, #16]
 8002ea0:	1ad3      	subs	r3, r2, r3
 8002ea2:	2b02      	cmp	r3, #2
 8002ea4:	d901      	bls.n	8002eaa <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8002ea6:	2303      	movs	r3, #3
 8002ea8:	e157      	b.n	800315a <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8002eaa:	4b4d      	ldr	r3, [pc, #308]	; (8002fe0 <HAL_RCC_OscConfig+0x4d4>)
 8002eac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002eae:	f003 0302 	and.w	r3, r3, #2
 8002eb2:	2b00      	cmp	r3, #0
 8002eb4:	d0f0      	beq.n	8002e98 <HAL_RCC_OscConfig+0x38c>
 8002eb6:	e015      	b.n	8002ee4 <HAL_RCC_OscConfig+0x3d8>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002eb8:	4b4e      	ldr	r3, [pc, #312]	; (8002ff4 <HAL_RCC_OscConfig+0x4e8>)
 8002eba:	2200      	movs	r2, #0
 8002ebc:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002ebe:	f7fe faab 	bl	8001418 <HAL_GetTick>
 8002ec2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8002ec4:	e008      	b.n	8002ed8 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002ec6:	f7fe faa7 	bl	8001418 <HAL_GetTick>
 8002eca:	4602      	mov	r2, r0
 8002ecc:	693b      	ldr	r3, [r7, #16]
 8002ece:	1ad3      	subs	r3, r2, r3
 8002ed0:	2b02      	cmp	r3, #2
 8002ed2:	d901      	bls.n	8002ed8 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8002ed4:	2303      	movs	r3, #3
 8002ed6:	e140      	b.n	800315a <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8002ed8:	4b41      	ldr	r3, [pc, #260]	; (8002fe0 <HAL_RCC_OscConfig+0x4d4>)
 8002eda:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002edc:	f003 0302 	and.w	r3, r3, #2
 8002ee0:	2b00      	cmp	r3, #0
 8002ee2:	d1f0      	bne.n	8002ec6 <HAL_RCC_OscConfig+0x3ba>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	f003 0304 	and.w	r3, r3, #4
 8002eec:	2b00      	cmp	r3, #0
 8002eee:	f000 80b5 	beq.w	800305c <HAL_RCC_OscConfig+0x550>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002ef2:	2300      	movs	r3, #0
 8002ef4:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002ef6:	4b3a      	ldr	r3, [pc, #232]	; (8002fe0 <HAL_RCC_OscConfig+0x4d4>)
 8002ef8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002efa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002efe:	2b00      	cmp	r3, #0
 8002f00:	d10d      	bne.n	8002f1e <HAL_RCC_OscConfig+0x412>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002f02:	4b37      	ldr	r3, [pc, #220]	; (8002fe0 <HAL_RCC_OscConfig+0x4d4>)
 8002f04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f06:	4a36      	ldr	r2, [pc, #216]	; (8002fe0 <HAL_RCC_OscConfig+0x4d4>)
 8002f08:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002f0c:	6253      	str	r3, [r2, #36]	; 0x24
 8002f0e:	4b34      	ldr	r3, [pc, #208]	; (8002fe0 <HAL_RCC_OscConfig+0x4d4>)
 8002f10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f12:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002f16:	60bb      	str	r3, [r7, #8]
 8002f18:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002f1a:	2301      	movs	r3, #1
 8002f1c:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002f1e:	4b36      	ldr	r3, [pc, #216]	; (8002ff8 <HAL_RCC_OscConfig+0x4ec>)
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002f26:	2b00      	cmp	r3, #0
 8002f28:	d118      	bne.n	8002f5c <HAL_RCC_OscConfig+0x450>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002f2a:	4b33      	ldr	r3, [pc, #204]	; (8002ff8 <HAL_RCC_OscConfig+0x4ec>)
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	4a32      	ldr	r2, [pc, #200]	; (8002ff8 <HAL_RCC_OscConfig+0x4ec>)
 8002f30:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002f34:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002f36:	f7fe fa6f 	bl	8001418 <HAL_GetTick>
 8002f3a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002f3c:	e008      	b.n	8002f50 <HAL_RCC_OscConfig+0x444>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002f3e:	f7fe fa6b 	bl	8001418 <HAL_GetTick>
 8002f42:	4602      	mov	r2, r0
 8002f44:	693b      	ldr	r3, [r7, #16]
 8002f46:	1ad3      	subs	r3, r2, r3
 8002f48:	2b64      	cmp	r3, #100	; 0x64
 8002f4a:	d901      	bls.n	8002f50 <HAL_RCC_OscConfig+0x444>
        {
          return HAL_TIMEOUT;
 8002f4c:	2303      	movs	r3, #3
 8002f4e:	e104      	b.n	800315a <HAL_RCC_OscConfig+0x64e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002f50:	4b29      	ldr	r3, [pc, #164]	; (8002ff8 <HAL_RCC_OscConfig+0x4ec>)
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002f58:	2b00      	cmp	r3, #0
 8002f5a:	d0f0      	beq.n	8002f3e <HAL_RCC_OscConfig+0x432>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	689b      	ldr	r3, [r3, #8]
 8002f60:	2b01      	cmp	r3, #1
 8002f62:	d106      	bne.n	8002f72 <HAL_RCC_OscConfig+0x466>
 8002f64:	4b1e      	ldr	r3, [pc, #120]	; (8002fe0 <HAL_RCC_OscConfig+0x4d4>)
 8002f66:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002f68:	4a1d      	ldr	r2, [pc, #116]	; (8002fe0 <HAL_RCC_OscConfig+0x4d4>)
 8002f6a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002f6e:	6353      	str	r3, [r2, #52]	; 0x34
 8002f70:	e02d      	b.n	8002fce <HAL_RCC_OscConfig+0x4c2>
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	689b      	ldr	r3, [r3, #8]
 8002f76:	2b00      	cmp	r3, #0
 8002f78:	d10c      	bne.n	8002f94 <HAL_RCC_OscConfig+0x488>
 8002f7a:	4b19      	ldr	r3, [pc, #100]	; (8002fe0 <HAL_RCC_OscConfig+0x4d4>)
 8002f7c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002f7e:	4a18      	ldr	r2, [pc, #96]	; (8002fe0 <HAL_RCC_OscConfig+0x4d4>)
 8002f80:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002f84:	6353      	str	r3, [r2, #52]	; 0x34
 8002f86:	4b16      	ldr	r3, [pc, #88]	; (8002fe0 <HAL_RCC_OscConfig+0x4d4>)
 8002f88:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002f8a:	4a15      	ldr	r2, [pc, #84]	; (8002fe0 <HAL_RCC_OscConfig+0x4d4>)
 8002f8c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002f90:	6353      	str	r3, [r2, #52]	; 0x34
 8002f92:	e01c      	b.n	8002fce <HAL_RCC_OscConfig+0x4c2>
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	689b      	ldr	r3, [r3, #8]
 8002f98:	2b05      	cmp	r3, #5
 8002f9a:	d10c      	bne.n	8002fb6 <HAL_RCC_OscConfig+0x4aa>
 8002f9c:	4b10      	ldr	r3, [pc, #64]	; (8002fe0 <HAL_RCC_OscConfig+0x4d4>)
 8002f9e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002fa0:	4a0f      	ldr	r2, [pc, #60]	; (8002fe0 <HAL_RCC_OscConfig+0x4d4>)
 8002fa2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002fa6:	6353      	str	r3, [r2, #52]	; 0x34
 8002fa8:	4b0d      	ldr	r3, [pc, #52]	; (8002fe0 <HAL_RCC_OscConfig+0x4d4>)
 8002faa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002fac:	4a0c      	ldr	r2, [pc, #48]	; (8002fe0 <HAL_RCC_OscConfig+0x4d4>)
 8002fae:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002fb2:	6353      	str	r3, [r2, #52]	; 0x34
 8002fb4:	e00b      	b.n	8002fce <HAL_RCC_OscConfig+0x4c2>
 8002fb6:	4b0a      	ldr	r3, [pc, #40]	; (8002fe0 <HAL_RCC_OscConfig+0x4d4>)
 8002fb8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002fba:	4a09      	ldr	r2, [pc, #36]	; (8002fe0 <HAL_RCC_OscConfig+0x4d4>)
 8002fbc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002fc0:	6353      	str	r3, [r2, #52]	; 0x34
 8002fc2:	4b07      	ldr	r3, [pc, #28]	; (8002fe0 <HAL_RCC_OscConfig+0x4d4>)
 8002fc4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002fc6:	4a06      	ldr	r2, [pc, #24]	; (8002fe0 <HAL_RCC_OscConfig+0x4d4>)
 8002fc8:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002fcc:	6353      	str	r3, [r2, #52]	; 0x34
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	689b      	ldr	r3, [r3, #8]
 8002fd2:	2b00      	cmp	r3, #0
 8002fd4:	d024      	beq.n	8003020 <HAL_RCC_OscConfig+0x514>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002fd6:	f7fe fa1f 	bl	8001418 <HAL_GetTick>
 8002fda:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002fdc:	e019      	b.n	8003012 <HAL_RCC_OscConfig+0x506>
 8002fde:	bf00      	nop
 8002fe0:	40023800 	.word	0x40023800
 8002fe4:	080044d0 	.word	0x080044d0
 8002fe8:	20000000 	.word	0x20000000
 8002fec:	20000004 	.word	0x20000004
 8002ff0:	42470020 	.word	0x42470020
 8002ff4:	42470680 	.word	0x42470680
 8002ff8:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002ffc:	f7fe fa0c 	bl	8001418 <HAL_GetTick>
 8003000:	4602      	mov	r2, r0
 8003002:	693b      	ldr	r3, [r7, #16]
 8003004:	1ad3      	subs	r3, r2, r3
 8003006:	f241 3288 	movw	r2, #5000	; 0x1388
 800300a:	4293      	cmp	r3, r2
 800300c:	d901      	bls.n	8003012 <HAL_RCC_OscConfig+0x506>
        {
          return HAL_TIMEOUT;
 800300e:	2303      	movs	r3, #3
 8003010:	e0a3      	b.n	800315a <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003012:	4b54      	ldr	r3, [pc, #336]	; (8003164 <HAL_RCC_OscConfig+0x658>)
 8003014:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003016:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800301a:	2b00      	cmp	r3, #0
 800301c:	d0ee      	beq.n	8002ffc <HAL_RCC_OscConfig+0x4f0>
 800301e:	e014      	b.n	800304a <HAL_RCC_OscConfig+0x53e>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003020:	f7fe f9fa 	bl	8001418 <HAL_GetTick>
 8003024:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8003026:	e00a      	b.n	800303e <HAL_RCC_OscConfig+0x532>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003028:	f7fe f9f6 	bl	8001418 <HAL_GetTick>
 800302c:	4602      	mov	r2, r0
 800302e:	693b      	ldr	r3, [r7, #16]
 8003030:	1ad3      	subs	r3, r2, r3
 8003032:	f241 3288 	movw	r2, #5000	; 0x1388
 8003036:	4293      	cmp	r3, r2
 8003038:	d901      	bls.n	800303e <HAL_RCC_OscConfig+0x532>
        {
          return HAL_TIMEOUT;
 800303a:	2303      	movs	r3, #3
 800303c:	e08d      	b.n	800315a <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800303e:	4b49      	ldr	r3, [pc, #292]	; (8003164 <HAL_RCC_OscConfig+0x658>)
 8003040:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003042:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003046:	2b00      	cmp	r3, #0
 8003048:	d1ee      	bne.n	8003028 <HAL_RCC_OscConfig+0x51c>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800304a:	7ffb      	ldrb	r3, [r7, #31]
 800304c:	2b01      	cmp	r3, #1
 800304e:	d105      	bne.n	800305c <HAL_RCC_OscConfig+0x550>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003050:	4b44      	ldr	r3, [pc, #272]	; (8003164 <HAL_RCC_OscConfig+0x658>)
 8003052:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003054:	4a43      	ldr	r2, [pc, #268]	; (8003164 <HAL_RCC_OscConfig+0x658>)
 8003056:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800305a:	6253      	str	r3, [r2, #36]	; 0x24
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003060:	2b00      	cmp	r3, #0
 8003062:	d079      	beq.n	8003158 <HAL_RCC_OscConfig+0x64c>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003064:	69bb      	ldr	r3, [r7, #24]
 8003066:	2b0c      	cmp	r3, #12
 8003068:	d056      	beq.n	8003118 <HAL_RCC_OscConfig+0x60c>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800306e:	2b02      	cmp	r3, #2
 8003070:	d13b      	bne.n	80030ea <HAL_RCC_OscConfig+0x5de>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PLL_DIV(RCC_OscInitStruct->PLL.PLLDIV));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003072:	4b3d      	ldr	r3, [pc, #244]	; (8003168 <HAL_RCC_OscConfig+0x65c>)
 8003074:	2200      	movs	r2, #0
 8003076:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003078:	f7fe f9ce 	bl	8001418 <HAL_GetTick>
 800307c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800307e:	e008      	b.n	8003092 <HAL_RCC_OscConfig+0x586>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003080:	f7fe f9ca 	bl	8001418 <HAL_GetTick>
 8003084:	4602      	mov	r2, r0
 8003086:	693b      	ldr	r3, [r7, #16]
 8003088:	1ad3      	subs	r3, r2, r3
 800308a:	2b02      	cmp	r3, #2
 800308c:	d901      	bls.n	8003092 <HAL_RCC_OscConfig+0x586>
          {
            return HAL_TIMEOUT;
 800308e:	2303      	movs	r3, #3
 8003090:	e063      	b.n	800315a <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8003092:	4b34      	ldr	r3, [pc, #208]	; (8003164 <HAL_RCC_OscConfig+0x658>)
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800309a:	2b00      	cmp	r3, #0
 800309c:	d1f0      	bne.n	8003080 <HAL_RCC_OscConfig+0x574>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800309e:	4b31      	ldr	r3, [pc, #196]	; (8003164 <HAL_RCC_OscConfig+0x658>)
 80030a0:	689b      	ldr	r3, [r3, #8]
 80030a2:	f423 027d 	bic.w	r2, r3, #16580608	; 0xfd0000
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	6a99      	ldr	r1, [r3, #40]	; 0x28
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80030ae:	4319      	orrs	r1, r3
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030b4:	430b      	orrs	r3, r1
 80030b6:	492b      	ldr	r1, [pc, #172]	; (8003164 <HAL_RCC_OscConfig+0x658>)
 80030b8:	4313      	orrs	r3, r2
 80030ba:	608b      	str	r3, [r1, #8]
                             RCC_OscInitStruct->PLL.PLLMUL,
                             RCC_OscInitStruct->PLL.PLLDIV);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80030bc:	4b2a      	ldr	r3, [pc, #168]	; (8003168 <HAL_RCC_OscConfig+0x65c>)
 80030be:	2201      	movs	r2, #1
 80030c0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80030c2:	f7fe f9a9 	bl	8001418 <HAL_GetTick>
 80030c6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80030c8:	e008      	b.n	80030dc <HAL_RCC_OscConfig+0x5d0>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80030ca:	f7fe f9a5 	bl	8001418 <HAL_GetTick>
 80030ce:	4602      	mov	r2, r0
 80030d0:	693b      	ldr	r3, [r7, #16]
 80030d2:	1ad3      	subs	r3, r2, r3
 80030d4:	2b02      	cmp	r3, #2
 80030d6:	d901      	bls.n	80030dc <HAL_RCC_OscConfig+0x5d0>
          {
            return HAL_TIMEOUT;
 80030d8:	2303      	movs	r3, #3
 80030da:	e03e      	b.n	800315a <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80030dc:	4b21      	ldr	r3, [pc, #132]	; (8003164 <HAL_RCC_OscConfig+0x658>)
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80030e4:	2b00      	cmp	r3, #0
 80030e6:	d0f0      	beq.n	80030ca <HAL_RCC_OscConfig+0x5be>
 80030e8:	e036      	b.n	8003158 <HAL_RCC_OscConfig+0x64c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80030ea:	4b1f      	ldr	r3, [pc, #124]	; (8003168 <HAL_RCC_OscConfig+0x65c>)
 80030ec:	2200      	movs	r2, #0
 80030ee:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80030f0:	f7fe f992 	bl	8001418 <HAL_GetTick>
 80030f4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80030f6:	e008      	b.n	800310a <HAL_RCC_OscConfig+0x5fe>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80030f8:	f7fe f98e 	bl	8001418 <HAL_GetTick>
 80030fc:	4602      	mov	r2, r0
 80030fe:	693b      	ldr	r3, [r7, #16]
 8003100:	1ad3      	subs	r3, r2, r3
 8003102:	2b02      	cmp	r3, #2
 8003104:	d901      	bls.n	800310a <HAL_RCC_OscConfig+0x5fe>
          {
            return HAL_TIMEOUT;
 8003106:	2303      	movs	r3, #3
 8003108:	e027      	b.n	800315a <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800310a:	4b16      	ldr	r3, [pc, #88]	; (8003164 <HAL_RCC_OscConfig+0x658>)
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003112:	2b00      	cmp	r3, #0
 8003114:	d1f0      	bne.n	80030f8 <HAL_RCC_OscConfig+0x5ec>
 8003116:	e01f      	b.n	8003158 <HAL_RCC_OscConfig+0x64c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800311c:	2b01      	cmp	r3, #1
 800311e:	d101      	bne.n	8003124 <HAL_RCC_OscConfig+0x618>
      {
        return HAL_ERROR;
 8003120:	2301      	movs	r3, #1
 8003122:	e01a      	b.n	800315a <HAL_RCC_OscConfig+0x64e>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8003124:	4b0f      	ldr	r3, [pc, #60]	; (8003164 <HAL_RCC_OscConfig+0x658>)
 8003126:	689b      	ldr	r3, [r3, #8]
 8003128:	617b      	str	r3, [r7, #20]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800312a:	697b      	ldr	r3, [r7, #20]
 800312c:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003134:	429a      	cmp	r2, r3
 8003136:	d10d      	bne.n	8003154 <HAL_RCC_OscConfig+0x648>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8003138:	697b      	ldr	r3, [r7, #20]
 800313a:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003142:	429a      	cmp	r2, r3
 8003144:	d106      	bne.n	8003154 <HAL_RCC_OscConfig+0x648>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 8003146:	697b      	ldr	r3, [r7, #20]
 8003148:	f403 0240 	and.w	r2, r3, #12582912	; 0xc00000
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8003150:	429a      	cmp	r2, r3
 8003152:	d001      	beq.n	8003158 <HAL_RCC_OscConfig+0x64c>
        {
          return HAL_ERROR;
 8003154:	2301      	movs	r3, #1
 8003156:	e000      	b.n	800315a <HAL_RCC_OscConfig+0x64e>
        }
      }
    }
  }

  return HAL_OK;
 8003158:	2300      	movs	r3, #0
}
 800315a:	4618      	mov	r0, r3
 800315c:	3720      	adds	r7, #32
 800315e:	46bd      	mov	sp, r7
 8003160:	bd80      	pop	{r7, pc}
 8003162:	bf00      	nop
 8003164:	40023800 	.word	0x40023800
 8003168:	42470060 	.word	0x42470060

0800316c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800316c:	b580      	push	{r7, lr}
 800316e:	b084      	sub	sp, #16
 8003170:	af00      	add	r7, sp, #0
 8003172:	6078      	str	r0, [r7, #4]
 8003174:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status;

  /* Check the parameters */
  if(RCC_ClkInitStruct == NULL)
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	2b00      	cmp	r3, #0
 800317a:	d101      	bne.n	8003180 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800317c:	2301      	movs	r3, #1
 800317e:	e11a      	b.n	80033b6 <HAL_RCC_ClockConfig+0x24a>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
  must be correctly programmed according to the frequency of the CPU clock
  (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003180:	4b8f      	ldr	r3, [pc, #572]	; (80033c0 <HAL_RCC_ClockConfig+0x254>)
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	f003 0301 	and.w	r3, r3, #1
 8003188:	683a      	ldr	r2, [r7, #0]
 800318a:	429a      	cmp	r2, r3
 800318c:	d919      	bls.n	80031c2 <HAL_RCC_ClockConfig+0x56>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800318e:	683b      	ldr	r3, [r7, #0]
 8003190:	2b01      	cmp	r3, #1
 8003192:	d105      	bne.n	80031a0 <HAL_RCC_ClockConfig+0x34>
 8003194:	4b8a      	ldr	r3, [pc, #552]	; (80033c0 <HAL_RCC_ClockConfig+0x254>)
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	4a89      	ldr	r2, [pc, #548]	; (80033c0 <HAL_RCC_ClockConfig+0x254>)
 800319a:	f043 0304 	orr.w	r3, r3, #4
 800319e:	6013      	str	r3, [r2, #0]
 80031a0:	4b87      	ldr	r3, [pc, #540]	; (80033c0 <HAL_RCC_ClockConfig+0x254>)
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	f023 0201 	bic.w	r2, r3, #1
 80031a8:	4985      	ldr	r1, [pc, #532]	; (80033c0 <HAL_RCC_ClockConfig+0x254>)
 80031aa:	683b      	ldr	r3, [r7, #0]
 80031ac:	4313      	orrs	r3, r2
 80031ae:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80031b0:	4b83      	ldr	r3, [pc, #524]	; (80033c0 <HAL_RCC_ClockConfig+0x254>)
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	f003 0301 	and.w	r3, r3, #1
 80031b8:	683a      	ldr	r2, [r7, #0]
 80031ba:	429a      	cmp	r2, r3
 80031bc:	d001      	beq.n	80031c2 <HAL_RCC_ClockConfig+0x56>
    {
      return HAL_ERROR;
 80031be:	2301      	movs	r3, #1
 80031c0:	e0f9      	b.n	80033b6 <HAL_RCC_ClockConfig+0x24a>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	f003 0302 	and.w	r3, r3, #2
 80031ca:	2b00      	cmp	r3, #0
 80031cc:	d008      	beq.n	80031e0 <HAL_RCC_ClockConfig+0x74>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80031ce:	4b7d      	ldr	r3, [pc, #500]	; (80033c4 <HAL_RCC_ClockConfig+0x258>)
 80031d0:	689b      	ldr	r3, [r3, #8]
 80031d2:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	689b      	ldr	r3, [r3, #8]
 80031da:	497a      	ldr	r1, [pc, #488]	; (80033c4 <HAL_RCC_ClockConfig+0x258>)
 80031dc:	4313      	orrs	r3, r2
 80031de:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	f003 0301 	and.w	r3, r3, #1
 80031e8:	2b00      	cmp	r3, #0
 80031ea:	f000 808e 	beq.w	800330a <HAL_RCC_ClockConfig+0x19e>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	685b      	ldr	r3, [r3, #4]
 80031f2:	2b02      	cmp	r3, #2
 80031f4:	d107      	bne.n	8003206 <HAL_RCC_ClockConfig+0x9a>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80031f6:	4b73      	ldr	r3, [pc, #460]	; (80033c4 <HAL_RCC_ClockConfig+0x258>)
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80031fe:	2b00      	cmp	r3, #0
 8003200:	d121      	bne.n	8003246 <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 8003202:	2301      	movs	r3, #1
 8003204:	e0d7      	b.n	80033b6 <HAL_RCC_ClockConfig+0x24a>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	685b      	ldr	r3, [r3, #4]
 800320a:	2b03      	cmp	r3, #3
 800320c:	d107      	bne.n	800321e <HAL_RCC_ClockConfig+0xb2>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800320e:	4b6d      	ldr	r3, [pc, #436]	; (80033c4 <HAL_RCC_ClockConfig+0x258>)
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003216:	2b00      	cmp	r3, #0
 8003218:	d115      	bne.n	8003246 <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 800321a:	2301      	movs	r3, #1
 800321c:	e0cb      	b.n	80033b6 <HAL_RCC_ClockConfig+0x24a>
      }
    }
    /* HSI is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	685b      	ldr	r3, [r3, #4]
 8003222:	2b01      	cmp	r3, #1
 8003224:	d107      	bne.n	8003236 <HAL_RCC_ClockConfig+0xca>
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003226:	4b67      	ldr	r3, [pc, #412]	; (80033c4 <HAL_RCC_ClockConfig+0x258>)
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	f003 0302 	and.w	r3, r3, #2
 800322e:	2b00      	cmp	r3, #0
 8003230:	d109      	bne.n	8003246 <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 8003232:	2301      	movs	r3, #1
 8003234:	e0bf      	b.n	80033b6 <HAL_RCC_ClockConfig+0x24a>
    }
    /* MSI is selected as System Clock Source */
    else
    {
      /* Check the MSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8003236:	4b63      	ldr	r3, [pc, #396]	; (80033c4 <HAL_RCC_ClockConfig+0x258>)
 8003238:	681b      	ldr	r3, [r3, #0]
 800323a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800323e:	2b00      	cmp	r3, #0
 8003240:	d101      	bne.n	8003246 <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 8003242:	2301      	movs	r3, #1
 8003244:	e0b7      	b.n	80033b6 <HAL_RCC_ClockConfig+0x24a>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003246:	4b5f      	ldr	r3, [pc, #380]	; (80033c4 <HAL_RCC_ClockConfig+0x258>)
 8003248:	689b      	ldr	r3, [r3, #8]
 800324a:	f023 0203 	bic.w	r2, r3, #3
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	685b      	ldr	r3, [r3, #4]
 8003252:	495c      	ldr	r1, [pc, #368]	; (80033c4 <HAL_RCC_ClockConfig+0x258>)
 8003254:	4313      	orrs	r3, r2
 8003256:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003258:	f7fe f8de 	bl	8001418 <HAL_GetTick>
 800325c:	60f8      	str	r0, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	685b      	ldr	r3, [r3, #4]
 8003262:	2b02      	cmp	r3, #2
 8003264:	d112      	bne.n	800328c <HAL_RCC_ClockConfig+0x120>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8003266:	e00a      	b.n	800327e <HAL_RCC_ClockConfig+0x112>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003268:	f7fe f8d6 	bl	8001418 <HAL_GetTick>
 800326c:	4602      	mov	r2, r0
 800326e:	68fb      	ldr	r3, [r7, #12]
 8003270:	1ad3      	subs	r3, r2, r3
 8003272:	f241 3288 	movw	r2, #5000	; 0x1388
 8003276:	4293      	cmp	r3, r2
 8003278:	d901      	bls.n	800327e <HAL_RCC_ClockConfig+0x112>
        {
          return HAL_TIMEOUT;
 800327a:	2303      	movs	r3, #3
 800327c:	e09b      	b.n	80033b6 <HAL_RCC_ClockConfig+0x24a>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 800327e:	4b51      	ldr	r3, [pc, #324]	; (80033c4 <HAL_RCC_ClockConfig+0x258>)
 8003280:	689b      	ldr	r3, [r3, #8]
 8003282:	f003 030c 	and.w	r3, r3, #12
 8003286:	2b08      	cmp	r3, #8
 8003288:	d1ee      	bne.n	8003268 <HAL_RCC_ClockConfig+0xfc>
 800328a:	e03e      	b.n	800330a <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	685b      	ldr	r3, [r3, #4]
 8003290:	2b03      	cmp	r3, #3
 8003292:	d112      	bne.n	80032ba <HAL_RCC_ClockConfig+0x14e>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003294:	e00a      	b.n	80032ac <HAL_RCC_ClockConfig+0x140>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003296:	f7fe f8bf 	bl	8001418 <HAL_GetTick>
 800329a:	4602      	mov	r2, r0
 800329c:	68fb      	ldr	r3, [r7, #12]
 800329e:	1ad3      	subs	r3, r2, r3
 80032a0:	f241 3288 	movw	r2, #5000	; 0x1388
 80032a4:	4293      	cmp	r3, r2
 80032a6:	d901      	bls.n	80032ac <HAL_RCC_ClockConfig+0x140>
        {
          return HAL_TIMEOUT;
 80032a8:	2303      	movs	r3, #3
 80032aa:	e084      	b.n	80033b6 <HAL_RCC_ClockConfig+0x24a>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80032ac:	4b45      	ldr	r3, [pc, #276]	; (80033c4 <HAL_RCC_ClockConfig+0x258>)
 80032ae:	689b      	ldr	r3, [r3, #8]
 80032b0:	f003 030c 	and.w	r3, r3, #12
 80032b4:	2b0c      	cmp	r3, #12
 80032b6:	d1ee      	bne.n	8003296 <HAL_RCC_ClockConfig+0x12a>
 80032b8:	e027      	b.n	800330a <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	685b      	ldr	r3, [r3, #4]
 80032be:	2b01      	cmp	r3, #1
 80032c0:	d11d      	bne.n	80032fe <HAL_RCC_ClockConfig+0x192>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 80032c2:	e00a      	b.n	80032da <HAL_RCC_ClockConfig+0x16e>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80032c4:	f7fe f8a8 	bl	8001418 <HAL_GetTick>
 80032c8:	4602      	mov	r2, r0
 80032ca:	68fb      	ldr	r3, [r7, #12]
 80032cc:	1ad3      	subs	r3, r2, r3
 80032ce:	f241 3288 	movw	r2, #5000	; 0x1388
 80032d2:	4293      	cmp	r3, r2
 80032d4:	d901      	bls.n	80032da <HAL_RCC_ClockConfig+0x16e>
        {
          return HAL_TIMEOUT;
 80032d6:	2303      	movs	r3, #3
 80032d8:	e06d      	b.n	80033b6 <HAL_RCC_ClockConfig+0x24a>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 80032da:	4b3a      	ldr	r3, [pc, #232]	; (80033c4 <HAL_RCC_ClockConfig+0x258>)
 80032dc:	689b      	ldr	r3, [r3, #8]
 80032de:	f003 030c 	and.w	r3, r3, #12
 80032e2:	2b04      	cmp	r3, #4
 80032e4:	d1ee      	bne.n	80032c4 <HAL_RCC_ClockConfig+0x158>
 80032e6:	e010      	b.n	800330a <HAL_RCC_ClockConfig+0x19e>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80032e8:	f7fe f896 	bl	8001418 <HAL_GetTick>
 80032ec:	4602      	mov	r2, r0
 80032ee:	68fb      	ldr	r3, [r7, #12]
 80032f0:	1ad3      	subs	r3, r2, r3
 80032f2:	f241 3288 	movw	r2, #5000	; 0x1388
 80032f6:	4293      	cmp	r3, r2
 80032f8:	d901      	bls.n	80032fe <HAL_RCC_ClockConfig+0x192>
        {
          return HAL_TIMEOUT;
 80032fa:	2303      	movs	r3, #3
 80032fc:	e05b      	b.n	80033b6 <HAL_RCC_ClockConfig+0x24a>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 80032fe:	4b31      	ldr	r3, [pc, #196]	; (80033c4 <HAL_RCC_ClockConfig+0x258>)
 8003300:	689b      	ldr	r3, [r3, #8]
 8003302:	f003 030c 	and.w	r3, r3, #12
 8003306:	2b00      	cmp	r3, #0
 8003308:	d1ee      	bne.n	80032e8 <HAL_RCC_ClockConfig+0x17c>
        }
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800330a:	4b2d      	ldr	r3, [pc, #180]	; (80033c0 <HAL_RCC_ClockConfig+0x254>)
 800330c:	681b      	ldr	r3, [r3, #0]
 800330e:	f003 0301 	and.w	r3, r3, #1
 8003312:	683a      	ldr	r2, [r7, #0]
 8003314:	429a      	cmp	r2, r3
 8003316:	d219      	bcs.n	800334c <HAL_RCC_ClockConfig+0x1e0>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003318:	683b      	ldr	r3, [r7, #0]
 800331a:	2b01      	cmp	r3, #1
 800331c:	d105      	bne.n	800332a <HAL_RCC_ClockConfig+0x1be>
 800331e:	4b28      	ldr	r3, [pc, #160]	; (80033c0 <HAL_RCC_ClockConfig+0x254>)
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	4a27      	ldr	r2, [pc, #156]	; (80033c0 <HAL_RCC_ClockConfig+0x254>)
 8003324:	f043 0304 	orr.w	r3, r3, #4
 8003328:	6013      	str	r3, [r2, #0]
 800332a:	4b25      	ldr	r3, [pc, #148]	; (80033c0 <HAL_RCC_ClockConfig+0x254>)
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	f023 0201 	bic.w	r2, r3, #1
 8003332:	4923      	ldr	r1, [pc, #140]	; (80033c0 <HAL_RCC_ClockConfig+0x254>)
 8003334:	683b      	ldr	r3, [r7, #0]
 8003336:	4313      	orrs	r3, r2
 8003338:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800333a:	4b21      	ldr	r3, [pc, #132]	; (80033c0 <HAL_RCC_ClockConfig+0x254>)
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	f003 0301 	and.w	r3, r3, #1
 8003342:	683a      	ldr	r2, [r7, #0]
 8003344:	429a      	cmp	r2, r3
 8003346:	d001      	beq.n	800334c <HAL_RCC_ClockConfig+0x1e0>
    {
      return HAL_ERROR;
 8003348:	2301      	movs	r3, #1
 800334a:	e034      	b.n	80033b6 <HAL_RCC_ClockConfig+0x24a>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	f003 0304 	and.w	r3, r3, #4
 8003354:	2b00      	cmp	r3, #0
 8003356:	d008      	beq.n	800336a <HAL_RCC_ClockConfig+0x1fe>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003358:	4b1a      	ldr	r3, [pc, #104]	; (80033c4 <HAL_RCC_ClockConfig+0x258>)
 800335a:	689b      	ldr	r3, [r3, #8]
 800335c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	68db      	ldr	r3, [r3, #12]
 8003364:	4917      	ldr	r1, [pc, #92]	; (80033c4 <HAL_RCC_ClockConfig+0x258>)
 8003366:	4313      	orrs	r3, r2
 8003368:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	f003 0308 	and.w	r3, r3, #8
 8003372:	2b00      	cmp	r3, #0
 8003374:	d009      	beq.n	800338a <HAL_RCC_ClockConfig+0x21e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003376:	4b13      	ldr	r3, [pc, #76]	; (80033c4 <HAL_RCC_ClockConfig+0x258>)
 8003378:	689b      	ldr	r3, [r3, #8]
 800337a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	691b      	ldr	r3, [r3, #16]
 8003382:	00db      	lsls	r3, r3, #3
 8003384:	490f      	ldr	r1, [pc, #60]	; (80033c4 <HAL_RCC_ClockConfig+0x258>)
 8003386:	4313      	orrs	r3, r2
 8003388:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800338a:	f000 f823 	bl	80033d4 <HAL_RCC_GetSysClockFreq>
 800338e:	4602      	mov	r2, r0
 8003390:	4b0c      	ldr	r3, [pc, #48]	; (80033c4 <HAL_RCC_ClockConfig+0x258>)
 8003392:	689b      	ldr	r3, [r3, #8]
 8003394:	091b      	lsrs	r3, r3, #4
 8003396:	f003 030f 	and.w	r3, r3, #15
 800339a:	490b      	ldr	r1, [pc, #44]	; (80033c8 <HAL_RCC_ClockConfig+0x25c>)
 800339c:	5ccb      	ldrb	r3, [r1, r3]
 800339e:	fa22 f303 	lsr.w	r3, r2, r3
 80033a2:	4a0a      	ldr	r2, [pc, #40]	; (80033cc <HAL_RCC_ClockConfig+0x260>)
 80033a4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80033a6:	4b0a      	ldr	r3, [pc, #40]	; (80033d0 <HAL_RCC_ClockConfig+0x264>)
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	4618      	mov	r0, r3
 80033ac:	f7fd ffe8 	bl	8001380 <HAL_InitTick>
 80033b0:	4603      	mov	r3, r0
 80033b2:	72fb      	strb	r3, [r7, #11]

  return status;
 80033b4:	7afb      	ldrb	r3, [r7, #11]
}
 80033b6:	4618      	mov	r0, r3
 80033b8:	3710      	adds	r7, #16
 80033ba:	46bd      	mov	sp, r7
 80033bc:	bd80      	pop	{r7, pc}
 80033be:	bf00      	nop
 80033c0:	40023c00 	.word	0x40023c00
 80033c4:	40023800 	.word	0x40023800
 80033c8:	080044d0 	.word	0x080044d0
 80033cc:	20000000 	.word	0x20000000
 80033d0:	20000004 	.word	0x20000004

080033d4 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80033d4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80033d8:	b092      	sub	sp, #72	; 0x48
 80033da:	af00      	add	r7, sp, #0
  uint32_t tmpreg, pllm, plld, pllvco, msiclkrange, sysclockfreq;

  tmpreg = RCC->CFGR;
 80033dc:	4b79      	ldr	r3, [pc, #484]	; (80035c4 <HAL_RCC_GetSysClockFreq+0x1f0>)
 80033de:	689b      	ldr	r3, [r3, #8]
 80033e0:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80033e2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80033e4:	f003 030c 	and.w	r3, r3, #12
 80033e8:	2b0c      	cmp	r3, #12
 80033ea:	d00d      	beq.n	8003408 <HAL_RCC_GetSysClockFreq+0x34>
 80033ec:	2b0c      	cmp	r3, #12
 80033ee:	f200 80d5 	bhi.w	800359c <HAL_RCC_GetSysClockFreq+0x1c8>
 80033f2:	2b04      	cmp	r3, #4
 80033f4:	d002      	beq.n	80033fc <HAL_RCC_GetSysClockFreq+0x28>
 80033f6:	2b08      	cmp	r3, #8
 80033f8:	d003      	beq.n	8003402 <HAL_RCC_GetSysClockFreq+0x2e>
 80033fa:	e0cf      	b.n	800359c <HAL_RCC_GetSysClockFreq+0x1c8>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80033fc:	4b72      	ldr	r3, [pc, #456]	; (80035c8 <HAL_RCC_GetSysClockFreq+0x1f4>)
 80033fe:	643b      	str	r3, [r7, #64]	; 0x40
      break;
 8003400:	e0da      	b.n	80035b8 <HAL_RCC_GetSysClockFreq+0x1e4>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003402:	4b72      	ldr	r3, [pc, #456]	; (80035cc <HAL_RCC_GetSysClockFreq+0x1f8>)
 8003404:	643b      	str	r3, [r7, #64]	; 0x40
      break;
 8003406:	e0d7      	b.n	80035b8 <HAL_RCC_GetSysClockFreq+0x1e4>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 8003408:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800340a:	0c9b      	lsrs	r3, r3, #18
 800340c:	f003 020f 	and.w	r2, r3, #15
 8003410:	4b6f      	ldr	r3, [pc, #444]	; (80035d0 <HAL_RCC_GetSysClockFreq+0x1fc>)
 8003412:	5c9b      	ldrb	r3, [r3, r2]
 8003414:	63bb      	str	r3, [r7, #56]	; 0x38
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 8003416:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003418:	0d9b      	lsrs	r3, r3, #22
 800341a:	f003 0303 	and.w	r3, r3, #3
 800341e:	3301      	adds	r3, #1
 8003420:	637b      	str	r3, [r7, #52]	; 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003422:	4b68      	ldr	r3, [pc, #416]	; (80035c4 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8003424:	689b      	ldr	r3, [r3, #8]
 8003426:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800342a:	2b00      	cmp	r3, #0
 800342c:	d05d      	beq.n	80034ea <HAL_RCC_GetSysClockFreq+0x116>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)(((uint64_t)HSE_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 800342e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003430:	2200      	movs	r2, #0
 8003432:	4618      	mov	r0, r3
 8003434:	4611      	mov	r1, r2
 8003436:	4604      	mov	r4, r0
 8003438:	460d      	mov	r5, r1
 800343a:	4622      	mov	r2, r4
 800343c:	462b      	mov	r3, r5
 800343e:	f04f 0000 	mov.w	r0, #0
 8003442:	f04f 0100 	mov.w	r1, #0
 8003446:	0159      	lsls	r1, r3, #5
 8003448:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800344c:	0150      	lsls	r0, r2, #5
 800344e:	4602      	mov	r2, r0
 8003450:	460b      	mov	r3, r1
 8003452:	4621      	mov	r1, r4
 8003454:	1a51      	subs	r1, r2, r1
 8003456:	6139      	str	r1, [r7, #16]
 8003458:	4629      	mov	r1, r5
 800345a:	eb63 0301 	sbc.w	r3, r3, r1
 800345e:	617b      	str	r3, [r7, #20]
 8003460:	f04f 0200 	mov.w	r2, #0
 8003464:	f04f 0300 	mov.w	r3, #0
 8003468:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800346c:	4659      	mov	r1, fp
 800346e:	018b      	lsls	r3, r1, #6
 8003470:	4651      	mov	r1, sl
 8003472:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003476:	4651      	mov	r1, sl
 8003478:	018a      	lsls	r2, r1, #6
 800347a:	46d4      	mov	ip, sl
 800347c:	ebb2 080c 	subs.w	r8, r2, ip
 8003480:	4659      	mov	r1, fp
 8003482:	eb63 0901 	sbc.w	r9, r3, r1
 8003486:	f04f 0200 	mov.w	r2, #0
 800348a:	f04f 0300 	mov.w	r3, #0
 800348e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003492:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003496:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800349a:	4690      	mov	r8, r2
 800349c:	4699      	mov	r9, r3
 800349e:	4623      	mov	r3, r4
 80034a0:	eb18 0303 	adds.w	r3, r8, r3
 80034a4:	60bb      	str	r3, [r7, #8]
 80034a6:	462b      	mov	r3, r5
 80034a8:	eb49 0303 	adc.w	r3, r9, r3
 80034ac:	60fb      	str	r3, [r7, #12]
 80034ae:	f04f 0200 	mov.w	r2, #0
 80034b2:	f04f 0300 	mov.w	r3, #0
 80034b6:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80034ba:	4629      	mov	r1, r5
 80034bc:	024b      	lsls	r3, r1, #9
 80034be:	4620      	mov	r0, r4
 80034c0:	4629      	mov	r1, r5
 80034c2:	4604      	mov	r4, r0
 80034c4:	ea43 53d4 	orr.w	r3, r3, r4, lsr #23
 80034c8:	4601      	mov	r1, r0
 80034ca:	024a      	lsls	r2, r1, #9
 80034cc:	4610      	mov	r0, r2
 80034ce:	4619      	mov	r1, r3
 80034d0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80034d2:	2200      	movs	r2, #0
 80034d4:	62bb      	str	r3, [r7, #40]	; 0x28
 80034d6:	62fa      	str	r2, [r7, #44]	; 0x2c
 80034d8:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80034dc:	f7fd f8fa 	bl	80006d4 <__aeabi_uldivmod>
 80034e0:	4602      	mov	r2, r0
 80034e2:	460b      	mov	r3, r1
 80034e4:	4613      	mov	r3, r2
 80034e6:	647b      	str	r3, [r7, #68]	; 0x44
 80034e8:	e055      	b.n	8003596 <HAL_RCC_GetSysClockFreq+0x1c2>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)(((uint64_t)HSI_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 80034ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80034ec:	2200      	movs	r2, #0
 80034ee:	623b      	str	r3, [r7, #32]
 80034f0:	627a      	str	r2, [r7, #36]	; 0x24
 80034f2:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80034f6:	4642      	mov	r2, r8
 80034f8:	464b      	mov	r3, r9
 80034fa:	f04f 0000 	mov.w	r0, #0
 80034fe:	f04f 0100 	mov.w	r1, #0
 8003502:	0159      	lsls	r1, r3, #5
 8003504:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003508:	0150      	lsls	r0, r2, #5
 800350a:	4602      	mov	r2, r0
 800350c:	460b      	mov	r3, r1
 800350e:	46c4      	mov	ip, r8
 8003510:	ebb2 0a0c 	subs.w	sl, r2, ip
 8003514:	4640      	mov	r0, r8
 8003516:	4649      	mov	r1, r9
 8003518:	468c      	mov	ip, r1
 800351a:	eb63 0b0c 	sbc.w	fp, r3, ip
 800351e:	f04f 0200 	mov.w	r2, #0
 8003522:	f04f 0300 	mov.w	r3, #0
 8003526:	ea4f 138b 	mov.w	r3, fp, lsl #6
 800352a:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 800352e:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8003532:	ebb2 040a 	subs.w	r4, r2, sl
 8003536:	eb63 050b 	sbc.w	r5, r3, fp
 800353a:	f04f 0200 	mov.w	r2, #0
 800353e:	f04f 0300 	mov.w	r3, #0
 8003542:	00eb      	lsls	r3, r5, #3
 8003544:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003548:	00e2      	lsls	r2, r4, #3
 800354a:	4614      	mov	r4, r2
 800354c:	461d      	mov	r5, r3
 800354e:	4603      	mov	r3, r0
 8003550:	18e3      	adds	r3, r4, r3
 8003552:	603b      	str	r3, [r7, #0]
 8003554:	460b      	mov	r3, r1
 8003556:	eb45 0303 	adc.w	r3, r5, r3
 800355a:	607b      	str	r3, [r7, #4]
 800355c:	f04f 0200 	mov.w	r2, #0
 8003560:	f04f 0300 	mov.w	r3, #0
 8003564:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003568:	4629      	mov	r1, r5
 800356a:	028b      	lsls	r3, r1, #10
 800356c:	4620      	mov	r0, r4
 800356e:	4629      	mov	r1, r5
 8003570:	4604      	mov	r4, r0
 8003572:	ea43 5394 	orr.w	r3, r3, r4, lsr #22
 8003576:	4601      	mov	r1, r0
 8003578:	028a      	lsls	r2, r1, #10
 800357a:	4610      	mov	r0, r2
 800357c:	4619      	mov	r1, r3
 800357e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003580:	2200      	movs	r2, #0
 8003582:	61bb      	str	r3, [r7, #24]
 8003584:	61fa      	str	r2, [r7, #28]
 8003586:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800358a:	f7fd f8a3 	bl	80006d4 <__aeabi_uldivmod>
 800358e:	4602      	mov	r2, r0
 8003590:	460b      	mov	r3, r1
 8003592:	4613      	mov	r3, r2
 8003594:	647b      	str	r3, [r7, #68]	; 0x44
      }
      sysclockfreq = pllvco;
 8003596:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003598:	643b      	str	r3, [r7, #64]	; 0x40
      break;
 800359a:	e00d      	b.n	80035b8 <HAL_RCC_GetSysClockFreq+0x1e4>
    }
    case RCC_SYSCLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
    default: /* MSI used as system clock */
    {
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 800359c:	4b09      	ldr	r3, [pc, #36]	; (80035c4 <HAL_RCC_GetSysClockFreq+0x1f0>)
 800359e:	685b      	ldr	r3, [r3, #4]
 80035a0:	0b5b      	lsrs	r3, r3, #13
 80035a2:	f003 0307 	and.w	r3, r3, #7
 80035a6:	633b      	str	r3, [r7, #48]	; 0x30
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 80035a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80035aa:	3301      	adds	r3, #1
 80035ac:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80035b0:	fa02 f303 	lsl.w	r3, r2, r3
 80035b4:	643b      	str	r3, [r7, #64]	; 0x40
      break;
 80035b6:	bf00      	nop
    }
  }
  return sysclockfreq;
 80035b8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
}
 80035ba:	4618      	mov	r0, r3
 80035bc:	3748      	adds	r7, #72	; 0x48
 80035be:	46bd      	mov	sp, r7
 80035c0:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80035c4:	40023800 	.word	0x40023800
 80035c8:	00f42400 	.word	0x00f42400
 80035cc:	007a1200 	.word	0x007a1200
 80035d0:	080044c4 	.word	0x080044c4

080035d4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80035d4:	b480      	push	{r7}
 80035d6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80035d8:	4b02      	ldr	r3, [pc, #8]	; (80035e4 <HAL_RCC_GetHCLKFreq+0x10>)
 80035da:	681b      	ldr	r3, [r3, #0]
}
 80035dc:	4618      	mov	r0, r3
 80035de:	46bd      	mov	sp, r7
 80035e0:	bc80      	pop	{r7}
 80035e2:	4770      	bx	lr
 80035e4:	20000000 	.word	0x20000000

080035e8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80035e8:	b580      	push	{r7, lr}
 80035ea:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80035ec:	f7ff fff2 	bl	80035d4 <HAL_RCC_GetHCLKFreq>
 80035f0:	4602      	mov	r2, r0
 80035f2:	4b05      	ldr	r3, [pc, #20]	; (8003608 <HAL_RCC_GetPCLK1Freq+0x20>)
 80035f4:	689b      	ldr	r3, [r3, #8]
 80035f6:	0a1b      	lsrs	r3, r3, #8
 80035f8:	f003 0307 	and.w	r3, r3, #7
 80035fc:	4903      	ldr	r1, [pc, #12]	; (800360c <HAL_RCC_GetPCLK1Freq+0x24>)
 80035fe:	5ccb      	ldrb	r3, [r1, r3]
 8003600:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003604:	4618      	mov	r0, r3
 8003606:	bd80      	pop	{r7, pc}
 8003608:	40023800 	.word	0x40023800
 800360c:	080044e0 	.word	0x080044e0

08003610 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003610:	b580      	push	{r7, lr}
 8003612:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003614:	f7ff ffde 	bl	80035d4 <HAL_RCC_GetHCLKFreq>
 8003618:	4602      	mov	r2, r0
 800361a:	4b05      	ldr	r3, [pc, #20]	; (8003630 <HAL_RCC_GetPCLK2Freq+0x20>)
 800361c:	689b      	ldr	r3, [r3, #8]
 800361e:	0adb      	lsrs	r3, r3, #11
 8003620:	f003 0307 	and.w	r3, r3, #7
 8003624:	4903      	ldr	r1, [pc, #12]	; (8003634 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003626:	5ccb      	ldrb	r3, [r1, r3]
 8003628:	fa22 f303 	lsr.w	r3, r2, r3
}
 800362c:	4618      	mov	r0, r3
 800362e:	bd80      	pop	{r7, pc}
 8003630:	40023800 	.word	0x40023800
 8003634:	080044e0 	.word	0x080044e0

08003638 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range
  * @param  MSIrange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_6
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t MSIrange)
{
 8003638:	b480      	push	{r7}
 800363a:	b087      	sub	sp, #28
 800363c:	af00      	add	r7, sp, #0
 800363e:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8003640:	2300      	movs	r3, #0
 8003642:	613b      	str	r3, [r7, #16]

  /* HCLK can reach 4 MHz only if AHB prescaler = 1 */
  if (READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 8003644:	4b29      	ldr	r3, [pc, #164]	; (80036ec <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8003646:	689b      	ldr	r3, [r3, #8]
 8003648:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800364c:	2b00      	cmp	r3, #0
 800364e:	d12c      	bne.n	80036aa <RCC_SetFlashLatencyFromMSIRange+0x72>
  {
    if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8003650:	4b26      	ldr	r3, [pc, #152]	; (80036ec <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8003652:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003654:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003658:	2b00      	cmp	r3, #0
 800365a:	d005      	beq.n	8003668 <RCC_SetFlashLatencyFromMSIRange+0x30>
    {
      vos = READ_BIT(PWR->CR, PWR_CR_VOS);
 800365c:	4b24      	ldr	r3, [pc, #144]	; (80036f0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	f403 53c0 	and.w	r3, r3, #6144	; 0x1800
 8003664:	617b      	str	r3, [r7, #20]
 8003666:	e016      	b.n	8003696 <RCC_SetFlashLatencyFromMSIRange+0x5e>
    }
    else
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003668:	4b20      	ldr	r3, [pc, #128]	; (80036ec <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 800366a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800366c:	4a1f      	ldr	r2, [pc, #124]	; (80036ec <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 800366e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003672:	6253      	str	r3, [r2, #36]	; 0x24
 8003674:	4b1d      	ldr	r3, [pc, #116]	; (80036ec <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8003676:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003678:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800367c:	60fb      	str	r3, [r7, #12]
 800367e:	68fb      	ldr	r3, [r7, #12]
      vos = READ_BIT(PWR->CR, PWR_CR_VOS);
 8003680:	4b1b      	ldr	r3, [pc, #108]	; (80036f0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	f403 53c0 	and.w	r3, r3, #6144	; 0x1800
 8003688:	617b      	str	r3, [r7, #20]
      __HAL_RCC_PWR_CLK_DISABLE();
 800368a:	4b18      	ldr	r3, [pc, #96]	; (80036ec <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 800368c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800368e:	4a17      	ldr	r2, [pc, #92]	; (80036ec <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8003690:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003694:	6253      	str	r3, [r2, #36]	; 0x24
    }

    /* Check if need to set latency 1 only for Range 3 & HCLK = 4MHz */
    if((vos == PWR_REGULATOR_VOLTAGE_SCALE3) && (MSIrange == RCC_MSIRANGE_6))
 8003696:	697b      	ldr	r3, [r7, #20]
 8003698:	f5b3 5fc0 	cmp.w	r3, #6144	; 0x1800
 800369c:	d105      	bne.n	80036aa <RCC_SetFlashLatencyFromMSIRange+0x72>
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 80036a4:	d101      	bne.n	80036aa <RCC_SetFlashLatencyFromMSIRange+0x72>
    {
      latency = FLASH_LATENCY_1; /* 1WS */
 80036a6:	2301      	movs	r3, #1
 80036a8:	613b      	str	r3, [r7, #16]
    }
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80036aa:	693b      	ldr	r3, [r7, #16]
 80036ac:	2b01      	cmp	r3, #1
 80036ae:	d105      	bne.n	80036bc <RCC_SetFlashLatencyFromMSIRange+0x84>
 80036b0:	4b10      	ldr	r3, [pc, #64]	; (80036f4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	4a0f      	ldr	r2, [pc, #60]	; (80036f4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80036b6:	f043 0304 	orr.w	r3, r3, #4
 80036ba:	6013      	str	r3, [r2, #0]
 80036bc:	4b0d      	ldr	r3, [pc, #52]	; (80036f4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	f023 0201 	bic.w	r2, r3, #1
 80036c4:	490b      	ldr	r1, [pc, #44]	; (80036f4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80036c6:	693b      	ldr	r3, [r7, #16]
 80036c8:	4313      	orrs	r3, r2
 80036ca:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 80036cc:	4b09      	ldr	r3, [pc, #36]	; (80036f4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	f003 0301 	and.w	r3, r3, #1
 80036d4:	693a      	ldr	r2, [r7, #16]
 80036d6:	429a      	cmp	r2, r3
 80036d8:	d001      	beq.n	80036de <RCC_SetFlashLatencyFromMSIRange+0xa6>
  {
    return HAL_ERROR;
 80036da:	2301      	movs	r3, #1
 80036dc:	e000      	b.n	80036e0 <RCC_SetFlashLatencyFromMSIRange+0xa8>
  }

  return HAL_OK;
 80036de:	2300      	movs	r3, #0
}
 80036e0:	4618      	mov	r0, r3
 80036e2:	371c      	adds	r7, #28
 80036e4:	46bd      	mov	sp, r7
 80036e6:	bc80      	pop	{r7}
 80036e8:	4770      	bx	lr
 80036ea:	bf00      	nop
 80036ec:	40023800 	.word	0x40023800
 80036f0:	40007000 	.word	0x40007000
 80036f4:	40023c00 	.word	0x40023c00

080036f8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80036f8:	b580      	push	{r7, lr}
 80036fa:	b082      	sub	sp, #8
 80036fc:	af00      	add	r7, sp, #0
 80036fe:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	2b00      	cmp	r3, #0
 8003704:	d101      	bne.n	800370a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003706:	2301      	movs	r3, #1
 8003708:	e03f      	b.n	800378a <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003710:	b2db      	uxtb	r3, r3
 8003712:	2b00      	cmp	r3, #0
 8003714:	d106      	bne.n	8003724 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	2200      	movs	r2, #0
 800371a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800371e:	6878      	ldr	r0, [r7, #4]
 8003720:	f7fd fdac 	bl	800127c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	2224      	movs	r2, #36	; 0x24
 8003728:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	68da      	ldr	r2, [r3, #12]
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800373a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800373c:	6878      	ldr	r0, [r7, #4]
 800373e:	f000 f905 	bl	800394c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	691a      	ldr	r2, [r3, #16]
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003750:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	695a      	ldr	r2, [r3, #20]
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003760:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	68da      	ldr	r2, [r3, #12]
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003770:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	2200      	movs	r2, #0
 8003776:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	2220      	movs	r2, #32
 800377c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	2220      	movs	r2, #32
 8003784:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003788:	2300      	movs	r3, #0
}
 800378a:	4618      	mov	r0, r3
 800378c:	3708      	adds	r7, #8
 800378e:	46bd      	mov	sp, r7
 8003790:	bd80      	pop	{r7, pc}

08003792 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003792:	b580      	push	{r7, lr}
 8003794:	b08a      	sub	sp, #40	; 0x28
 8003796:	af02      	add	r7, sp, #8
 8003798:	60f8      	str	r0, [r7, #12]
 800379a:	60b9      	str	r1, [r7, #8]
 800379c:	603b      	str	r3, [r7, #0]
 800379e:	4613      	mov	r3, r2
 80037a0:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80037a2:	2300      	movs	r3, #0
 80037a4:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80037a6:	68fb      	ldr	r3, [r7, #12]
 80037a8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80037ac:	b2db      	uxtb	r3, r3
 80037ae:	2b20      	cmp	r3, #32
 80037b0:	d17c      	bne.n	80038ac <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 80037b2:	68bb      	ldr	r3, [r7, #8]
 80037b4:	2b00      	cmp	r3, #0
 80037b6:	d002      	beq.n	80037be <HAL_UART_Transmit+0x2c>
 80037b8:	88fb      	ldrh	r3, [r7, #6]
 80037ba:	2b00      	cmp	r3, #0
 80037bc:	d101      	bne.n	80037c2 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80037be:	2301      	movs	r3, #1
 80037c0:	e075      	b.n	80038ae <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80037c2:	68fb      	ldr	r3, [r7, #12]
 80037c4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80037c8:	2b01      	cmp	r3, #1
 80037ca:	d101      	bne.n	80037d0 <HAL_UART_Transmit+0x3e>
 80037cc:	2302      	movs	r3, #2
 80037ce:	e06e      	b.n	80038ae <HAL_UART_Transmit+0x11c>
 80037d0:	68fb      	ldr	r3, [r7, #12]
 80037d2:	2201      	movs	r2, #1
 80037d4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80037d8:	68fb      	ldr	r3, [r7, #12]
 80037da:	2200      	movs	r2, #0
 80037dc:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80037de:	68fb      	ldr	r3, [r7, #12]
 80037e0:	2221      	movs	r2, #33	; 0x21
 80037e2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80037e6:	f7fd fe17 	bl	8001418 <HAL_GetTick>
 80037ea:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80037ec:	68fb      	ldr	r3, [r7, #12]
 80037ee:	88fa      	ldrh	r2, [r7, #6]
 80037f0:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80037f2:	68fb      	ldr	r3, [r7, #12]
 80037f4:	88fa      	ldrh	r2, [r7, #6]
 80037f6:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80037f8:	68fb      	ldr	r3, [r7, #12]
 80037fa:	689b      	ldr	r3, [r3, #8]
 80037fc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003800:	d108      	bne.n	8003814 <HAL_UART_Transmit+0x82>
 8003802:	68fb      	ldr	r3, [r7, #12]
 8003804:	691b      	ldr	r3, [r3, #16]
 8003806:	2b00      	cmp	r3, #0
 8003808:	d104      	bne.n	8003814 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 800380a:	2300      	movs	r3, #0
 800380c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800380e:	68bb      	ldr	r3, [r7, #8]
 8003810:	61bb      	str	r3, [r7, #24]
 8003812:	e003      	b.n	800381c <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8003814:	68bb      	ldr	r3, [r7, #8]
 8003816:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003818:	2300      	movs	r3, #0
 800381a:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800381c:	68fb      	ldr	r3, [r7, #12]
 800381e:	2200      	movs	r2, #0
 8003820:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8003824:	e02a      	b.n	800387c <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003826:	683b      	ldr	r3, [r7, #0]
 8003828:	9300      	str	r3, [sp, #0]
 800382a:	697b      	ldr	r3, [r7, #20]
 800382c:	2200      	movs	r2, #0
 800382e:	2180      	movs	r1, #128	; 0x80
 8003830:	68f8      	ldr	r0, [r7, #12]
 8003832:	f000 f840 	bl	80038b6 <UART_WaitOnFlagUntilTimeout>
 8003836:	4603      	mov	r3, r0
 8003838:	2b00      	cmp	r3, #0
 800383a:	d001      	beq.n	8003840 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 800383c:	2303      	movs	r3, #3
 800383e:	e036      	b.n	80038ae <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8003840:	69fb      	ldr	r3, [r7, #28]
 8003842:	2b00      	cmp	r3, #0
 8003844:	d10b      	bne.n	800385e <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003846:	69bb      	ldr	r3, [r7, #24]
 8003848:	881b      	ldrh	r3, [r3, #0]
 800384a:	461a      	mov	r2, r3
 800384c:	68fb      	ldr	r3, [r7, #12]
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003854:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8003856:	69bb      	ldr	r3, [r7, #24]
 8003858:	3302      	adds	r3, #2
 800385a:	61bb      	str	r3, [r7, #24]
 800385c:	e007      	b.n	800386e <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800385e:	69fb      	ldr	r3, [r7, #28]
 8003860:	781a      	ldrb	r2, [r3, #0]
 8003862:	68fb      	ldr	r3, [r7, #12]
 8003864:	681b      	ldr	r3, [r3, #0]
 8003866:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8003868:	69fb      	ldr	r3, [r7, #28]
 800386a:	3301      	adds	r3, #1
 800386c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800386e:	68fb      	ldr	r3, [r7, #12]
 8003870:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003872:	b29b      	uxth	r3, r3
 8003874:	3b01      	subs	r3, #1
 8003876:	b29a      	uxth	r2, r3
 8003878:	68fb      	ldr	r3, [r7, #12]
 800387a:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 800387c:	68fb      	ldr	r3, [r7, #12]
 800387e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003880:	b29b      	uxth	r3, r3
 8003882:	2b00      	cmp	r3, #0
 8003884:	d1cf      	bne.n	8003826 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003886:	683b      	ldr	r3, [r7, #0]
 8003888:	9300      	str	r3, [sp, #0]
 800388a:	697b      	ldr	r3, [r7, #20]
 800388c:	2200      	movs	r2, #0
 800388e:	2140      	movs	r1, #64	; 0x40
 8003890:	68f8      	ldr	r0, [r7, #12]
 8003892:	f000 f810 	bl	80038b6 <UART_WaitOnFlagUntilTimeout>
 8003896:	4603      	mov	r3, r0
 8003898:	2b00      	cmp	r3, #0
 800389a:	d001      	beq.n	80038a0 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 800389c:	2303      	movs	r3, #3
 800389e:	e006      	b.n	80038ae <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80038a0:	68fb      	ldr	r3, [r7, #12]
 80038a2:	2220      	movs	r2, #32
 80038a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 80038a8:	2300      	movs	r3, #0
 80038aa:	e000      	b.n	80038ae <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 80038ac:	2302      	movs	r3, #2
  }
}
 80038ae:	4618      	mov	r0, r3
 80038b0:	3720      	adds	r7, #32
 80038b2:	46bd      	mov	sp, r7
 80038b4:	bd80      	pop	{r7, pc}

080038b6 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 80038b6:	b580      	push	{r7, lr}
 80038b8:	b084      	sub	sp, #16
 80038ba:	af00      	add	r7, sp, #0
 80038bc:	60f8      	str	r0, [r7, #12]
 80038be:	60b9      	str	r1, [r7, #8]
 80038c0:	603b      	str	r3, [r7, #0]
 80038c2:	4613      	mov	r3, r2
 80038c4:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80038c6:	e02c      	b.n	8003922 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80038c8:	69bb      	ldr	r3, [r7, #24]
 80038ca:	f1b3 3fff 	cmp.w	r3, #4294967295
 80038ce:	d028      	beq.n	8003922 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80038d0:	69bb      	ldr	r3, [r7, #24]
 80038d2:	2b00      	cmp	r3, #0
 80038d4:	d007      	beq.n	80038e6 <UART_WaitOnFlagUntilTimeout+0x30>
 80038d6:	f7fd fd9f 	bl	8001418 <HAL_GetTick>
 80038da:	4602      	mov	r2, r0
 80038dc:	683b      	ldr	r3, [r7, #0]
 80038de:	1ad3      	subs	r3, r2, r3
 80038e0:	69ba      	ldr	r2, [r7, #24]
 80038e2:	429a      	cmp	r2, r3
 80038e4:	d21d      	bcs.n	8003922 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80038e6:	68fb      	ldr	r3, [r7, #12]
 80038e8:	681b      	ldr	r3, [r3, #0]
 80038ea:	68da      	ldr	r2, [r3, #12]
 80038ec:	68fb      	ldr	r3, [r7, #12]
 80038ee:	681b      	ldr	r3, [r3, #0]
 80038f0:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80038f4:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80038f6:	68fb      	ldr	r3, [r7, #12]
 80038f8:	681b      	ldr	r3, [r3, #0]
 80038fa:	695a      	ldr	r2, [r3, #20]
 80038fc:	68fb      	ldr	r3, [r7, #12]
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	f022 0201 	bic.w	r2, r2, #1
 8003904:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8003906:	68fb      	ldr	r3, [r7, #12]
 8003908:	2220      	movs	r2, #32
 800390a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 800390e:	68fb      	ldr	r3, [r7, #12]
 8003910:	2220      	movs	r2, #32
 8003912:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8003916:	68fb      	ldr	r3, [r7, #12]
 8003918:	2200      	movs	r2, #0
 800391a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 800391e:	2303      	movs	r3, #3
 8003920:	e00f      	b.n	8003942 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003922:	68fb      	ldr	r3, [r7, #12]
 8003924:	681b      	ldr	r3, [r3, #0]
 8003926:	681a      	ldr	r2, [r3, #0]
 8003928:	68bb      	ldr	r3, [r7, #8]
 800392a:	4013      	ands	r3, r2
 800392c:	68ba      	ldr	r2, [r7, #8]
 800392e:	429a      	cmp	r2, r3
 8003930:	bf0c      	ite	eq
 8003932:	2301      	moveq	r3, #1
 8003934:	2300      	movne	r3, #0
 8003936:	b2db      	uxtb	r3, r3
 8003938:	461a      	mov	r2, r3
 800393a:	79fb      	ldrb	r3, [r7, #7]
 800393c:	429a      	cmp	r2, r3
 800393e:	d0c3      	beq.n	80038c8 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003940:	2300      	movs	r3, #0
}
 8003942:	4618      	mov	r0, r3
 8003944:	3710      	adds	r7, #16
 8003946:	46bd      	mov	sp, r7
 8003948:	bd80      	pop	{r7, pc}
	...

0800394c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800394c:	b580      	push	{r7, lr}
 800394e:	b084      	sub	sp, #16
 8003950:	af00      	add	r7, sp, #0
 8003952:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	691b      	ldr	r3, [r3, #16]
 800395a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	68da      	ldr	r2, [r3, #12]
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	430a      	orrs	r2, r1
 8003968:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	689a      	ldr	r2, [r3, #8]
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	691b      	ldr	r3, [r3, #16]
 8003972:	431a      	orrs	r2, r3
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	695b      	ldr	r3, [r3, #20]
 8003978:	431a      	orrs	r2, r3
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	69db      	ldr	r3, [r3, #28]
 800397e:	4313      	orrs	r3, r2
 8003980:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	681b      	ldr	r3, [r3, #0]
 8003986:	68db      	ldr	r3, [r3, #12]
 8003988:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 800398c:	f023 030c 	bic.w	r3, r3, #12
 8003990:	687a      	ldr	r2, [r7, #4]
 8003992:	6812      	ldr	r2, [r2, #0]
 8003994:	68b9      	ldr	r1, [r7, #8]
 8003996:	430b      	orrs	r3, r1
 8003998:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	681b      	ldr	r3, [r3, #0]
 800399e:	695b      	ldr	r3, [r3, #20]
 80039a0:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	699a      	ldr	r2, [r3, #24]
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	430a      	orrs	r2, r1
 80039ae:	615a      	str	r2, [r3, #20]


  if((huart->Instance == USART1))
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	4a55      	ldr	r2, [pc, #340]	; (8003b0c <UART_SetConfig+0x1c0>)
 80039b6:	4293      	cmp	r3, r2
 80039b8:	d103      	bne.n	80039c2 <UART_SetConfig+0x76>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 80039ba:	f7ff fe29 	bl	8003610 <HAL_RCC_GetPCLK2Freq>
 80039be:	60f8      	str	r0, [r7, #12]
 80039c0:	e002      	b.n	80039c8 <UART_SetConfig+0x7c>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 80039c2:	f7ff fe11 	bl	80035e8 <HAL_RCC_GetPCLK1Freq>
 80039c6:	60f8      	str	r0, [r7, #12]
  }

  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	69db      	ldr	r3, [r3, #28]
 80039cc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80039d0:	d14c      	bne.n	8003a6c <UART_SetConfig+0x120>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80039d2:	68fa      	ldr	r2, [r7, #12]
 80039d4:	4613      	mov	r3, r2
 80039d6:	009b      	lsls	r3, r3, #2
 80039d8:	4413      	add	r3, r2
 80039da:	009a      	lsls	r2, r3, #2
 80039dc:	441a      	add	r2, r3
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	685b      	ldr	r3, [r3, #4]
 80039e2:	005b      	lsls	r3, r3, #1
 80039e4:	fbb2 f3f3 	udiv	r3, r2, r3
 80039e8:	4a49      	ldr	r2, [pc, #292]	; (8003b10 <UART_SetConfig+0x1c4>)
 80039ea:	fba2 2303 	umull	r2, r3, r2, r3
 80039ee:	095b      	lsrs	r3, r3, #5
 80039f0:	0119      	lsls	r1, r3, #4
 80039f2:	68fa      	ldr	r2, [r7, #12]
 80039f4:	4613      	mov	r3, r2
 80039f6:	009b      	lsls	r3, r3, #2
 80039f8:	4413      	add	r3, r2
 80039fa:	009a      	lsls	r2, r3, #2
 80039fc:	441a      	add	r2, r3
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	685b      	ldr	r3, [r3, #4]
 8003a02:	005b      	lsls	r3, r3, #1
 8003a04:	fbb2 f2f3 	udiv	r2, r2, r3
 8003a08:	4b41      	ldr	r3, [pc, #260]	; (8003b10 <UART_SetConfig+0x1c4>)
 8003a0a:	fba3 0302 	umull	r0, r3, r3, r2
 8003a0e:	095b      	lsrs	r3, r3, #5
 8003a10:	2064      	movs	r0, #100	; 0x64
 8003a12:	fb00 f303 	mul.w	r3, r0, r3
 8003a16:	1ad3      	subs	r3, r2, r3
 8003a18:	00db      	lsls	r3, r3, #3
 8003a1a:	3332      	adds	r3, #50	; 0x32
 8003a1c:	4a3c      	ldr	r2, [pc, #240]	; (8003b10 <UART_SetConfig+0x1c4>)
 8003a1e:	fba2 2303 	umull	r2, r3, r2, r3
 8003a22:	095b      	lsrs	r3, r3, #5
 8003a24:	005b      	lsls	r3, r3, #1
 8003a26:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8003a2a:	4419      	add	r1, r3
 8003a2c:	68fa      	ldr	r2, [r7, #12]
 8003a2e:	4613      	mov	r3, r2
 8003a30:	009b      	lsls	r3, r3, #2
 8003a32:	4413      	add	r3, r2
 8003a34:	009a      	lsls	r2, r3, #2
 8003a36:	441a      	add	r2, r3
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	685b      	ldr	r3, [r3, #4]
 8003a3c:	005b      	lsls	r3, r3, #1
 8003a3e:	fbb2 f2f3 	udiv	r2, r2, r3
 8003a42:	4b33      	ldr	r3, [pc, #204]	; (8003b10 <UART_SetConfig+0x1c4>)
 8003a44:	fba3 0302 	umull	r0, r3, r3, r2
 8003a48:	095b      	lsrs	r3, r3, #5
 8003a4a:	2064      	movs	r0, #100	; 0x64
 8003a4c:	fb00 f303 	mul.w	r3, r0, r3
 8003a50:	1ad3      	subs	r3, r2, r3
 8003a52:	00db      	lsls	r3, r3, #3
 8003a54:	3332      	adds	r3, #50	; 0x32
 8003a56:	4a2e      	ldr	r2, [pc, #184]	; (8003b10 <UART_SetConfig+0x1c4>)
 8003a58:	fba2 2303 	umull	r2, r3, r2, r3
 8003a5c:	095b      	lsrs	r3, r3, #5
 8003a5e:	f003 0207 	and.w	r2, r3, #7
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	681b      	ldr	r3, [r3, #0]
 8003a66:	440a      	add	r2, r1
 8003a68:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8003a6a:	e04a      	b.n	8003b02 <UART_SetConfig+0x1b6>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003a6c:	68fa      	ldr	r2, [r7, #12]
 8003a6e:	4613      	mov	r3, r2
 8003a70:	009b      	lsls	r3, r3, #2
 8003a72:	4413      	add	r3, r2
 8003a74:	009a      	lsls	r2, r3, #2
 8003a76:	441a      	add	r2, r3
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	685b      	ldr	r3, [r3, #4]
 8003a7c:	009b      	lsls	r3, r3, #2
 8003a7e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003a82:	4a23      	ldr	r2, [pc, #140]	; (8003b10 <UART_SetConfig+0x1c4>)
 8003a84:	fba2 2303 	umull	r2, r3, r2, r3
 8003a88:	095b      	lsrs	r3, r3, #5
 8003a8a:	0119      	lsls	r1, r3, #4
 8003a8c:	68fa      	ldr	r2, [r7, #12]
 8003a8e:	4613      	mov	r3, r2
 8003a90:	009b      	lsls	r3, r3, #2
 8003a92:	4413      	add	r3, r2
 8003a94:	009a      	lsls	r2, r3, #2
 8003a96:	441a      	add	r2, r3
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	685b      	ldr	r3, [r3, #4]
 8003a9c:	009b      	lsls	r3, r3, #2
 8003a9e:	fbb2 f2f3 	udiv	r2, r2, r3
 8003aa2:	4b1b      	ldr	r3, [pc, #108]	; (8003b10 <UART_SetConfig+0x1c4>)
 8003aa4:	fba3 0302 	umull	r0, r3, r3, r2
 8003aa8:	095b      	lsrs	r3, r3, #5
 8003aaa:	2064      	movs	r0, #100	; 0x64
 8003aac:	fb00 f303 	mul.w	r3, r0, r3
 8003ab0:	1ad3      	subs	r3, r2, r3
 8003ab2:	011b      	lsls	r3, r3, #4
 8003ab4:	3332      	adds	r3, #50	; 0x32
 8003ab6:	4a16      	ldr	r2, [pc, #88]	; (8003b10 <UART_SetConfig+0x1c4>)
 8003ab8:	fba2 2303 	umull	r2, r3, r2, r3
 8003abc:	095b      	lsrs	r3, r3, #5
 8003abe:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003ac2:	4419      	add	r1, r3
 8003ac4:	68fa      	ldr	r2, [r7, #12]
 8003ac6:	4613      	mov	r3, r2
 8003ac8:	009b      	lsls	r3, r3, #2
 8003aca:	4413      	add	r3, r2
 8003acc:	009a      	lsls	r2, r3, #2
 8003ace:	441a      	add	r2, r3
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	685b      	ldr	r3, [r3, #4]
 8003ad4:	009b      	lsls	r3, r3, #2
 8003ad6:	fbb2 f2f3 	udiv	r2, r2, r3
 8003ada:	4b0d      	ldr	r3, [pc, #52]	; (8003b10 <UART_SetConfig+0x1c4>)
 8003adc:	fba3 0302 	umull	r0, r3, r3, r2
 8003ae0:	095b      	lsrs	r3, r3, #5
 8003ae2:	2064      	movs	r0, #100	; 0x64
 8003ae4:	fb00 f303 	mul.w	r3, r0, r3
 8003ae8:	1ad3      	subs	r3, r2, r3
 8003aea:	011b      	lsls	r3, r3, #4
 8003aec:	3332      	adds	r3, #50	; 0x32
 8003aee:	4a08      	ldr	r2, [pc, #32]	; (8003b10 <UART_SetConfig+0x1c4>)
 8003af0:	fba2 2303 	umull	r2, r3, r2, r3
 8003af4:	095b      	lsrs	r3, r3, #5
 8003af6:	f003 020f 	and.w	r2, r3, #15
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	681b      	ldr	r3, [r3, #0]
 8003afe:	440a      	add	r2, r1
 8003b00:	609a      	str	r2, [r3, #8]
}
 8003b02:	bf00      	nop
 8003b04:	3710      	adds	r7, #16
 8003b06:	46bd      	mov	sp, r7
 8003b08:	bd80      	pop	{r7, pc}
 8003b0a:	bf00      	nop
 8003b0c:	40013800 	.word	0x40013800
 8003b10:	51eb851f 	.word	0x51eb851f

08003b14 <__errno>:
 8003b14:	4b01      	ldr	r3, [pc, #4]	; (8003b1c <__errno+0x8>)
 8003b16:	6818      	ldr	r0, [r3, #0]
 8003b18:	4770      	bx	lr
 8003b1a:	bf00      	nop
 8003b1c:	2000000c 	.word	0x2000000c

08003b20 <__libc_init_array>:
 8003b20:	b570      	push	{r4, r5, r6, lr}
 8003b22:	2600      	movs	r6, #0
 8003b24:	4d0c      	ldr	r5, [pc, #48]	; (8003b58 <__libc_init_array+0x38>)
 8003b26:	4c0d      	ldr	r4, [pc, #52]	; (8003b5c <__libc_init_array+0x3c>)
 8003b28:	1b64      	subs	r4, r4, r5
 8003b2a:	10a4      	asrs	r4, r4, #2
 8003b2c:	42a6      	cmp	r6, r4
 8003b2e:	d109      	bne.n	8003b44 <__libc_init_array+0x24>
 8003b30:	f000 fc9c 	bl	800446c <_init>
 8003b34:	2600      	movs	r6, #0
 8003b36:	4d0a      	ldr	r5, [pc, #40]	; (8003b60 <__libc_init_array+0x40>)
 8003b38:	4c0a      	ldr	r4, [pc, #40]	; (8003b64 <__libc_init_array+0x44>)
 8003b3a:	1b64      	subs	r4, r4, r5
 8003b3c:	10a4      	asrs	r4, r4, #2
 8003b3e:	42a6      	cmp	r6, r4
 8003b40:	d105      	bne.n	8003b4e <__libc_init_array+0x2e>
 8003b42:	bd70      	pop	{r4, r5, r6, pc}
 8003b44:	f855 3b04 	ldr.w	r3, [r5], #4
 8003b48:	4798      	blx	r3
 8003b4a:	3601      	adds	r6, #1
 8003b4c:	e7ee      	b.n	8003b2c <__libc_init_array+0xc>
 8003b4e:	f855 3b04 	ldr.w	r3, [r5], #4
 8003b52:	4798      	blx	r3
 8003b54:	3601      	adds	r6, #1
 8003b56:	e7f2      	b.n	8003b3e <__libc_init_array+0x1e>
 8003b58:	08004524 	.word	0x08004524
 8003b5c:	08004524 	.word	0x08004524
 8003b60:	08004524 	.word	0x08004524
 8003b64:	08004528 	.word	0x08004528

08003b68 <memset>:
 8003b68:	4603      	mov	r3, r0
 8003b6a:	4402      	add	r2, r0
 8003b6c:	4293      	cmp	r3, r2
 8003b6e:	d100      	bne.n	8003b72 <memset+0xa>
 8003b70:	4770      	bx	lr
 8003b72:	f803 1b01 	strb.w	r1, [r3], #1
 8003b76:	e7f9      	b.n	8003b6c <memset+0x4>

08003b78 <siprintf>:
 8003b78:	b40e      	push	{r1, r2, r3}
 8003b7a:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8003b7e:	b500      	push	{lr}
 8003b80:	b09c      	sub	sp, #112	; 0x70
 8003b82:	ab1d      	add	r3, sp, #116	; 0x74
 8003b84:	9002      	str	r0, [sp, #8]
 8003b86:	9006      	str	r0, [sp, #24]
 8003b88:	9107      	str	r1, [sp, #28]
 8003b8a:	9104      	str	r1, [sp, #16]
 8003b8c:	4808      	ldr	r0, [pc, #32]	; (8003bb0 <siprintf+0x38>)
 8003b8e:	4909      	ldr	r1, [pc, #36]	; (8003bb4 <siprintf+0x3c>)
 8003b90:	f853 2b04 	ldr.w	r2, [r3], #4
 8003b94:	9105      	str	r1, [sp, #20]
 8003b96:	6800      	ldr	r0, [r0, #0]
 8003b98:	a902      	add	r1, sp, #8
 8003b9a:	9301      	str	r3, [sp, #4]
 8003b9c:	f000 f868 	bl	8003c70 <_svfiprintf_r>
 8003ba0:	2200      	movs	r2, #0
 8003ba2:	9b02      	ldr	r3, [sp, #8]
 8003ba4:	701a      	strb	r2, [r3, #0]
 8003ba6:	b01c      	add	sp, #112	; 0x70
 8003ba8:	f85d eb04 	ldr.w	lr, [sp], #4
 8003bac:	b003      	add	sp, #12
 8003bae:	4770      	bx	lr
 8003bb0:	2000000c 	.word	0x2000000c
 8003bb4:	ffff0208 	.word	0xffff0208

08003bb8 <__ssputs_r>:
 8003bb8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003bbc:	688e      	ldr	r6, [r1, #8]
 8003bbe:	4682      	mov	sl, r0
 8003bc0:	429e      	cmp	r6, r3
 8003bc2:	460c      	mov	r4, r1
 8003bc4:	4690      	mov	r8, r2
 8003bc6:	461f      	mov	r7, r3
 8003bc8:	d838      	bhi.n	8003c3c <__ssputs_r+0x84>
 8003bca:	898a      	ldrh	r2, [r1, #12]
 8003bcc:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8003bd0:	d032      	beq.n	8003c38 <__ssputs_r+0x80>
 8003bd2:	6825      	ldr	r5, [r4, #0]
 8003bd4:	6909      	ldr	r1, [r1, #16]
 8003bd6:	3301      	adds	r3, #1
 8003bd8:	eba5 0901 	sub.w	r9, r5, r1
 8003bdc:	6965      	ldr	r5, [r4, #20]
 8003bde:	444b      	add	r3, r9
 8003be0:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8003be4:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8003be8:	106d      	asrs	r5, r5, #1
 8003bea:	429d      	cmp	r5, r3
 8003bec:	bf38      	it	cc
 8003bee:	461d      	movcc	r5, r3
 8003bf0:	0553      	lsls	r3, r2, #21
 8003bf2:	d531      	bpl.n	8003c58 <__ssputs_r+0xa0>
 8003bf4:	4629      	mov	r1, r5
 8003bf6:	f000 fb6f 	bl	80042d8 <_malloc_r>
 8003bfa:	4606      	mov	r6, r0
 8003bfc:	b950      	cbnz	r0, 8003c14 <__ssputs_r+0x5c>
 8003bfe:	230c      	movs	r3, #12
 8003c00:	f04f 30ff 	mov.w	r0, #4294967295
 8003c04:	f8ca 3000 	str.w	r3, [sl]
 8003c08:	89a3      	ldrh	r3, [r4, #12]
 8003c0a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003c0e:	81a3      	strh	r3, [r4, #12]
 8003c10:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003c14:	464a      	mov	r2, r9
 8003c16:	6921      	ldr	r1, [r4, #16]
 8003c18:	f000 face 	bl	80041b8 <memcpy>
 8003c1c:	89a3      	ldrh	r3, [r4, #12]
 8003c1e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8003c22:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003c26:	81a3      	strh	r3, [r4, #12]
 8003c28:	6126      	str	r6, [r4, #16]
 8003c2a:	444e      	add	r6, r9
 8003c2c:	6026      	str	r6, [r4, #0]
 8003c2e:	463e      	mov	r6, r7
 8003c30:	6165      	str	r5, [r4, #20]
 8003c32:	eba5 0509 	sub.w	r5, r5, r9
 8003c36:	60a5      	str	r5, [r4, #8]
 8003c38:	42be      	cmp	r6, r7
 8003c3a:	d900      	bls.n	8003c3e <__ssputs_r+0x86>
 8003c3c:	463e      	mov	r6, r7
 8003c3e:	4632      	mov	r2, r6
 8003c40:	4641      	mov	r1, r8
 8003c42:	6820      	ldr	r0, [r4, #0]
 8003c44:	f000 fac6 	bl	80041d4 <memmove>
 8003c48:	68a3      	ldr	r3, [r4, #8]
 8003c4a:	2000      	movs	r0, #0
 8003c4c:	1b9b      	subs	r3, r3, r6
 8003c4e:	60a3      	str	r3, [r4, #8]
 8003c50:	6823      	ldr	r3, [r4, #0]
 8003c52:	4433      	add	r3, r6
 8003c54:	6023      	str	r3, [r4, #0]
 8003c56:	e7db      	b.n	8003c10 <__ssputs_r+0x58>
 8003c58:	462a      	mov	r2, r5
 8003c5a:	f000 fbb1 	bl	80043c0 <_realloc_r>
 8003c5e:	4606      	mov	r6, r0
 8003c60:	2800      	cmp	r0, #0
 8003c62:	d1e1      	bne.n	8003c28 <__ssputs_r+0x70>
 8003c64:	4650      	mov	r0, sl
 8003c66:	6921      	ldr	r1, [r4, #16]
 8003c68:	f000 face 	bl	8004208 <_free_r>
 8003c6c:	e7c7      	b.n	8003bfe <__ssputs_r+0x46>
	...

08003c70 <_svfiprintf_r>:
 8003c70:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003c74:	4698      	mov	r8, r3
 8003c76:	898b      	ldrh	r3, [r1, #12]
 8003c78:	4607      	mov	r7, r0
 8003c7a:	061b      	lsls	r3, r3, #24
 8003c7c:	460d      	mov	r5, r1
 8003c7e:	4614      	mov	r4, r2
 8003c80:	b09d      	sub	sp, #116	; 0x74
 8003c82:	d50e      	bpl.n	8003ca2 <_svfiprintf_r+0x32>
 8003c84:	690b      	ldr	r3, [r1, #16]
 8003c86:	b963      	cbnz	r3, 8003ca2 <_svfiprintf_r+0x32>
 8003c88:	2140      	movs	r1, #64	; 0x40
 8003c8a:	f000 fb25 	bl	80042d8 <_malloc_r>
 8003c8e:	6028      	str	r0, [r5, #0]
 8003c90:	6128      	str	r0, [r5, #16]
 8003c92:	b920      	cbnz	r0, 8003c9e <_svfiprintf_r+0x2e>
 8003c94:	230c      	movs	r3, #12
 8003c96:	603b      	str	r3, [r7, #0]
 8003c98:	f04f 30ff 	mov.w	r0, #4294967295
 8003c9c:	e0d1      	b.n	8003e42 <_svfiprintf_r+0x1d2>
 8003c9e:	2340      	movs	r3, #64	; 0x40
 8003ca0:	616b      	str	r3, [r5, #20]
 8003ca2:	2300      	movs	r3, #0
 8003ca4:	9309      	str	r3, [sp, #36]	; 0x24
 8003ca6:	2320      	movs	r3, #32
 8003ca8:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8003cac:	2330      	movs	r3, #48	; 0x30
 8003cae:	f04f 0901 	mov.w	r9, #1
 8003cb2:	f8cd 800c 	str.w	r8, [sp, #12]
 8003cb6:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8003e5c <_svfiprintf_r+0x1ec>
 8003cba:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8003cbe:	4623      	mov	r3, r4
 8003cc0:	469a      	mov	sl, r3
 8003cc2:	f813 2b01 	ldrb.w	r2, [r3], #1
 8003cc6:	b10a      	cbz	r2, 8003ccc <_svfiprintf_r+0x5c>
 8003cc8:	2a25      	cmp	r2, #37	; 0x25
 8003cca:	d1f9      	bne.n	8003cc0 <_svfiprintf_r+0x50>
 8003ccc:	ebba 0b04 	subs.w	fp, sl, r4
 8003cd0:	d00b      	beq.n	8003cea <_svfiprintf_r+0x7a>
 8003cd2:	465b      	mov	r3, fp
 8003cd4:	4622      	mov	r2, r4
 8003cd6:	4629      	mov	r1, r5
 8003cd8:	4638      	mov	r0, r7
 8003cda:	f7ff ff6d 	bl	8003bb8 <__ssputs_r>
 8003cde:	3001      	adds	r0, #1
 8003ce0:	f000 80aa 	beq.w	8003e38 <_svfiprintf_r+0x1c8>
 8003ce4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8003ce6:	445a      	add	r2, fp
 8003ce8:	9209      	str	r2, [sp, #36]	; 0x24
 8003cea:	f89a 3000 	ldrb.w	r3, [sl]
 8003cee:	2b00      	cmp	r3, #0
 8003cf0:	f000 80a2 	beq.w	8003e38 <_svfiprintf_r+0x1c8>
 8003cf4:	2300      	movs	r3, #0
 8003cf6:	f04f 32ff 	mov.w	r2, #4294967295
 8003cfa:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8003cfe:	f10a 0a01 	add.w	sl, sl, #1
 8003d02:	9304      	str	r3, [sp, #16]
 8003d04:	9307      	str	r3, [sp, #28]
 8003d06:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8003d0a:	931a      	str	r3, [sp, #104]	; 0x68
 8003d0c:	4654      	mov	r4, sl
 8003d0e:	2205      	movs	r2, #5
 8003d10:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003d14:	4851      	ldr	r0, [pc, #324]	; (8003e5c <_svfiprintf_r+0x1ec>)
 8003d16:	f000 fa41 	bl	800419c <memchr>
 8003d1a:	9a04      	ldr	r2, [sp, #16]
 8003d1c:	b9d8      	cbnz	r0, 8003d56 <_svfiprintf_r+0xe6>
 8003d1e:	06d0      	lsls	r0, r2, #27
 8003d20:	bf44      	itt	mi
 8003d22:	2320      	movmi	r3, #32
 8003d24:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003d28:	0711      	lsls	r1, r2, #28
 8003d2a:	bf44      	itt	mi
 8003d2c:	232b      	movmi	r3, #43	; 0x2b
 8003d2e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003d32:	f89a 3000 	ldrb.w	r3, [sl]
 8003d36:	2b2a      	cmp	r3, #42	; 0x2a
 8003d38:	d015      	beq.n	8003d66 <_svfiprintf_r+0xf6>
 8003d3a:	4654      	mov	r4, sl
 8003d3c:	2000      	movs	r0, #0
 8003d3e:	f04f 0c0a 	mov.w	ip, #10
 8003d42:	9a07      	ldr	r2, [sp, #28]
 8003d44:	4621      	mov	r1, r4
 8003d46:	f811 3b01 	ldrb.w	r3, [r1], #1
 8003d4a:	3b30      	subs	r3, #48	; 0x30
 8003d4c:	2b09      	cmp	r3, #9
 8003d4e:	d94e      	bls.n	8003dee <_svfiprintf_r+0x17e>
 8003d50:	b1b0      	cbz	r0, 8003d80 <_svfiprintf_r+0x110>
 8003d52:	9207      	str	r2, [sp, #28]
 8003d54:	e014      	b.n	8003d80 <_svfiprintf_r+0x110>
 8003d56:	eba0 0308 	sub.w	r3, r0, r8
 8003d5a:	fa09 f303 	lsl.w	r3, r9, r3
 8003d5e:	4313      	orrs	r3, r2
 8003d60:	46a2      	mov	sl, r4
 8003d62:	9304      	str	r3, [sp, #16]
 8003d64:	e7d2      	b.n	8003d0c <_svfiprintf_r+0x9c>
 8003d66:	9b03      	ldr	r3, [sp, #12]
 8003d68:	1d19      	adds	r1, r3, #4
 8003d6a:	681b      	ldr	r3, [r3, #0]
 8003d6c:	9103      	str	r1, [sp, #12]
 8003d6e:	2b00      	cmp	r3, #0
 8003d70:	bfbb      	ittet	lt
 8003d72:	425b      	neglt	r3, r3
 8003d74:	f042 0202 	orrlt.w	r2, r2, #2
 8003d78:	9307      	strge	r3, [sp, #28]
 8003d7a:	9307      	strlt	r3, [sp, #28]
 8003d7c:	bfb8      	it	lt
 8003d7e:	9204      	strlt	r2, [sp, #16]
 8003d80:	7823      	ldrb	r3, [r4, #0]
 8003d82:	2b2e      	cmp	r3, #46	; 0x2e
 8003d84:	d10c      	bne.n	8003da0 <_svfiprintf_r+0x130>
 8003d86:	7863      	ldrb	r3, [r4, #1]
 8003d88:	2b2a      	cmp	r3, #42	; 0x2a
 8003d8a:	d135      	bne.n	8003df8 <_svfiprintf_r+0x188>
 8003d8c:	9b03      	ldr	r3, [sp, #12]
 8003d8e:	3402      	adds	r4, #2
 8003d90:	1d1a      	adds	r2, r3, #4
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	9203      	str	r2, [sp, #12]
 8003d96:	2b00      	cmp	r3, #0
 8003d98:	bfb8      	it	lt
 8003d9a:	f04f 33ff 	movlt.w	r3, #4294967295
 8003d9e:	9305      	str	r3, [sp, #20]
 8003da0:	f8df a0bc 	ldr.w	sl, [pc, #188]	; 8003e60 <_svfiprintf_r+0x1f0>
 8003da4:	2203      	movs	r2, #3
 8003da6:	4650      	mov	r0, sl
 8003da8:	7821      	ldrb	r1, [r4, #0]
 8003daa:	f000 f9f7 	bl	800419c <memchr>
 8003dae:	b140      	cbz	r0, 8003dc2 <_svfiprintf_r+0x152>
 8003db0:	2340      	movs	r3, #64	; 0x40
 8003db2:	eba0 000a 	sub.w	r0, r0, sl
 8003db6:	fa03 f000 	lsl.w	r0, r3, r0
 8003dba:	9b04      	ldr	r3, [sp, #16]
 8003dbc:	3401      	adds	r4, #1
 8003dbe:	4303      	orrs	r3, r0
 8003dc0:	9304      	str	r3, [sp, #16]
 8003dc2:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003dc6:	2206      	movs	r2, #6
 8003dc8:	4826      	ldr	r0, [pc, #152]	; (8003e64 <_svfiprintf_r+0x1f4>)
 8003dca:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8003dce:	f000 f9e5 	bl	800419c <memchr>
 8003dd2:	2800      	cmp	r0, #0
 8003dd4:	d038      	beq.n	8003e48 <_svfiprintf_r+0x1d8>
 8003dd6:	4b24      	ldr	r3, [pc, #144]	; (8003e68 <_svfiprintf_r+0x1f8>)
 8003dd8:	bb1b      	cbnz	r3, 8003e22 <_svfiprintf_r+0x1b2>
 8003dda:	9b03      	ldr	r3, [sp, #12]
 8003ddc:	3307      	adds	r3, #7
 8003dde:	f023 0307 	bic.w	r3, r3, #7
 8003de2:	3308      	adds	r3, #8
 8003de4:	9303      	str	r3, [sp, #12]
 8003de6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003de8:	4433      	add	r3, r6
 8003dea:	9309      	str	r3, [sp, #36]	; 0x24
 8003dec:	e767      	b.n	8003cbe <_svfiprintf_r+0x4e>
 8003dee:	460c      	mov	r4, r1
 8003df0:	2001      	movs	r0, #1
 8003df2:	fb0c 3202 	mla	r2, ip, r2, r3
 8003df6:	e7a5      	b.n	8003d44 <_svfiprintf_r+0xd4>
 8003df8:	2300      	movs	r3, #0
 8003dfa:	f04f 0c0a 	mov.w	ip, #10
 8003dfe:	4619      	mov	r1, r3
 8003e00:	3401      	adds	r4, #1
 8003e02:	9305      	str	r3, [sp, #20]
 8003e04:	4620      	mov	r0, r4
 8003e06:	f810 2b01 	ldrb.w	r2, [r0], #1
 8003e0a:	3a30      	subs	r2, #48	; 0x30
 8003e0c:	2a09      	cmp	r2, #9
 8003e0e:	d903      	bls.n	8003e18 <_svfiprintf_r+0x1a8>
 8003e10:	2b00      	cmp	r3, #0
 8003e12:	d0c5      	beq.n	8003da0 <_svfiprintf_r+0x130>
 8003e14:	9105      	str	r1, [sp, #20]
 8003e16:	e7c3      	b.n	8003da0 <_svfiprintf_r+0x130>
 8003e18:	4604      	mov	r4, r0
 8003e1a:	2301      	movs	r3, #1
 8003e1c:	fb0c 2101 	mla	r1, ip, r1, r2
 8003e20:	e7f0      	b.n	8003e04 <_svfiprintf_r+0x194>
 8003e22:	ab03      	add	r3, sp, #12
 8003e24:	9300      	str	r3, [sp, #0]
 8003e26:	462a      	mov	r2, r5
 8003e28:	4638      	mov	r0, r7
 8003e2a:	4b10      	ldr	r3, [pc, #64]	; (8003e6c <_svfiprintf_r+0x1fc>)
 8003e2c:	a904      	add	r1, sp, #16
 8003e2e:	f3af 8000 	nop.w
 8003e32:	1c42      	adds	r2, r0, #1
 8003e34:	4606      	mov	r6, r0
 8003e36:	d1d6      	bne.n	8003de6 <_svfiprintf_r+0x176>
 8003e38:	89ab      	ldrh	r3, [r5, #12]
 8003e3a:	065b      	lsls	r3, r3, #25
 8003e3c:	f53f af2c 	bmi.w	8003c98 <_svfiprintf_r+0x28>
 8003e40:	9809      	ldr	r0, [sp, #36]	; 0x24
 8003e42:	b01d      	add	sp, #116	; 0x74
 8003e44:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003e48:	ab03      	add	r3, sp, #12
 8003e4a:	9300      	str	r3, [sp, #0]
 8003e4c:	462a      	mov	r2, r5
 8003e4e:	4638      	mov	r0, r7
 8003e50:	4b06      	ldr	r3, [pc, #24]	; (8003e6c <_svfiprintf_r+0x1fc>)
 8003e52:	a904      	add	r1, sp, #16
 8003e54:	f000 f87c 	bl	8003f50 <_printf_i>
 8003e58:	e7eb      	b.n	8003e32 <_svfiprintf_r+0x1c2>
 8003e5a:	bf00      	nop
 8003e5c:	080044e8 	.word	0x080044e8
 8003e60:	080044ee 	.word	0x080044ee
 8003e64:	080044f2 	.word	0x080044f2
 8003e68:	00000000 	.word	0x00000000
 8003e6c:	08003bb9 	.word	0x08003bb9

08003e70 <_printf_common>:
 8003e70:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003e74:	4616      	mov	r6, r2
 8003e76:	4699      	mov	r9, r3
 8003e78:	688a      	ldr	r2, [r1, #8]
 8003e7a:	690b      	ldr	r3, [r1, #16]
 8003e7c:	4607      	mov	r7, r0
 8003e7e:	4293      	cmp	r3, r2
 8003e80:	bfb8      	it	lt
 8003e82:	4613      	movlt	r3, r2
 8003e84:	6033      	str	r3, [r6, #0]
 8003e86:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8003e8a:	460c      	mov	r4, r1
 8003e8c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8003e90:	b10a      	cbz	r2, 8003e96 <_printf_common+0x26>
 8003e92:	3301      	adds	r3, #1
 8003e94:	6033      	str	r3, [r6, #0]
 8003e96:	6823      	ldr	r3, [r4, #0]
 8003e98:	0699      	lsls	r1, r3, #26
 8003e9a:	bf42      	ittt	mi
 8003e9c:	6833      	ldrmi	r3, [r6, #0]
 8003e9e:	3302      	addmi	r3, #2
 8003ea0:	6033      	strmi	r3, [r6, #0]
 8003ea2:	6825      	ldr	r5, [r4, #0]
 8003ea4:	f015 0506 	ands.w	r5, r5, #6
 8003ea8:	d106      	bne.n	8003eb8 <_printf_common+0x48>
 8003eaa:	f104 0a19 	add.w	sl, r4, #25
 8003eae:	68e3      	ldr	r3, [r4, #12]
 8003eb0:	6832      	ldr	r2, [r6, #0]
 8003eb2:	1a9b      	subs	r3, r3, r2
 8003eb4:	42ab      	cmp	r3, r5
 8003eb6:	dc28      	bgt.n	8003f0a <_printf_common+0x9a>
 8003eb8:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8003ebc:	1e13      	subs	r3, r2, #0
 8003ebe:	6822      	ldr	r2, [r4, #0]
 8003ec0:	bf18      	it	ne
 8003ec2:	2301      	movne	r3, #1
 8003ec4:	0692      	lsls	r2, r2, #26
 8003ec6:	d42d      	bmi.n	8003f24 <_printf_common+0xb4>
 8003ec8:	4649      	mov	r1, r9
 8003eca:	4638      	mov	r0, r7
 8003ecc:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8003ed0:	47c0      	blx	r8
 8003ed2:	3001      	adds	r0, #1
 8003ed4:	d020      	beq.n	8003f18 <_printf_common+0xa8>
 8003ed6:	6823      	ldr	r3, [r4, #0]
 8003ed8:	68e5      	ldr	r5, [r4, #12]
 8003eda:	f003 0306 	and.w	r3, r3, #6
 8003ede:	2b04      	cmp	r3, #4
 8003ee0:	bf18      	it	ne
 8003ee2:	2500      	movne	r5, #0
 8003ee4:	6832      	ldr	r2, [r6, #0]
 8003ee6:	f04f 0600 	mov.w	r6, #0
 8003eea:	68a3      	ldr	r3, [r4, #8]
 8003eec:	bf08      	it	eq
 8003eee:	1aad      	subeq	r5, r5, r2
 8003ef0:	6922      	ldr	r2, [r4, #16]
 8003ef2:	bf08      	it	eq
 8003ef4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003ef8:	4293      	cmp	r3, r2
 8003efa:	bfc4      	itt	gt
 8003efc:	1a9b      	subgt	r3, r3, r2
 8003efe:	18ed      	addgt	r5, r5, r3
 8003f00:	341a      	adds	r4, #26
 8003f02:	42b5      	cmp	r5, r6
 8003f04:	d11a      	bne.n	8003f3c <_printf_common+0xcc>
 8003f06:	2000      	movs	r0, #0
 8003f08:	e008      	b.n	8003f1c <_printf_common+0xac>
 8003f0a:	2301      	movs	r3, #1
 8003f0c:	4652      	mov	r2, sl
 8003f0e:	4649      	mov	r1, r9
 8003f10:	4638      	mov	r0, r7
 8003f12:	47c0      	blx	r8
 8003f14:	3001      	adds	r0, #1
 8003f16:	d103      	bne.n	8003f20 <_printf_common+0xb0>
 8003f18:	f04f 30ff 	mov.w	r0, #4294967295
 8003f1c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003f20:	3501      	adds	r5, #1
 8003f22:	e7c4      	b.n	8003eae <_printf_common+0x3e>
 8003f24:	2030      	movs	r0, #48	; 0x30
 8003f26:	18e1      	adds	r1, r4, r3
 8003f28:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8003f2c:	1c5a      	adds	r2, r3, #1
 8003f2e:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8003f32:	4422      	add	r2, r4
 8003f34:	3302      	adds	r3, #2
 8003f36:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8003f3a:	e7c5      	b.n	8003ec8 <_printf_common+0x58>
 8003f3c:	2301      	movs	r3, #1
 8003f3e:	4622      	mov	r2, r4
 8003f40:	4649      	mov	r1, r9
 8003f42:	4638      	mov	r0, r7
 8003f44:	47c0      	blx	r8
 8003f46:	3001      	adds	r0, #1
 8003f48:	d0e6      	beq.n	8003f18 <_printf_common+0xa8>
 8003f4a:	3601      	adds	r6, #1
 8003f4c:	e7d9      	b.n	8003f02 <_printf_common+0x92>
	...

08003f50 <_printf_i>:
 8003f50:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003f54:	7e0f      	ldrb	r7, [r1, #24]
 8003f56:	4691      	mov	r9, r2
 8003f58:	2f78      	cmp	r7, #120	; 0x78
 8003f5a:	4680      	mov	r8, r0
 8003f5c:	460c      	mov	r4, r1
 8003f5e:	469a      	mov	sl, r3
 8003f60:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8003f62:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8003f66:	d807      	bhi.n	8003f78 <_printf_i+0x28>
 8003f68:	2f62      	cmp	r7, #98	; 0x62
 8003f6a:	d80a      	bhi.n	8003f82 <_printf_i+0x32>
 8003f6c:	2f00      	cmp	r7, #0
 8003f6e:	f000 80d9 	beq.w	8004124 <_printf_i+0x1d4>
 8003f72:	2f58      	cmp	r7, #88	; 0x58
 8003f74:	f000 80a4 	beq.w	80040c0 <_printf_i+0x170>
 8003f78:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003f7c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8003f80:	e03a      	b.n	8003ff8 <_printf_i+0xa8>
 8003f82:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8003f86:	2b15      	cmp	r3, #21
 8003f88:	d8f6      	bhi.n	8003f78 <_printf_i+0x28>
 8003f8a:	a101      	add	r1, pc, #4	; (adr r1, 8003f90 <_printf_i+0x40>)
 8003f8c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8003f90:	08003fe9 	.word	0x08003fe9
 8003f94:	08003ffd 	.word	0x08003ffd
 8003f98:	08003f79 	.word	0x08003f79
 8003f9c:	08003f79 	.word	0x08003f79
 8003fa0:	08003f79 	.word	0x08003f79
 8003fa4:	08003f79 	.word	0x08003f79
 8003fa8:	08003ffd 	.word	0x08003ffd
 8003fac:	08003f79 	.word	0x08003f79
 8003fb0:	08003f79 	.word	0x08003f79
 8003fb4:	08003f79 	.word	0x08003f79
 8003fb8:	08003f79 	.word	0x08003f79
 8003fbc:	0800410b 	.word	0x0800410b
 8003fc0:	0800402d 	.word	0x0800402d
 8003fc4:	080040ed 	.word	0x080040ed
 8003fc8:	08003f79 	.word	0x08003f79
 8003fcc:	08003f79 	.word	0x08003f79
 8003fd0:	0800412d 	.word	0x0800412d
 8003fd4:	08003f79 	.word	0x08003f79
 8003fd8:	0800402d 	.word	0x0800402d
 8003fdc:	08003f79 	.word	0x08003f79
 8003fe0:	08003f79 	.word	0x08003f79
 8003fe4:	080040f5 	.word	0x080040f5
 8003fe8:	682b      	ldr	r3, [r5, #0]
 8003fea:	1d1a      	adds	r2, r3, #4
 8003fec:	681b      	ldr	r3, [r3, #0]
 8003fee:	602a      	str	r2, [r5, #0]
 8003ff0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003ff4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8003ff8:	2301      	movs	r3, #1
 8003ffa:	e0a4      	b.n	8004146 <_printf_i+0x1f6>
 8003ffc:	6820      	ldr	r0, [r4, #0]
 8003ffe:	6829      	ldr	r1, [r5, #0]
 8004000:	0606      	lsls	r6, r0, #24
 8004002:	f101 0304 	add.w	r3, r1, #4
 8004006:	d50a      	bpl.n	800401e <_printf_i+0xce>
 8004008:	680e      	ldr	r6, [r1, #0]
 800400a:	602b      	str	r3, [r5, #0]
 800400c:	2e00      	cmp	r6, #0
 800400e:	da03      	bge.n	8004018 <_printf_i+0xc8>
 8004010:	232d      	movs	r3, #45	; 0x2d
 8004012:	4276      	negs	r6, r6
 8004014:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004018:	230a      	movs	r3, #10
 800401a:	485e      	ldr	r0, [pc, #376]	; (8004194 <_printf_i+0x244>)
 800401c:	e019      	b.n	8004052 <_printf_i+0x102>
 800401e:	680e      	ldr	r6, [r1, #0]
 8004020:	f010 0f40 	tst.w	r0, #64	; 0x40
 8004024:	602b      	str	r3, [r5, #0]
 8004026:	bf18      	it	ne
 8004028:	b236      	sxthne	r6, r6
 800402a:	e7ef      	b.n	800400c <_printf_i+0xbc>
 800402c:	682b      	ldr	r3, [r5, #0]
 800402e:	6820      	ldr	r0, [r4, #0]
 8004030:	1d19      	adds	r1, r3, #4
 8004032:	6029      	str	r1, [r5, #0]
 8004034:	0601      	lsls	r1, r0, #24
 8004036:	d501      	bpl.n	800403c <_printf_i+0xec>
 8004038:	681e      	ldr	r6, [r3, #0]
 800403a:	e002      	b.n	8004042 <_printf_i+0xf2>
 800403c:	0646      	lsls	r6, r0, #25
 800403e:	d5fb      	bpl.n	8004038 <_printf_i+0xe8>
 8004040:	881e      	ldrh	r6, [r3, #0]
 8004042:	2f6f      	cmp	r7, #111	; 0x6f
 8004044:	bf0c      	ite	eq
 8004046:	2308      	moveq	r3, #8
 8004048:	230a      	movne	r3, #10
 800404a:	4852      	ldr	r0, [pc, #328]	; (8004194 <_printf_i+0x244>)
 800404c:	2100      	movs	r1, #0
 800404e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8004052:	6865      	ldr	r5, [r4, #4]
 8004054:	2d00      	cmp	r5, #0
 8004056:	bfa8      	it	ge
 8004058:	6821      	ldrge	r1, [r4, #0]
 800405a:	60a5      	str	r5, [r4, #8]
 800405c:	bfa4      	itt	ge
 800405e:	f021 0104 	bicge.w	r1, r1, #4
 8004062:	6021      	strge	r1, [r4, #0]
 8004064:	b90e      	cbnz	r6, 800406a <_printf_i+0x11a>
 8004066:	2d00      	cmp	r5, #0
 8004068:	d04d      	beq.n	8004106 <_printf_i+0x1b6>
 800406a:	4615      	mov	r5, r2
 800406c:	fbb6 f1f3 	udiv	r1, r6, r3
 8004070:	fb03 6711 	mls	r7, r3, r1, r6
 8004074:	5dc7      	ldrb	r7, [r0, r7]
 8004076:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800407a:	4637      	mov	r7, r6
 800407c:	42bb      	cmp	r3, r7
 800407e:	460e      	mov	r6, r1
 8004080:	d9f4      	bls.n	800406c <_printf_i+0x11c>
 8004082:	2b08      	cmp	r3, #8
 8004084:	d10b      	bne.n	800409e <_printf_i+0x14e>
 8004086:	6823      	ldr	r3, [r4, #0]
 8004088:	07de      	lsls	r6, r3, #31
 800408a:	d508      	bpl.n	800409e <_printf_i+0x14e>
 800408c:	6923      	ldr	r3, [r4, #16]
 800408e:	6861      	ldr	r1, [r4, #4]
 8004090:	4299      	cmp	r1, r3
 8004092:	bfde      	ittt	le
 8004094:	2330      	movle	r3, #48	; 0x30
 8004096:	f805 3c01 	strble.w	r3, [r5, #-1]
 800409a:	f105 35ff 	addle.w	r5, r5, #4294967295
 800409e:	1b52      	subs	r2, r2, r5
 80040a0:	6122      	str	r2, [r4, #16]
 80040a2:	464b      	mov	r3, r9
 80040a4:	4621      	mov	r1, r4
 80040a6:	4640      	mov	r0, r8
 80040a8:	f8cd a000 	str.w	sl, [sp]
 80040ac:	aa03      	add	r2, sp, #12
 80040ae:	f7ff fedf 	bl	8003e70 <_printf_common>
 80040b2:	3001      	adds	r0, #1
 80040b4:	d14c      	bne.n	8004150 <_printf_i+0x200>
 80040b6:	f04f 30ff 	mov.w	r0, #4294967295
 80040ba:	b004      	add	sp, #16
 80040bc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80040c0:	4834      	ldr	r0, [pc, #208]	; (8004194 <_printf_i+0x244>)
 80040c2:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 80040c6:	6829      	ldr	r1, [r5, #0]
 80040c8:	6823      	ldr	r3, [r4, #0]
 80040ca:	f851 6b04 	ldr.w	r6, [r1], #4
 80040ce:	6029      	str	r1, [r5, #0]
 80040d0:	061d      	lsls	r5, r3, #24
 80040d2:	d514      	bpl.n	80040fe <_printf_i+0x1ae>
 80040d4:	07df      	lsls	r7, r3, #31
 80040d6:	bf44      	itt	mi
 80040d8:	f043 0320 	orrmi.w	r3, r3, #32
 80040dc:	6023      	strmi	r3, [r4, #0]
 80040de:	b91e      	cbnz	r6, 80040e8 <_printf_i+0x198>
 80040e0:	6823      	ldr	r3, [r4, #0]
 80040e2:	f023 0320 	bic.w	r3, r3, #32
 80040e6:	6023      	str	r3, [r4, #0]
 80040e8:	2310      	movs	r3, #16
 80040ea:	e7af      	b.n	800404c <_printf_i+0xfc>
 80040ec:	6823      	ldr	r3, [r4, #0]
 80040ee:	f043 0320 	orr.w	r3, r3, #32
 80040f2:	6023      	str	r3, [r4, #0]
 80040f4:	2378      	movs	r3, #120	; 0x78
 80040f6:	4828      	ldr	r0, [pc, #160]	; (8004198 <_printf_i+0x248>)
 80040f8:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80040fc:	e7e3      	b.n	80040c6 <_printf_i+0x176>
 80040fe:	0659      	lsls	r1, r3, #25
 8004100:	bf48      	it	mi
 8004102:	b2b6      	uxthmi	r6, r6
 8004104:	e7e6      	b.n	80040d4 <_printf_i+0x184>
 8004106:	4615      	mov	r5, r2
 8004108:	e7bb      	b.n	8004082 <_printf_i+0x132>
 800410a:	682b      	ldr	r3, [r5, #0]
 800410c:	6826      	ldr	r6, [r4, #0]
 800410e:	1d18      	adds	r0, r3, #4
 8004110:	6961      	ldr	r1, [r4, #20]
 8004112:	6028      	str	r0, [r5, #0]
 8004114:	0635      	lsls	r5, r6, #24
 8004116:	681b      	ldr	r3, [r3, #0]
 8004118:	d501      	bpl.n	800411e <_printf_i+0x1ce>
 800411a:	6019      	str	r1, [r3, #0]
 800411c:	e002      	b.n	8004124 <_printf_i+0x1d4>
 800411e:	0670      	lsls	r0, r6, #25
 8004120:	d5fb      	bpl.n	800411a <_printf_i+0x1ca>
 8004122:	8019      	strh	r1, [r3, #0]
 8004124:	2300      	movs	r3, #0
 8004126:	4615      	mov	r5, r2
 8004128:	6123      	str	r3, [r4, #16]
 800412a:	e7ba      	b.n	80040a2 <_printf_i+0x152>
 800412c:	682b      	ldr	r3, [r5, #0]
 800412e:	2100      	movs	r1, #0
 8004130:	1d1a      	adds	r2, r3, #4
 8004132:	602a      	str	r2, [r5, #0]
 8004134:	681d      	ldr	r5, [r3, #0]
 8004136:	6862      	ldr	r2, [r4, #4]
 8004138:	4628      	mov	r0, r5
 800413a:	f000 f82f 	bl	800419c <memchr>
 800413e:	b108      	cbz	r0, 8004144 <_printf_i+0x1f4>
 8004140:	1b40      	subs	r0, r0, r5
 8004142:	6060      	str	r0, [r4, #4]
 8004144:	6863      	ldr	r3, [r4, #4]
 8004146:	6123      	str	r3, [r4, #16]
 8004148:	2300      	movs	r3, #0
 800414a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800414e:	e7a8      	b.n	80040a2 <_printf_i+0x152>
 8004150:	462a      	mov	r2, r5
 8004152:	4649      	mov	r1, r9
 8004154:	4640      	mov	r0, r8
 8004156:	6923      	ldr	r3, [r4, #16]
 8004158:	47d0      	blx	sl
 800415a:	3001      	adds	r0, #1
 800415c:	d0ab      	beq.n	80040b6 <_printf_i+0x166>
 800415e:	6823      	ldr	r3, [r4, #0]
 8004160:	079b      	lsls	r3, r3, #30
 8004162:	d413      	bmi.n	800418c <_printf_i+0x23c>
 8004164:	68e0      	ldr	r0, [r4, #12]
 8004166:	9b03      	ldr	r3, [sp, #12]
 8004168:	4298      	cmp	r0, r3
 800416a:	bfb8      	it	lt
 800416c:	4618      	movlt	r0, r3
 800416e:	e7a4      	b.n	80040ba <_printf_i+0x16a>
 8004170:	2301      	movs	r3, #1
 8004172:	4632      	mov	r2, r6
 8004174:	4649      	mov	r1, r9
 8004176:	4640      	mov	r0, r8
 8004178:	47d0      	blx	sl
 800417a:	3001      	adds	r0, #1
 800417c:	d09b      	beq.n	80040b6 <_printf_i+0x166>
 800417e:	3501      	adds	r5, #1
 8004180:	68e3      	ldr	r3, [r4, #12]
 8004182:	9903      	ldr	r1, [sp, #12]
 8004184:	1a5b      	subs	r3, r3, r1
 8004186:	42ab      	cmp	r3, r5
 8004188:	dcf2      	bgt.n	8004170 <_printf_i+0x220>
 800418a:	e7eb      	b.n	8004164 <_printf_i+0x214>
 800418c:	2500      	movs	r5, #0
 800418e:	f104 0619 	add.w	r6, r4, #25
 8004192:	e7f5      	b.n	8004180 <_printf_i+0x230>
 8004194:	080044f9 	.word	0x080044f9
 8004198:	0800450a 	.word	0x0800450a

0800419c <memchr>:
 800419c:	4603      	mov	r3, r0
 800419e:	b510      	push	{r4, lr}
 80041a0:	b2c9      	uxtb	r1, r1
 80041a2:	4402      	add	r2, r0
 80041a4:	4293      	cmp	r3, r2
 80041a6:	4618      	mov	r0, r3
 80041a8:	d101      	bne.n	80041ae <memchr+0x12>
 80041aa:	2000      	movs	r0, #0
 80041ac:	e003      	b.n	80041b6 <memchr+0x1a>
 80041ae:	7804      	ldrb	r4, [r0, #0]
 80041b0:	3301      	adds	r3, #1
 80041b2:	428c      	cmp	r4, r1
 80041b4:	d1f6      	bne.n	80041a4 <memchr+0x8>
 80041b6:	bd10      	pop	{r4, pc}

080041b8 <memcpy>:
 80041b8:	440a      	add	r2, r1
 80041ba:	4291      	cmp	r1, r2
 80041bc:	f100 33ff 	add.w	r3, r0, #4294967295
 80041c0:	d100      	bne.n	80041c4 <memcpy+0xc>
 80041c2:	4770      	bx	lr
 80041c4:	b510      	push	{r4, lr}
 80041c6:	f811 4b01 	ldrb.w	r4, [r1], #1
 80041ca:	4291      	cmp	r1, r2
 80041cc:	f803 4f01 	strb.w	r4, [r3, #1]!
 80041d0:	d1f9      	bne.n	80041c6 <memcpy+0xe>
 80041d2:	bd10      	pop	{r4, pc}

080041d4 <memmove>:
 80041d4:	4288      	cmp	r0, r1
 80041d6:	b510      	push	{r4, lr}
 80041d8:	eb01 0402 	add.w	r4, r1, r2
 80041dc:	d902      	bls.n	80041e4 <memmove+0x10>
 80041de:	4284      	cmp	r4, r0
 80041e0:	4623      	mov	r3, r4
 80041e2:	d807      	bhi.n	80041f4 <memmove+0x20>
 80041e4:	1e43      	subs	r3, r0, #1
 80041e6:	42a1      	cmp	r1, r4
 80041e8:	d008      	beq.n	80041fc <memmove+0x28>
 80041ea:	f811 2b01 	ldrb.w	r2, [r1], #1
 80041ee:	f803 2f01 	strb.w	r2, [r3, #1]!
 80041f2:	e7f8      	b.n	80041e6 <memmove+0x12>
 80041f4:	4601      	mov	r1, r0
 80041f6:	4402      	add	r2, r0
 80041f8:	428a      	cmp	r2, r1
 80041fa:	d100      	bne.n	80041fe <memmove+0x2a>
 80041fc:	bd10      	pop	{r4, pc}
 80041fe:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8004202:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8004206:	e7f7      	b.n	80041f8 <memmove+0x24>

08004208 <_free_r>:
 8004208:	b538      	push	{r3, r4, r5, lr}
 800420a:	4605      	mov	r5, r0
 800420c:	2900      	cmp	r1, #0
 800420e:	d040      	beq.n	8004292 <_free_r+0x8a>
 8004210:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004214:	1f0c      	subs	r4, r1, #4
 8004216:	2b00      	cmp	r3, #0
 8004218:	bfb8      	it	lt
 800421a:	18e4      	addlt	r4, r4, r3
 800421c:	f000 f910 	bl	8004440 <__malloc_lock>
 8004220:	4a1c      	ldr	r2, [pc, #112]	; (8004294 <_free_r+0x8c>)
 8004222:	6813      	ldr	r3, [r2, #0]
 8004224:	b933      	cbnz	r3, 8004234 <_free_r+0x2c>
 8004226:	6063      	str	r3, [r4, #4]
 8004228:	6014      	str	r4, [r2, #0]
 800422a:	4628      	mov	r0, r5
 800422c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004230:	f000 b90c 	b.w	800444c <__malloc_unlock>
 8004234:	42a3      	cmp	r3, r4
 8004236:	d908      	bls.n	800424a <_free_r+0x42>
 8004238:	6820      	ldr	r0, [r4, #0]
 800423a:	1821      	adds	r1, r4, r0
 800423c:	428b      	cmp	r3, r1
 800423e:	bf01      	itttt	eq
 8004240:	6819      	ldreq	r1, [r3, #0]
 8004242:	685b      	ldreq	r3, [r3, #4]
 8004244:	1809      	addeq	r1, r1, r0
 8004246:	6021      	streq	r1, [r4, #0]
 8004248:	e7ed      	b.n	8004226 <_free_r+0x1e>
 800424a:	461a      	mov	r2, r3
 800424c:	685b      	ldr	r3, [r3, #4]
 800424e:	b10b      	cbz	r3, 8004254 <_free_r+0x4c>
 8004250:	42a3      	cmp	r3, r4
 8004252:	d9fa      	bls.n	800424a <_free_r+0x42>
 8004254:	6811      	ldr	r1, [r2, #0]
 8004256:	1850      	adds	r0, r2, r1
 8004258:	42a0      	cmp	r0, r4
 800425a:	d10b      	bne.n	8004274 <_free_r+0x6c>
 800425c:	6820      	ldr	r0, [r4, #0]
 800425e:	4401      	add	r1, r0
 8004260:	1850      	adds	r0, r2, r1
 8004262:	4283      	cmp	r3, r0
 8004264:	6011      	str	r1, [r2, #0]
 8004266:	d1e0      	bne.n	800422a <_free_r+0x22>
 8004268:	6818      	ldr	r0, [r3, #0]
 800426a:	685b      	ldr	r3, [r3, #4]
 800426c:	4401      	add	r1, r0
 800426e:	6011      	str	r1, [r2, #0]
 8004270:	6053      	str	r3, [r2, #4]
 8004272:	e7da      	b.n	800422a <_free_r+0x22>
 8004274:	d902      	bls.n	800427c <_free_r+0x74>
 8004276:	230c      	movs	r3, #12
 8004278:	602b      	str	r3, [r5, #0]
 800427a:	e7d6      	b.n	800422a <_free_r+0x22>
 800427c:	6820      	ldr	r0, [r4, #0]
 800427e:	1821      	adds	r1, r4, r0
 8004280:	428b      	cmp	r3, r1
 8004282:	bf01      	itttt	eq
 8004284:	6819      	ldreq	r1, [r3, #0]
 8004286:	685b      	ldreq	r3, [r3, #4]
 8004288:	1809      	addeq	r1, r1, r0
 800428a:	6021      	streq	r1, [r4, #0]
 800428c:	6063      	str	r3, [r4, #4]
 800428e:	6054      	str	r4, [r2, #4]
 8004290:	e7cb      	b.n	800422a <_free_r+0x22>
 8004292:	bd38      	pop	{r3, r4, r5, pc}
 8004294:	20000130 	.word	0x20000130

08004298 <sbrk_aligned>:
 8004298:	b570      	push	{r4, r5, r6, lr}
 800429a:	4e0e      	ldr	r6, [pc, #56]	; (80042d4 <sbrk_aligned+0x3c>)
 800429c:	460c      	mov	r4, r1
 800429e:	6831      	ldr	r1, [r6, #0]
 80042a0:	4605      	mov	r5, r0
 80042a2:	b911      	cbnz	r1, 80042aa <sbrk_aligned+0x12>
 80042a4:	f000 f8bc 	bl	8004420 <_sbrk_r>
 80042a8:	6030      	str	r0, [r6, #0]
 80042aa:	4621      	mov	r1, r4
 80042ac:	4628      	mov	r0, r5
 80042ae:	f000 f8b7 	bl	8004420 <_sbrk_r>
 80042b2:	1c43      	adds	r3, r0, #1
 80042b4:	d00a      	beq.n	80042cc <sbrk_aligned+0x34>
 80042b6:	1cc4      	adds	r4, r0, #3
 80042b8:	f024 0403 	bic.w	r4, r4, #3
 80042bc:	42a0      	cmp	r0, r4
 80042be:	d007      	beq.n	80042d0 <sbrk_aligned+0x38>
 80042c0:	1a21      	subs	r1, r4, r0
 80042c2:	4628      	mov	r0, r5
 80042c4:	f000 f8ac 	bl	8004420 <_sbrk_r>
 80042c8:	3001      	adds	r0, #1
 80042ca:	d101      	bne.n	80042d0 <sbrk_aligned+0x38>
 80042cc:	f04f 34ff 	mov.w	r4, #4294967295
 80042d0:	4620      	mov	r0, r4
 80042d2:	bd70      	pop	{r4, r5, r6, pc}
 80042d4:	20000134 	.word	0x20000134

080042d8 <_malloc_r>:
 80042d8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80042dc:	1ccd      	adds	r5, r1, #3
 80042de:	f025 0503 	bic.w	r5, r5, #3
 80042e2:	3508      	adds	r5, #8
 80042e4:	2d0c      	cmp	r5, #12
 80042e6:	bf38      	it	cc
 80042e8:	250c      	movcc	r5, #12
 80042ea:	2d00      	cmp	r5, #0
 80042ec:	4607      	mov	r7, r0
 80042ee:	db01      	blt.n	80042f4 <_malloc_r+0x1c>
 80042f0:	42a9      	cmp	r1, r5
 80042f2:	d905      	bls.n	8004300 <_malloc_r+0x28>
 80042f4:	230c      	movs	r3, #12
 80042f6:	2600      	movs	r6, #0
 80042f8:	603b      	str	r3, [r7, #0]
 80042fa:	4630      	mov	r0, r6
 80042fc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004300:	4e2e      	ldr	r6, [pc, #184]	; (80043bc <_malloc_r+0xe4>)
 8004302:	f000 f89d 	bl	8004440 <__malloc_lock>
 8004306:	6833      	ldr	r3, [r6, #0]
 8004308:	461c      	mov	r4, r3
 800430a:	bb34      	cbnz	r4, 800435a <_malloc_r+0x82>
 800430c:	4629      	mov	r1, r5
 800430e:	4638      	mov	r0, r7
 8004310:	f7ff ffc2 	bl	8004298 <sbrk_aligned>
 8004314:	1c43      	adds	r3, r0, #1
 8004316:	4604      	mov	r4, r0
 8004318:	d14d      	bne.n	80043b6 <_malloc_r+0xde>
 800431a:	6834      	ldr	r4, [r6, #0]
 800431c:	4626      	mov	r6, r4
 800431e:	2e00      	cmp	r6, #0
 8004320:	d140      	bne.n	80043a4 <_malloc_r+0xcc>
 8004322:	6823      	ldr	r3, [r4, #0]
 8004324:	4631      	mov	r1, r6
 8004326:	4638      	mov	r0, r7
 8004328:	eb04 0803 	add.w	r8, r4, r3
 800432c:	f000 f878 	bl	8004420 <_sbrk_r>
 8004330:	4580      	cmp	r8, r0
 8004332:	d13a      	bne.n	80043aa <_malloc_r+0xd2>
 8004334:	6821      	ldr	r1, [r4, #0]
 8004336:	3503      	adds	r5, #3
 8004338:	1a6d      	subs	r5, r5, r1
 800433a:	f025 0503 	bic.w	r5, r5, #3
 800433e:	3508      	adds	r5, #8
 8004340:	2d0c      	cmp	r5, #12
 8004342:	bf38      	it	cc
 8004344:	250c      	movcc	r5, #12
 8004346:	4638      	mov	r0, r7
 8004348:	4629      	mov	r1, r5
 800434a:	f7ff ffa5 	bl	8004298 <sbrk_aligned>
 800434e:	3001      	adds	r0, #1
 8004350:	d02b      	beq.n	80043aa <_malloc_r+0xd2>
 8004352:	6823      	ldr	r3, [r4, #0]
 8004354:	442b      	add	r3, r5
 8004356:	6023      	str	r3, [r4, #0]
 8004358:	e00e      	b.n	8004378 <_malloc_r+0xa0>
 800435a:	6822      	ldr	r2, [r4, #0]
 800435c:	1b52      	subs	r2, r2, r5
 800435e:	d41e      	bmi.n	800439e <_malloc_r+0xc6>
 8004360:	2a0b      	cmp	r2, #11
 8004362:	d916      	bls.n	8004392 <_malloc_r+0xba>
 8004364:	1961      	adds	r1, r4, r5
 8004366:	42a3      	cmp	r3, r4
 8004368:	6025      	str	r5, [r4, #0]
 800436a:	bf18      	it	ne
 800436c:	6059      	strne	r1, [r3, #4]
 800436e:	6863      	ldr	r3, [r4, #4]
 8004370:	bf08      	it	eq
 8004372:	6031      	streq	r1, [r6, #0]
 8004374:	5162      	str	r2, [r4, r5]
 8004376:	604b      	str	r3, [r1, #4]
 8004378:	4638      	mov	r0, r7
 800437a:	f104 060b 	add.w	r6, r4, #11
 800437e:	f000 f865 	bl	800444c <__malloc_unlock>
 8004382:	f026 0607 	bic.w	r6, r6, #7
 8004386:	1d23      	adds	r3, r4, #4
 8004388:	1af2      	subs	r2, r6, r3
 800438a:	d0b6      	beq.n	80042fa <_malloc_r+0x22>
 800438c:	1b9b      	subs	r3, r3, r6
 800438e:	50a3      	str	r3, [r4, r2]
 8004390:	e7b3      	b.n	80042fa <_malloc_r+0x22>
 8004392:	6862      	ldr	r2, [r4, #4]
 8004394:	42a3      	cmp	r3, r4
 8004396:	bf0c      	ite	eq
 8004398:	6032      	streq	r2, [r6, #0]
 800439a:	605a      	strne	r2, [r3, #4]
 800439c:	e7ec      	b.n	8004378 <_malloc_r+0xa0>
 800439e:	4623      	mov	r3, r4
 80043a0:	6864      	ldr	r4, [r4, #4]
 80043a2:	e7b2      	b.n	800430a <_malloc_r+0x32>
 80043a4:	4634      	mov	r4, r6
 80043a6:	6876      	ldr	r6, [r6, #4]
 80043a8:	e7b9      	b.n	800431e <_malloc_r+0x46>
 80043aa:	230c      	movs	r3, #12
 80043ac:	4638      	mov	r0, r7
 80043ae:	603b      	str	r3, [r7, #0]
 80043b0:	f000 f84c 	bl	800444c <__malloc_unlock>
 80043b4:	e7a1      	b.n	80042fa <_malloc_r+0x22>
 80043b6:	6025      	str	r5, [r4, #0]
 80043b8:	e7de      	b.n	8004378 <_malloc_r+0xa0>
 80043ba:	bf00      	nop
 80043bc:	20000130 	.word	0x20000130

080043c0 <_realloc_r>:
 80043c0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80043c4:	4680      	mov	r8, r0
 80043c6:	4614      	mov	r4, r2
 80043c8:	460e      	mov	r6, r1
 80043ca:	b921      	cbnz	r1, 80043d6 <_realloc_r+0x16>
 80043cc:	4611      	mov	r1, r2
 80043ce:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80043d2:	f7ff bf81 	b.w	80042d8 <_malloc_r>
 80043d6:	b92a      	cbnz	r2, 80043e4 <_realloc_r+0x24>
 80043d8:	f7ff ff16 	bl	8004208 <_free_r>
 80043dc:	4625      	mov	r5, r4
 80043de:	4628      	mov	r0, r5
 80043e0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80043e4:	f000 f838 	bl	8004458 <_malloc_usable_size_r>
 80043e8:	4284      	cmp	r4, r0
 80043ea:	4607      	mov	r7, r0
 80043ec:	d802      	bhi.n	80043f4 <_realloc_r+0x34>
 80043ee:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80043f2:	d812      	bhi.n	800441a <_realloc_r+0x5a>
 80043f4:	4621      	mov	r1, r4
 80043f6:	4640      	mov	r0, r8
 80043f8:	f7ff ff6e 	bl	80042d8 <_malloc_r>
 80043fc:	4605      	mov	r5, r0
 80043fe:	2800      	cmp	r0, #0
 8004400:	d0ed      	beq.n	80043de <_realloc_r+0x1e>
 8004402:	42bc      	cmp	r4, r7
 8004404:	4622      	mov	r2, r4
 8004406:	4631      	mov	r1, r6
 8004408:	bf28      	it	cs
 800440a:	463a      	movcs	r2, r7
 800440c:	f7ff fed4 	bl	80041b8 <memcpy>
 8004410:	4631      	mov	r1, r6
 8004412:	4640      	mov	r0, r8
 8004414:	f7ff fef8 	bl	8004208 <_free_r>
 8004418:	e7e1      	b.n	80043de <_realloc_r+0x1e>
 800441a:	4635      	mov	r5, r6
 800441c:	e7df      	b.n	80043de <_realloc_r+0x1e>
	...

08004420 <_sbrk_r>:
 8004420:	b538      	push	{r3, r4, r5, lr}
 8004422:	2300      	movs	r3, #0
 8004424:	4d05      	ldr	r5, [pc, #20]	; (800443c <_sbrk_r+0x1c>)
 8004426:	4604      	mov	r4, r0
 8004428:	4608      	mov	r0, r1
 800442a:	602b      	str	r3, [r5, #0]
 800442c:	f7fc fec0 	bl	80011b0 <_sbrk>
 8004430:	1c43      	adds	r3, r0, #1
 8004432:	d102      	bne.n	800443a <_sbrk_r+0x1a>
 8004434:	682b      	ldr	r3, [r5, #0]
 8004436:	b103      	cbz	r3, 800443a <_sbrk_r+0x1a>
 8004438:	6023      	str	r3, [r4, #0]
 800443a:	bd38      	pop	{r3, r4, r5, pc}
 800443c:	20000138 	.word	0x20000138

08004440 <__malloc_lock>:
 8004440:	4801      	ldr	r0, [pc, #4]	; (8004448 <__malloc_lock+0x8>)
 8004442:	f000 b811 	b.w	8004468 <__retarget_lock_acquire_recursive>
 8004446:	bf00      	nop
 8004448:	2000013c 	.word	0x2000013c

0800444c <__malloc_unlock>:
 800444c:	4801      	ldr	r0, [pc, #4]	; (8004454 <__malloc_unlock+0x8>)
 800444e:	f000 b80c 	b.w	800446a <__retarget_lock_release_recursive>
 8004452:	bf00      	nop
 8004454:	2000013c 	.word	0x2000013c

08004458 <_malloc_usable_size_r>:
 8004458:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800445c:	1f18      	subs	r0, r3, #4
 800445e:	2b00      	cmp	r3, #0
 8004460:	bfbc      	itt	lt
 8004462:	580b      	ldrlt	r3, [r1, r0]
 8004464:	18c0      	addlt	r0, r0, r3
 8004466:	4770      	bx	lr

08004468 <__retarget_lock_acquire_recursive>:
 8004468:	4770      	bx	lr

0800446a <__retarget_lock_release_recursive>:
 800446a:	4770      	bx	lr

0800446c <_init>:
 800446c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800446e:	bf00      	nop
 8004470:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004472:	bc08      	pop	{r3}
 8004474:	469e      	mov	lr, r3
 8004476:	4770      	bx	lr

08004478 <_fini>:
 8004478:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800447a:	bf00      	nop
 800447c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800447e:	bc08      	pop	{r3}
 8004480:	469e      	mov	lr, r3
 8004482:	4770      	bx	lr
